/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/record-schemas.json (originating from oats-ts/oats-schemas)
 */

import {
  ArrayRecordType,
  BooleanRecordType,
  NumberRecordType,
  ObjectRecordType,
  RefRecordType,
  ReferenceTarget,
  StringRecordType,
} from './types'

export function isArrayRecordType(input: any): input is ArrayRecordType {
  return (
    input !== null &&
    typeof input === 'object' &&
    Object.keys(input).every(
      (key) => Array.isArray(input[key]) && input[key].every((item: any) => typeof item === 'string'),
    )
  )
}

export function isBooleanRecordType(input: any): input is BooleanRecordType {
  return (
    input !== null && typeof input === 'object' && Object.keys(input).every((key) => typeof input[key] === 'boolean')
  )
}

export function isNumberRecordType(input: any): input is NumberRecordType {
  return (
    input !== null && typeof input === 'object' && Object.keys(input).every((key) => typeof input[key] === 'number')
  )
}

export function isObjectRecordType(input: any): input is ObjectRecordType {
  return (
    input !== null &&
    typeof input === 'object' &&
    Object.keys(input).every(
      (key) => input[key] !== null && typeof input[key] === 'object' && typeof input[key].foo === 'string',
    )
  )
}

export function isRefRecordType(input: any): input is RefRecordType {
  return (
    input !== null &&
    typeof input === 'object' &&
    Object.keys(input).every((key) => isReferenceTarget(input[key]) as boolean)
  )
}

export function isReferenceTarget(input: any): input is ReferenceTarget {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.referenceTarget === undefined || input.referenceTarget === true)
  )
}

export function isStringRecordType(input: any): input is StringRecordType {
  return (
    input !== null && typeof input === 'object' && Object.keys(input).every((key) => typeof input[key] === 'string')
  )
}
