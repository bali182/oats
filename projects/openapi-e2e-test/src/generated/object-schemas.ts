/*
 * This file has been generated by Oats, please don't modify it by hand!
 * 
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/object-schemas.json
 */

import {
  array,
  boolean,
  items,
  lazy,
  literal,
  number,
  object,
  optional,
  shape,
  string,
  tuple,
  union,
} from '@oats-ts/validators'

export type ObjectWithNestedTypeFieldsType = {
  arrayField?: string[]
  enumField?: 'A' | 'B' | 'C'
  objectField?: {
    nestedField?: string
  }
  tupleField?: [string?, number?]
}

export type ObjectWithPrimitiveFieldsType = {
  booleanField?: boolean
  numberField?: number
  stringField?: string
}

export type ObjectWithReferenceFieldsType = {
  referenceArrayField?: ReferenceTarget[]
  referenceField?: ReferenceTarget
}

export type ReferenceTarget = {
  referenceTarget?: true
}

export const objectWithNestedTypeFieldsTypeTypeValidator = object(
  shape({
    arrayField: optional(array(items(string()))),
    enumField: optional(
      union({
        A: literal('A'),
        B: literal('B'),
        C: literal('C'),
      }),
    ),
    objectField: optional(object(shape({ nestedField: optional(string()) }))),
    tupleField: optional(array(tuple(optional(string()), optional(number())))),
  }),
)

export const objectWithPrimitiveFieldsTypeTypeValidator = object(
  shape({
    booleanField: optional(boolean()),
    numberField: optional(number()),
    stringField: optional(string()),
  }),
)

export const objectWithReferenceFieldsTypeTypeValidator = object(
  shape({
    referenceArrayField: optional(array(items(lazy(() => referenceTargetTypeValidator)))),
    referenceField: optional(lazy(() => referenceTargetTypeValidator)),
  }),
)

export const referenceTargetTypeValidator = object(shape({ referenceTarget: optional(literal(true)) }))

export function isObjectWithNestedTypeFieldsType(input: any): input is ObjectWithNestedTypeFieldsType {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.arrayField === null ||
      input.arrayField === undefined ||
      (Array.isArray(input.arrayField) && input.arrayField.every((item: any) => typeof item === 'string'))) &&
    (input.enumField === null ||
      input.enumField === undefined ||
      input.enumField === 'A' ||
      input.enumField === 'B' ||
      input.enumField === 'C') &&
    (input.objectField === null ||
      input.objectField === undefined ||
      (input.objectField !== null &&
        typeof input.objectField === 'object' &&
        (input.objectField.nestedField === null ||
          input.objectField.nestedField === undefined ||
          typeof input.objectField.nestedField === 'string'))) &&
    (input.tupleField === null ||
      input.tupleField === undefined ||
      (Array.isArray(input.tupleField) &&
        (input.tupleField[0] === null ||
          input.tupleField[0] === undefined ||
          typeof input.tupleField[0] === 'string') &&
        (input.tupleField[1] === null || input.tupleField[1] === undefined || typeof input.tupleField[1] === 'number')))
  )
}

export function isObjectWithPrimitiveFieldsType(input: any): input is ObjectWithPrimitiveFieldsType {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.booleanField === null || input.booleanField === undefined || typeof input.booleanField === 'boolean') &&
    (input.numberField === null || input.numberField === undefined || typeof input.numberField === 'number') &&
    (input.stringField === null || input.stringField === undefined || typeof input.stringField === 'string')
  )
}

export function isObjectWithReferenceFieldsType(input: any): input is ObjectWithReferenceFieldsType {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.referenceArrayField === null ||
      input.referenceArrayField === undefined ||
      (Array.isArray(input.referenceArrayField) &&
        input.referenceArrayField.every((item: any) => isReferenceTarget(item)))) &&
    (input.referenceField === null || input.referenceField === undefined || isReferenceTarget(input.referenceField))
  )
}

export function isReferenceTarget(input: any): input is ReferenceTarget {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.referenceTarget === null || input.referenceTarget === undefined || input.referenceTarget === true)
  )
}
