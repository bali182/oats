/*
 * This file has been generated by Oats, please don't modify it by hand!
 * 
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/enum-schemas.json
 */

import { array, literal, object, shape, tuple, union } from '@oats-ts/validators'

export type ArrayEnumType = ['A', 'B', 'C'] | [1, 2, 3] | [true, false]

export type BooleanEnumType = true | false

export type MixedEnumType =
  | 'A'
  | 121
  | true
  | null
  | ['B', 2, false]
  | {
      obj: true
    }

export type NumberEnumType = 1 | 2 | 3

export type ObjectEnumType =
  | {
      str: 'hi'
    }
  | {
      num: 121
    }
  | {
      bool: true
    }
  | {
      null: null
    }
  | {
      'has-dashes': true
      'has space': true
      'has .`/!+^ chars': true
    }

export type StringEnumType = 'A' | 'B' | 'C'

export const arrayEnumTypeTypeValidator = union({
  '["A","B","C"]': array(tuple(literal('A'), literal('B'), literal('C'))),
  '[1,2,3]': array(tuple(literal(1), literal(2), literal(3))),
  '[true,false]': array(tuple(literal(true), literal(false))),
})

export const booleanEnumTypeTypeValidator = union({
  true: literal(true),
  false: literal(false),
})

export const mixedEnumTypeTypeValidator = union({
  A: literal('A'),
  '121': literal(121),
  true: literal(true),
  null: literal(null),
  '["B",2,false]': array(tuple(literal('B'), literal(2), literal(false))),
  '{"obj":true}': object(shape({ obj: literal(true) })),
})

export const numberEnumTypeTypeValidator = union({
  '1': literal(1),
  '2': literal(2),
  '3': literal(3),
})

export const objectEnumTypeTypeValidator = union({
  '{"str":"hi"}': object(shape({ str: literal('hi') })),
  '{"num":121}': object(shape({ num: literal(121) })),
  '{"bool":true}': object(shape({ bool: literal(true) })),
  '{"null":null}': object(shape({ null: literal(null) })),
  '{"has-dashes":true,"has space":true,"has .`/!+^ chars":true}': object(
    shape({
      'has-dashes': literal(true),
      'has space': literal(true),
      'has .`/!+^ chars': literal(true),
    }),
  ),
})

export const stringEnumTypeTypeValidator = union({
  A: literal('A'),
  B: literal('B'),
  C: literal('C'),
})

export function isArrayEnumType(input: any): input is ArrayEnumType {
  return (
    (Array.isArray(input) && input[0] === 'A' && input[1] === 'B' && input[2] === 'C') ||
    (Array.isArray(input) && input[0] === 1 && input[1] === 2 && input[2] === 3) ||
    (Array.isArray(input) && input[0] === true && input[1] === false)
  )
}

export function isBooleanEnumType(input: any): input is BooleanEnumType {
  return input === true || input === false
}

export function isMixedEnumType(input: any): input is MixedEnumType {
  return (
    input === 'A' ||
    input === 121 ||
    input === true ||
    input === null ||
    (Array.isArray(input) && input[0] === 'B' && input[1] === 2 && input[2] === false) ||
    (typeof input === 'object' && typeof input !== null && input.obj === true)
  )
}

export function isNumberEnumType(input: any): input is NumberEnumType {
  return input === 1 || input === 2 || input === 3
}

export function isObjectEnumType(input: any): input is ObjectEnumType {
  return (
    (typeof input === 'object' && typeof input !== null && input.str === 'hi') ||
    (typeof input === 'object' && typeof input !== null && input.num === 121) ||
    (typeof input === 'object' && typeof input !== null && input.bool === true) ||
    (typeof input === 'object' && typeof input !== null && input['null'] === null) ||
    (typeof input === 'object' &&
      typeof input !== null &&
      input['has-dashes'] === true &&
      input['has space'] === true &&
      input['has .`/!+^ chars'] === true)
  )
}

export function isStringEnumType(input: any): input is StringEnumType {
  return input === 'A' || input === 'B' || input === 'C'
}
