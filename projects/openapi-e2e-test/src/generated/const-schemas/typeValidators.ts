/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/const-schemas.json (originating from oats-ts/oats-schemas)
 */

import { validators } from '@oats-ts/openapi-runtime'

export const arrayLiteralTypeTypeValidator = validators.array(
  validators.tuple(
    validators.literal('string value'),
    validators.literal(42),
    validators.literal(false),
    validators.literal(null),
    validators.object(validators.shape({ key: validators.literal(10) })),
    validators.array(validators.tuple(validators.literal(3), validators.literal(false), validators.literal('hello'))),
  ),
)

export const booleanLiteralTypeTypeValidator = validators.literal(true)

export const nestedObjectLiteralTypeTypeValidator = validators.object(
  validators.shape({
    obj: validators.object(
      validators.shape({
        I: validators.object(
          validators.shape({
            am: validators.object(
              validators.shape({ deeply: validators.object(validators.shape({ nested: validators.literal(true) })) }),
            ),
          }),
        ),
      }),
    ),
  }),
)

export const nullLiteralTypeTypeValidator = validators.literal(null)

export const numberLiteralTypeTypeValidator = validators.literal(125)

export const quotedKeysObjectLiteralTypeTypeValidator = validators.object(
  validators.shape({
    'has-dashes': validators.literal(true),
    'has space': validators.literal(true),
    'has .`/!+^ chars': validators.literal(true),
  }),
)

export const simpleObjectLiteralTypeTypeValidator = validators.object(
  validators.shape({
    s: validators.literal("I'm a string"),
    n: validators.literal(10),
    b: validators.literal(true),
  }),
)

export const stringLiteralTypeTypeValidator = validators.literal("I'm a constant string")
