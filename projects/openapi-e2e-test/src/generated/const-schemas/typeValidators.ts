/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/const-schemas.json (originating from oats-ts/oats-schemas)
 */

import { schemas } from '@oats-ts/openapi-runtime'

export const arrayLiteralTypeTypeValidator = schemas.array(
  schemas.tuple([
    schemas.literal('string value'),
    schemas.literal(42),
    schemas.literal(false),
    schemas.literal(null),
    schemas.object(schemas.shape({ key: schemas.literal(10) })),
    schemas.array(schemas.tuple([schemas.literal(3), schemas.literal(false), schemas.literal('hello')])),
  ]),
)

export const booleanLiteralTypeTypeValidator = schemas.literal(true)

export const nestedObjectLiteralTypeTypeValidator = schemas.object(
  schemas.shape({
    obj: schemas.object(
      schemas.shape({
        I: schemas.object(
          schemas.shape({
            am: schemas.object(
              schemas.shape({ deeply: schemas.object(schemas.shape({ nested: schemas.literal(true) })) }),
            ),
          }),
        ),
      }),
    ),
  }),
)

export const nullLiteralTypeTypeValidator = schemas.literal(null)

export const numberLiteralTypeTypeValidator = schemas.literal(125)

export const quotedKeysObjectLiteralTypeTypeValidator = schemas.object(
  schemas.shape({
    'has-dashes': schemas.literal(true),
    'has space': schemas.literal(true),
    'has .`/!+^ chars': schemas.literal(true),
  }),
)

export const simpleObjectLiteralTypeTypeValidator = schemas.object(
  schemas.shape({
    s: schemas.literal("I'm a string"),
    n: schemas.literal(10),
    b: schemas.literal(true),
  }),
)

export const stringLiteralTypeTypeValidator = schemas.literal("I'm a constant string")
