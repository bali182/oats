/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/book-store.json
 */

import { ClientAdapter, RawHttpRequest } from '@oats-ts/openapi-http'
import { getBookPathSerializer } from './pathSerializers'
import { getBooksQuerySerializer } from './querySerializers'
import { getBooksRequestHeadersSerializer } from './requestHeaderSerializers'
import { AddBookRequest, GetBookRequest, GetBooksRequest } from './requestTypes'
import {
  addBookResponseBodyValidator,
  getBookResponseBodyValidator,
  getBooksResponseBodyValidator,
} from './responseBodyValidators'
import { getBooksResponseHeadersDeserializer } from './responseHeaderDeserializers'
import { AddBookResponse, GetBookResponse, GetBooksResponse } from './responseTypes'

/**
 * Creates a new book based on the request body.
 */
export async function addBook(request: AddBookRequest, adapter: ClientAdapter): Promise<AddBookResponse> {
  const requestUrl = await adapter.getUrl('/books', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, addBookResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as AddBookResponse
}

/**
 * Returns the book associated with the given bookId
 */
export async function getBook(request: GetBookRequest, adapter: ClientAdapter): Promise<GetBookResponse> {
  const path = await adapter.getPath(request.path, getBookPathSerializer)
  const requestUrl = await adapter.getUrl(path, undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, getBookResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as GetBookResponse
}

/**
 * Returns a list of books, can be paginated
 */
export async function getBooks(request: GetBooksRequest, adapter: ClientAdapter): Promise<GetBooksResponse> {
  const query = await adapter.getQuery(request.query, getBooksQuerySerializer)
  const requestUrl = await adapter.getUrl('/books', query)
  const requestHeaders = await adapter.getRequestHeaders(
    request.headers,
    undefined,
    undefined,
    getBooksRequestHeadersSerializer,
  )
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseHeaders = await adapter.getResponseHeaders(rawResponse, statusCode, getBooksResponseHeadersDeserializer)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, getBooksResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    headers: responseHeaders,
    body: responseBody,
  } as GetBooksResponse
}
