/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/book-store.json (originating from oats-ts/oats-schemas)
 */

import {
  ClientAdapter,
  HttpMethod,
  RawHttpHeaders,
  RawHttpRequest,
  RawHttpResponse,
  RunnableOperation,
} from '@oats-ts/openapi-runtime'
import { getBookPathSerializer } from './pathSerializers'
import { getBooksQuerySerializer } from './querySerializers'
import { getBooksRequestHeadersSerializer } from './requestHeaderSerializers'
import { AddBookRequest, GetBookRequest, GetBooksRequest } from './requestTypes'
import {
  addBookResponseBodyValidator,
  getBookResponseBodyValidator,
  getBooksResponseBodyValidator,
} from './responseBodyValidators'
import { getBooksResponseHeadersDeserializer } from './responseHeaderDeserializers'
import { AddBookResponse, GetBookResponse, GetBooksResponse } from './responseTypes'

/**
 * Creates a new book based on the request body.
 */
export class AddBookOperation implements RunnableOperation<AddBookRequest, AddBookResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: AddBookRequest): string {
    return this.adapter.getUrl('/books', undefined)
  }
  protected getHttpMethod(_request: AddBookRequest): HttpMethod {
    return 'post'
  }
  protected getRequestHeaders(request: AddBookRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getRequestBody(request: AddBookRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      addBookResponseBodyValidator,
    )
  }
  public async run(request: AddBookRequest): Promise<AddBookResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
      body: this.getRequestBody(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as AddBookResponse
  }
}

/**
 * Returns the book associated with the given bookId
 */
export class GetBookOperation implements RunnableOperation<GetBookRequest, GetBookResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: GetBookRequest): string {
    const path = this.adapter.getPath(request.path, getBookPathSerializer)
    return this.adapter.getUrl(path, undefined)
  }
  protected getHttpMethod(_request: GetBookRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: GetBookRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      getBookResponseBodyValidator,
    )
  }
  public async run(request: GetBookRequest): Promise<GetBookResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as GetBookResponse
  }
}

/**
 * Returns a list of books, can be paginated
 */
export class GetBooksOperation implements RunnableOperation<GetBooksRequest, GetBooksResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: GetBooksRequest): string {
    const query = this.adapter.getQuery(request.query, getBooksQuerySerializer)
    return this.adapter.getUrl('/books', query)
  }
  protected getHttpMethod(_request: GetBooksRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(request: GetBooksRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(request.headers, undefined, undefined, getBooksRequestHeadersSerializer)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseHeaders(response: RawHttpResponse): RawHttpHeaders {
    return this.adapter.getResponseHeaders(response, this.getStatusCode(response), getBooksResponseHeadersDeserializer)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      getBooksResponseBodyValidator,
    )
  }
  public async run(request: GetBooksRequest): Promise<GetBooksResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      headers: this.getResponseHeaders(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as GetBooksResponse
  }
}
