/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/book-store.json
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-runtime'
import { IRouter, NextFunction, Request, Response, Router } from 'express'
import { BookStoreApi } from './apiType'
import { bookStoreCorsConfiguration } from './corsConfiguration'
import { getBookPathDeserializer } from './pathDeserializers'
import { getBooksQueryDeserializer } from './queryDeserializers'
import { addBookRequestBodyValidator } from './requestBodyValidators'
import { getBooksRequestHeadersDeserializer } from './requestHeaderDeserializers'
import { AddBookServerRequest, GetBookServerRequest, GetBooksServerRequest } from './requestServerTypes'
import { getBooksResponseHeadersSerializer } from './responseHeaderSerializers'
import { Book } from './types'

export function createAddBookRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).post(
    '/books',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_15ojy6m']
      const api: BookStoreApi = response.locals['__oats_api_15ojy6m']
      try {
        const mimeType = await adapter.getMimeType<'application/json'>(toolkit)
        const body = await adapter.getRequestBody<'application/json', Book>(
          toolkit,
          true,
          mimeType,
          addBookRequestBodyValidator,
        )
        const typedRequest: AddBookServerRequest = {
          mimeType,
          body,
        }
        const corsConfig = bookStoreCorsConfiguration?.['/books']?.post
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.addBook(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createGetBookRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/books/:bookId',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_15ojy6m']
      const api: BookStoreApi = response.locals['__oats_api_15ojy6m']
      try {
        const path = await adapter.getPathParameters(toolkit, getBookPathDeserializer)
        const typedRequest: GetBookServerRequest = {
          path,
        }
        const corsConfig = bookStoreCorsConfiguration?.['/books/{bookId}']?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.getBook(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createGetBooksRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/books',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_15ojy6m']
      const api: BookStoreApi = response.locals['__oats_api_15ojy6m']
      try {
        const query = await adapter.getQueryParameters(toolkit, getBooksQueryDeserializer)
        const headers = await adapter.getRequestHeaders(toolkit, getBooksRequestHeadersDeserializer)
        const typedRequest: GetBooksServerRequest = {
          query,
          headers,
        }
        const corsConfig = bookStoreCorsConfiguration?.['/books']?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.getBooks(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            getBooksResponseHeadersSerializer,
            corsHeaders,
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}
