/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/book-store.json
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { ServerAdapter } from '@oats-ts/openapi-http'
import { NextFunction, Request, Response, Router } from 'express'

export const bookStoreCorsMiddleware: Router = Router()
  .options('/books/:bookId', async (request: Request, response: Response, next: NextFunction) => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    try {
      await adapter.respond(toolkit, {
        headers: await adapter.getPreflightCorsHeaders(toolkit, {
          allowedOrigins: { get: true },
          allowedMethods: ['get'],
          allowedResponseHeaders: { get: ['content-type'] },
        }),
      })
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })
  .options('/books', async (request: Request, response: Response, next: NextFunction) => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    try {
      await adapter.respond(toolkit, {
        headers: await adapter.getPreflightCorsHeaders(toolkit, {
          allowedOrigins: { get: true, post: true },
          allowedMethods: ['get', 'post'],
          allowedRequestHeaders: { get: ['x-limit'], post: ['content-type'] },
          allowedResponseHeaders: { get: ['x-length', 'content-type'], post: ['content-type'] },
        }),
      })
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })
