/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/bodies.json (originating from oats-ts/oats-schemas)
 */

import {
  ClientAdapter,
  HttpMethod,
  RawHttpHeaders,
  RawHttpRequest,
  RawHttpResponse,
  RunnableOperation,
} from '@oats-ts/openapi-runtime'
import {
  ArrObjRequest,
  BoolArrRequest,
  BoolRequest,
  EnmArrRequest,
  EnmRequest,
  NestedObjRequest,
  NumArrRequest,
  NumRequest,
  OptPrimTupleRequest,
  PrimObjRequest,
  PrimTupleRequest,
  StrArrRequest,
  StrRequest,
} from './requestTypes'
import {
  arrObjResponseBodyValidator,
  boolArrResponseBodyValidator,
  boolResponseBodyValidator,
  enmArrResponseBodyValidator,
  enmResponseBodyValidator,
  nestedObjResponseBodyValidator,
  numArrResponseBodyValidator,
  numResponseBodyValidator,
  optPrimTupleResponseBodyValidator,
  primObjResponseBodyValidator,
  primTupleResponseBodyValidator,
  strArrResponseBodyValidator,
  strResponseBodyValidator,
} from './responseBodyValidators'
import {
  ArrObjResponse,
  BoolArrResponse,
  BoolResponse,
  EnmArrResponse,
  EnmResponse,
  NestedObjResponse,
  NumArrResponse,
  NumResponse,
  OptPrimTupleResponse,
  PrimObjResponse,
  PrimTupleResponse,
  StrArrResponse,
  StrResponse,
} from './responseTypes'

export class ArrObjOperation implements RunnableOperation<ArrObjRequest, ArrObjResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: ArrObjRequest): string {
    return this.adapter.getUrl('/arr-obj', undefined)
  }
  protected getRequestMethod(_request: ArrObjRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: ArrObjRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: ArrObjRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      arrObjResponseBodyValidator,
    )
  }
  public async run(request: ArrObjRequest): Promise<ArrObjResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as ArrObjResponse
  }
}

export class BoolArrOperation implements RunnableOperation<BoolArrRequest, BoolArrResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: BoolArrRequest): string {
    return this.adapter.getUrl('/bool-arr', undefined)
  }
  protected getRequestMethod(_request: BoolArrRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: BoolArrRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: BoolArrRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      boolArrResponseBodyValidator,
    )
  }
  public async run(request: BoolArrRequest): Promise<BoolArrResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as BoolArrResponse
  }
}

export class BoolOperation implements RunnableOperation<BoolRequest, BoolResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: BoolRequest): string {
    return this.adapter.getUrl('/bool', undefined)
  }
  protected getRequestMethod(_request: BoolRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: BoolRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: BoolRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      boolResponseBodyValidator,
    )
  }
  public async run(request: BoolRequest): Promise<BoolResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as BoolResponse
  }
}

export class EnmArrOperation implements RunnableOperation<EnmArrRequest, EnmArrResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: EnmArrRequest): string {
    return this.adapter.getUrl('/enm-arr', undefined)
  }
  protected getRequestMethod(_request: EnmArrRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: EnmArrRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: EnmArrRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      enmArrResponseBodyValidator,
    )
  }
  public async run(request: EnmArrRequest): Promise<EnmArrResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as EnmArrResponse
  }
}

export class EnmOperation implements RunnableOperation<EnmRequest, EnmResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: EnmRequest): string {
    return this.adapter.getUrl('/enm', undefined)
  }
  protected getRequestMethod(_request: EnmRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: EnmRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: EnmRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      enmResponseBodyValidator,
    )
  }
  public async run(request: EnmRequest): Promise<EnmResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as EnmResponse
  }
}

export class NestedObjOperation implements RunnableOperation<NestedObjRequest, NestedObjResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: NestedObjRequest): string {
    return this.adapter.getUrl('/nested-obj', undefined)
  }
  protected getRequestMethod(_request: NestedObjRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: NestedObjRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: NestedObjRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      nestedObjResponseBodyValidator,
    )
  }
  public async run(request: NestedObjRequest): Promise<NestedObjResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as NestedObjResponse
  }
}

export class NumArrOperation implements RunnableOperation<NumArrRequest, NumArrResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: NumArrRequest): string {
    return this.adapter.getUrl('/num-arr', undefined)
  }
  protected getRequestMethod(_request: NumArrRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: NumArrRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: NumArrRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      numArrResponseBodyValidator,
    )
  }
  public async run(request: NumArrRequest): Promise<NumArrResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as NumArrResponse
  }
}

export class NumOperation implements RunnableOperation<NumRequest, NumResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: NumRequest): string {
    return this.adapter.getUrl('/num', undefined)
  }
  protected getRequestMethod(_request: NumRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: NumRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: NumRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      numResponseBodyValidator,
    )
  }
  public async run(request: NumRequest): Promise<NumResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as NumResponse
  }
}

export class OptPrimTupleOperation implements RunnableOperation<OptPrimTupleRequest, OptPrimTupleResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: OptPrimTupleRequest): string {
    return this.adapter.getUrl('/opt-prim-tuple', undefined)
  }
  protected getRequestMethod(_request: OptPrimTupleRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: OptPrimTupleRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: OptPrimTupleRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      optPrimTupleResponseBodyValidator,
    )
  }
  public async run(request: OptPrimTupleRequest): Promise<OptPrimTupleResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as OptPrimTupleResponse
  }
}

export class PrimObjOperation implements RunnableOperation<PrimObjRequest, PrimObjResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: PrimObjRequest): string {
    return this.adapter.getUrl('/prim-obj', undefined)
  }
  protected getRequestMethod(_request: PrimObjRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: PrimObjRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: PrimObjRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      primObjResponseBodyValidator,
    )
  }
  public async run(request: PrimObjRequest): Promise<PrimObjResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as PrimObjResponse
  }
}

export class PrimTupleOperation implements RunnableOperation<PrimTupleRequest, PrimTupleResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: PrimTupleRequest): string {
    return this.adapter.getUrl('/prim-tuple', undefined)
  }
  protected getRequestMethod(_request: PrimTupleRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: PrimTupleRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: PrimTupleRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      primTupleResponseBodyValidator,
    )
  }
  public async run(request: PrimTupleRequest): Promise<PrimTupleResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as PrimTupleResponse
  }
}

export class StrArrOperation implements RunnableOperation<StrArrRequest, StrArrResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: StrArrRequest): string {
    return this.adapter.getUrl('/str-arr', undefined)
  }
  protected getRequestMethod(_request: StrArrRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: StrArrRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: StrArrRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      strArrResponseBodyValidator,
    )
  }
  public async run(request: StrArrRequest): Promise<StrArrResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as StrArrResponse
  }
}

export class StrOperation implements RunnableOperation<StrRequest, StrResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: StrRequest): string {
    return this.adapter.getUrl('/str', undefined)
  }
  protected getRequestMethod(_request: StrRequest): HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: StrRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: StrRequest): RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      strResponseBodyValidator,
    )
  }
  public async run(request: StrRequest): Promise<StrResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as StrResponse
  }
}
