/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/bodies.json
 */

import { ClientAdapter, RawHttpRequest } from '@oats-ts/openapi-http'
import {
  ArrObjRequest,
  BoolArrRequest,
  BoolRequest,
  EnmArrRequest,
  EnmRequest,
  NestedObjRequest,
  NumArrRequest,
  NumRequest,
  OptPrimTupleRequest,
  PrimObjRequest,
  PrimTupleRequest,
  StrArrRequest,
  StrRequest,
} from './requestTypes'
import {
  arrObjResponseBodyValidator,
  boolArrResponseBodyValidator,
  boolResponseBodyValidator,
  enmArrResponseBodyValidator,
  enmResponseBodyValidator,
  nestedObjResponseBodyValidator,
  numArrResponseBodyValidator,
  numResponseBodyValidator,
  optPrimTupleResponseBodyValidator,
  primObjResponseBodyValidator,
  primTupleResponseBodyValidator,
  strArrResponseBodyValidator,
  strResponseBodyValidator,
} from './responseBodyValidators'
import {
  ArrObjResponse,
  BoolArrResponse,
  BoolResponse,
  EnmArrResponse,
  EnmResponse,
  NestedObjResponse,
  NumArrResponse,
  NumResponse,
  OptPrimTupleResponse,
  PrimObjResponse,
  PrimTupleResponse,
  StrArrResponse,
  StrResponse,
} from './responseTypes'

export async function arrObj(request: ArrObjRequest, adapter: ClientAdapter): Promise<ArrObjResponse> {
  const requestUrl = await adapter.getUrl('/arr-obj', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, arrObjResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as ArrObjResponse
}

export async function bool(request: BoolRequest, adapter: ClientAdapter): Promise<BoolResponse> {
  const requestUrl = await adapter.getUrl('/bool', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, boolResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as BoolResponse
}

export async function boolArr(request: BoolArrRequest, adapter: ClientAdapter): Promise<BoolArrResponse> {
  const requestUrl = await adapter.getUrl('/bool-arr', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, boolArrResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as BoolArrResponse
}

export async function enm(request: EnmRequest, adapter: ClientAdapter): Promise<EnmResponse> {
  const requestUrl = await adapter.getUrl('/enm', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, enmResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as EnmResponse
}

export async function enmArr(request: EnmArrRequest, adapter: ClientAdapter): Promise<EnmArrResponse> {
  const requestUrl = await adapter.getUrl('/enm-arr', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, enmArrResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as EnmArrResponse
}

export async function nestedObj(request: NestedObjRequest, adapter: ClientAdapter): Promise<NestedObjResponse> {
  const requestUrl = await adapter.getUrl('/nested-obj', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, nestedObjResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as NestedObjResponse
}

export async function num(request: NumRequest, adapter: ClientAdapter): Promise<NumResponse> {
  const requestUrl = await adapter.getUrl('/num', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, numResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as NumResponse
}

export async function numArr(request: NumArrRequest, adapter: ClientAdapter): Promise<NumArrResponse> {
  const requestUrl = await adapter.getUrl('/num-arr', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, numArrResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as NumArrResponse
}

export async function optPrimTuple(
  request: OptPrimTupleRequest,
  adapter: ClientAdapter,
): Promise<OptPrimTupleResponse> {
  const requestUrl = await adapter.getUrl('/opt-prim-tuple', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    optPrimTupleResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as OptPrimTupleResponse
}

export async function primObj(request: PrimObjRequest, adapter: ClientAdapter): Promise<PrimObjResponse> {
  const requestUrl = await adapter.getUrl('/prim-obj', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, primObjResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as PrimObjResponse
}

export async function primTuple(request: PrimTupleRequest, adapter: ClientAdapter): Promise<PrimTupleResponse> {
  const requestUrl = await adapter.getUrl('/prim-tuple', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, primTupleResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as PrimTupleResponse
}

export async function str(request: StrRequest, adapter: ClientAdapter): Promise<StrResponse> {
  const requestUrl = await adapter.getUrl('/str', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, strResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as StrResponse
}

export async function strArr(request: StrArrRequest, adapter: ClientAdapter): Promise<StrArrResponse> {
  const requestUrl = await adapter.getUrl('/str-arr', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, strArrResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as StrArrResponse
}
