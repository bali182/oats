/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/bodies.json
 */

import {
  EnumType,
  ObjectWithArrays,
  ObjectWithNestedObjects,
  ObjectWithPrimitives,
  PrimitiveOptionalTupleType,
  PrimitiveTupleType,
} from './types'

export function isEnumType(input: any): input is EnumType {
  return input === 'A' || input === 'B' || input === 'C'
}

export function isObjectWithArrays(input: any): input is ObjectWithArrays {
  return (
    input !== null &&
    typeof input === 'object' &&
    Array.isArray(input.boolArr) &&
    input.boolArr.every((item: any) => typeof item === 'boolean') &&
    Array.isArray(input.enmArr) &&
    input.enmArr.every((item: any) => isEnumType(item) as boolean) &&
    Array.isArray(input.numArr) &&
    input.numArr.every((item: any) => typeof item === 'number') &&
    Array.isArray(input.strArr) &&
    input.strArr.every((item: any) => typeof item === 'string')
  )
}

export function isObjectWithNestedObjects(input: any): input is ObjectWithNestedObjects {
  return (
    input !== null &&
    typeof input === 'object' &&
    (isObjectWithArrays(input.arrObj) as boolean) &&
    (isObjectWithPrimitives(input.primObj) as boolean)
  )
}

export function isObjectWithPrimitives(input: any): input is ObjectWithPrimitives {
  return (
    input !== null &&
    typeof input === 'object' &&
    typeof input.bool === 'boolean' &&
    (isEnumType(input.enm) as boolean) &&
    input.lit === 'Literal Value' &&
    typeof input.num === 'number' &&
    typeof input.str === 'string'
  )
}

export function isPrimitiveOptionalTupleType(input: any): input is PrimitiveOptionalTupleType {
  return (
    Array.isArray(input) &&
    (input[0] === null || input[0] === undefined || input[0] === 'Literal Value') &&
    (input[1] === null || input[1] === undefined || typeof input[1] === 'string') &&
    (input[2] === null || input[2] === undefined || typeof input[2] === 'number') &&
    (input[3] === null || input[3] === undefined || (isEnumType(input[3]) as boolean)) &&
    (input[4] === null || input[4] === undefined || typeof input[4] === 'boolean')
  )
}

export function isPrimitiveTupleType(input: any): input is PrimitiveTupleType {
  return (
    Array.isArray(input) &&
    input[0] === 'Literal Value' &&
    typeof input[1] === 'string' &&
    typeof input[2] === 'number' &&
    (isEnumType(input[3]) as boolean) &&
    typeof input[4] === 'boolean'
  )
}
