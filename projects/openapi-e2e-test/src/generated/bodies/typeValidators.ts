/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/bodies.json (originating from oats-ts/oats-schemas)
 */

import { validators } from '@oats-ts/openapi-runtime'

export const enumTypeTypeValidator = validators.union({
  A: validators.literal('A'),
  B: validators.literal('B'),
  C: validators.literal('C'),
})

export const objectWithArraysTypeValidator = validators.object(
  validators.shape({
    boolArr: validators.array(validators.items(validators.boolean())),
    enmArr: validators.array(validators.items(validators.lazy(() => enumTypeTypeValidator))),
    numArr: validators.array(validators.items(validators.number())),
    strArr: validators.array(validators.items(validators.string())),
  }),
)

export const objectWithNestedObjectsTypeValidator = validators.object(
  validators.shape({
    arrObj: validators.lazy(() => objectWithArraysTypeValidator),
    primObj: validators.lazy(() => objectWithPrimitivesTypeValidator),
  }),
)

export const objectWithPrimitivesTypeValidator = validators.object(
  validators.shape({
    bool: validators.boolean(),
    enm: validators.lazy(() => enumTypeTypeValidator),
    lit: validators.literal('Literal Value'),
    num: validators.number(),
    str: validators.string(),
  }),
)

export const primitiveOptionalTupleTypeTypeValidator = validators.array(
  validators.tuple([
    validators.optional(validators.literal('Literal Value')),
    validators.optional(validators.string()),
    validators.optional(validators.number()),
    validators.optional(validators.lazy(() => enumTypeTypeValidator)),
    validators.optional(validators.boolean()),
  ]),
)

export const primitiveTupleTypeTypeValidator = validators.array(
  validators.tuple([
    validators.literal('Literal Value'),
    validators.string(),
    validators.number(),
    validators.lazy(() => enumTypeTypeValidator),
    validators.boolean(),
  ]),
)
