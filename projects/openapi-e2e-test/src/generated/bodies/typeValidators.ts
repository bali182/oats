/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/bodies.json (originating from oats-ts/oats-schemas)
 */

import { schemas } from '@oats-ts/openapi-runtime'

export const enumTypeTypeValidator = schemas.union({
  A: schemas.literal('A'),
  B: schemas.literal('B'),
  C: schemas.literal('C'),
})

export const objectWithArraysTypeValidator = schemas.object(
  schemas.shape({
    boolArr: schemas.array(schemas.items(schemas.boolean())),
    enmArr: schemas.array(schemas.items(schemas.lazy(() => enumTypeTypeValidator))),
    numArr: schemas.array(schemas.items(schemas.number())),
    strArr: schemas.array(schemas.items(schemas.string())),
  }),
)

export const objectWithNestedObjectsTypeValidator = schemas.object(
  schemas.shape({
    arrObj: schemas.lazy(() => objectWithArraysTypeValidator),
    primObj: schemas.lazy(() => objectWithPrimitivesTypeValidator),
  }),
)

export const objectWithPrimitivesTypeValidator = schemas.object(
  schemas.shape({
    bool: schemas.boolean(),
    enm: schemas.lazy(() => enumTypeTypeValidator),
    lit: schemas.literal('Literal Value'),
    num: schemas.number(),
    str: schemas.string(),
  }),
)

export const primitiveOptionalTupleTypeTypeValidator = schemas.array(
  schemas.tuple([
    schemas.optional(schemas.literal('Literal Value')),
    schemas.optional(schemas.string()),
    schemas.optional(schemas.number()),
    schemas.optional(schemas.lazy(() => enumTypeTypeValidator)),
    schemas.optional(schemas.boolean()),
  ]),
)

export const primitiveTupleTypeTypeValidator = schemas.array(
  schemas.tuple([
    schemas.literal('Literal Value'),
    schemas.string(),
    schemas.number(),
    schemas.lazy(() => enumTypeTypeValidator),
    schemas.boolean(),
  ]),
)
