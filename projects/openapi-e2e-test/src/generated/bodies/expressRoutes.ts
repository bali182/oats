/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/bodies.json
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-http'
import { NextFunction, Request, Response, Router } from 'express'
import { BodiesApi } from './apiType'
import {
  arrObjRequestBodyValidator,
  boolArrRequestBodyValidator,
  boolRequestBodyValidator,
  enmArrRequestBodyValidator,
  enmRequestBodyValidator,
  nestedObjRequestBodyValidator,
  numArrRequestBodyValidator,
  numRequestBodyValidator,
  optPrimTupleRequestBodyValidator,
  primObjRequestBodyValidator,
  primTupleRequestBodyValidator,
  strArrRequestBodyValidator,
  strRequestBodyValidator,
} from './requestBodyValidators'
import {
  ArrObjServerRequest,
  BoolArrServerRequest,
  BoolServerRequest,
  EnmArrServerRequest,
  EnmServerRequest,
  NestedObjServerRequest,
  NumArrServerRequest,
  NumServerRequest,
  OptPrimTupleServerRequest,
  PrimObjServerRequest,
  PrimTupleServerRequest,
  StrArrServerRequest,
  StrServerRequest,
} from './requestServerTypes'
import {
  EnumType,
  ObjectWithArrays,
  ObjectWithNestedObjects,
  ObjectWithPrimitives,
  PrimitiveOptionalTupleType,
  PrimitiveTupleType,
} from './types'

export const arrObjRouter: Router = Router().post(
  '/arr-obj',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', ObjectWithArrays>(
        toolkit,
        true,
        mimeType,
        arrObjRequestBodyValidator,
      )
      const typedRequest: ArrObjServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.arrObj(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const boolArrRouter: Router = Router().post(
  '/bool-arr',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', boolean[]>(
        toolkit,
        true,
        mimeType,
        boolArrRequestBodyValidator,
      )
      const typedRequest: BoolArrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.boolArr(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const boolRouter: Router = Router().post(
  '/bool',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', boolean>(
        toolkit,
        true,
        mimeType,
        boolRequestBodyValidator,
      )
      const typedRequest: BoolServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.bool(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const enmArrRouter: Router = Router().post(
  '/enm-arr',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', EnumType[]>(
        toolkit,
        true,
        mimeType,
        enmArrRequestBodyValidator,
      )
      const typedRequest: EnmArrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.enmArr(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const enmRouter: Router = Router().post(
  '/enm',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', EnumType>(
        toolkit,
        true,
        mimeType,
        enmRequestBodyValidator,
      )
      const typedRequest: EnmServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.enm(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const nestedObjRouter: Router = Router().post(
  '/nested-obj',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', ObjectWithNestedObjects>(
        toolkit,
        true,
        mimeType,
        nestedObjRequestBodyValidator,
      )
      const typedRequest: NestedObjServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.nestedObj(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const numArrRouter: Router = Router().post(
  '/num-arr',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', number[]>(
        toolkit,
        true,
        mimeType,
        numArrRequestBodyValidator,
      )
      const typedRequest: NumArrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.numArr(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const numRouter: Router = Router().post(
  '/num',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', number>(
        toolkit,
        true,
        mimeType,
        numRequestBodyValidator,
      )
      const typedRequest: NumServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.num(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const optPrimTupleRouter: Router = Router().post(
  '/opt-prim-tuple',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', PrimitiveOptionalTupleType>(
        toolkit,
        true,
        mimeType,
        optPrimTupleRequestBodyValidator,
      )
      const typedRequest: OptPrimTupleServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.optPrimTuple(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const primObjRouter: Router = Router().post(
  '/prim-obj',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', ObjectWithPrimitives>(
        toolkit,
        true,
        mimeType,
        primObjRequestBodyValidator,
      )
      const typedRequest: PrimObjServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.primObj(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const primTupleRouter: Router = Router().post(
  '/prim-tuple',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', PrimitiveTupleType>(
        toolkit,
        true,
        mimeType,
        primTupleRequestBodyValidator,
      )
      const typedRequest: PrimTupleServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.primTuple(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const strArrRouter: Router = Router().post(
  '/str-arr',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', string[]>(
        toolkit,
        true,
        mimeType,
        strArrRequestBodyValidator,
      )
      const typedRequest: StrArrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.strArr(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const strRouter: Router = Router().post(
  '/str',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', string>(
        toolkit,
        true,
        mimeType,
        strRequestBodyValidator,
      )
      const typedRequest: StrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.str(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)
