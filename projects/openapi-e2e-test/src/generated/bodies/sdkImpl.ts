/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/bodies.json
 */

import { ClientAdapter } from '@oats-ts/openapi-http'
import {
  arrObj,
  bool,
  boolArr,
  enm,
  enmArr,
  nestedObj,
  num,
  numArr,
  optPrimTuple,
  primObj,
  primTuple,
  str,
  strArr,
} from './operations'
import {
  ArrObjRequest,
  BoolArrRequest,
  BoolRequest,
  EnmArrRequest,
  EnmRequest,
  NestedObjRequest,
  NumArrRequest,
  NumRequest,
  OptPrimTupleRequest,
  PrimObjRequest,
  PrimTupleRequest,
  StrArrRequest,
  StrRequest,
} from './requestTypes'
import {
  ArrObjResponse,
  BoolArrResponse,
  BoolResponse,
  EnmArrResponse,
  EnmResponse,
  NestedObjResponse,
  NumArrResponse,
  NumResponse,
  OptPrimTupleResponse,
  PrimObjResponse,
  PrimTupleResponse,
  StrArrResponse,
  StrResponse,
} from './responseTypes'
import { BodiesSdk } from './sdkType'

export class BodiesSdkImpl implements BodiesSdk {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  public async str(request: StrRequest): Promise<StrResponse> {
    return str(request, this.adapter)
  }
  public async num(request: NumRequest): Promise<NumResponse> {
    return num(request, this.adapter)
  }
  public async enm(request: EnmRequest): Promise<EnmResponse> {
    return enm(request, this.adapter)
  }
  public async bool(request: BoolRequest): Promise<BoolResponse> {
    return bool(request, this.adapter)
  }
  public async primTuple(request: PrimTupleRequest): Promise<PrimTupleResponse> {
    return primTuple(request, this.adapter)
  }
  public async optPrimTuple(request: OptPrimTupleRequest): Promise<OptPrimTupleResponse> {
    return optPrimTuple(request, this.adapter)
  }
  public async strArr(request: StrArrRequest): Promise<StrArrResponse> {
    return strArr(request, this.adapter)
  }
  public async numArr(request: NumArrRequest): Promise<NumArrResponse> {
    return numArr(request, this.adapter)
  }
  public async enmArr(request: EnmArrRequest): Promise<EnmArrResponse> {
    return enmArr(request, this.adapter)
  }
  public async boolArr(request: BoolArrRequest): Promise<BoolArrResponse> {
    return boolArr(request, this.adapter)
  }
  public async primObj(request: PrimObjRequest): Promise<PrimObjResponse> {
    return primObj(request, this.adapter)
  }
  public async arrObj(request: ArrObjRequest): Promise<ArrObjResponse> {
    return arrObj(request, this.adapter)
  }
  public async nestedObj(request: NestedObjRequest): Promise<NestedObjResponse> {
    return nestedObj(request, this.adapter)
  }
}
