/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/union-type-schemas.json
 */

import { validators } from '@oats-ts/validators'

export const inlineObjectUnionTypeTypeValidator = validators.union({
  _0: validators.object(validators.shape({ foo: validators.string() })),
  _1: validators.object(validators.shape({ bar: validators.number() })),
})

export const leafType1TypeValidator = validators.object(
  validators.shape({
    foo: validators.string(),
    type: validators.literal('LeafType1'),
  }),
)

export const leafType2TypeValidator = validators.object(
  validators.shape({
    bar: validators.string(),
    type: validators.literal('LeafType2'),
  }),
)

export const leafType3TypeValidator = validators.object(
  validators.shape({
    foobar: validators.string(),
    type: validators.literal('LeafType3'),
  }),
)

export const midLevelUnionTypeTypeValidator = validators.union({
  LeafType2: validators.lazy(() => leafType2TypeValidator),
  LeafType3: validators.lazy(() => leafType3TypeValidator),
})

export const primitiveUnionTypeTypeValidator = validators.union({
  string: validators.string(),
  number: validators.number(),
  boolean: validators.boolean(),
})

export const topLevelUnionTypeTypeValidator = validators.union({
  LeafType1: validators.lazy(() => leafType1TypeValidator),
  MidLevelUnionType: validators.lazy(() => midLevelUnionTypeTypeValidator),
})
