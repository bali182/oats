/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/union-type-schemas.json (originating from oats-ts/oats-schemas)
 */

import { schemas } from '@oats-ts/openapi-runtime'

export const inlineObjectUnionTypeTypeValidator = schemas.union({
  _0: schemas.object(schemas.shape({ foo: schemas.string() })),
  _1: schemas.object(schemas.shape({ bar: schemas.number() })),
})

export const leafType1TypeValidator = schemas.object(
  schemas.shape({
    foo: schemas.string(),
    type: schemas.literal('LeafType1'),
  }),
)

export const leafType2TypeValidator = schemas.object(
  schemas.shape({
    bar: schemas.string(),
    type: schemas.literal('LeafType2'),
  }),
)

export const leafType3TypeValidator = schemas.object(
  schemas.shape({
    foobar: schemas.string(),
    type: schemas.literal('LeafType3'),
  }),
)

export const midLevelUnionTypeTypeValidator = schemas.union({
  LeafType2: schemas.lazy(() => leafType2TypeValidator),
  LeafType3: schemas.lazy(() => leafType3TypeValidator),
})

export const primitiveUnionTypeTypeValidator = schemas.union({
  string: schemas.string(),
  number: schemas.number(),
  boolean: schemas.boolean(),
})

export const topLevelUnionTypeTypeValidator = schemas.union({
  LeafType1: schemas.lazy(() => leafType1TypeValidator),
  MidLevelUnionType: schemas.lazy(() => midLevelUnionTypeTypeValidator),
})
