/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/pet-store-yaml.yaml (originating from oats-ts/oats-schemas)
 */

import {
  ClientAdapter,
  HttpMethod,
  RawHttpHeaders,
  RawHttpRequest,
  RawHttpResponse,
  RunnableOperation,
} from '@oats-ts/openapi-runtime'
import { showPetByIdPathParameters } from './pathParameters'
import { ShowPetByIdPathParameters } from './pathTypes'
import { listPetsQueryParameters } from './queryParameters'
import { ListPetsQueryParameters } from './queryTypes'
import { CreatePetsRequest, ListPetsRequest, ShowPetByIdRequest } from './requestTypes'
import {
  createPetsResponseBodyValidator,
  listPetsResponseBodyValidator,
  showPetByIdResponseBodyValidator,
} from './responseBodyValidators'
import { listPetsResponseHeaderParameters } from './responseHeaderParameters'
import { CreatePetsResponse, ListPetsResponse, ShowPetByIdResponse } from './responseTypes'

/**
 * Create a pet
 */
export class CreatePetsOperation implements RunnableOperation<CreatePetsRequest, CreatePetsResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: CreatePetsRequest): string {
    return this.adapter.getUrl('/pets', undefined)
  }
  protected getHttpMethod(_request: CreatePetsRequest): HttpMethod {
    return 'post'
  }
  protected getRequestHeaders(request: CreatePetsRequest): RawHttpHeaders {
    return {
      ...this.adapter.getMimeTypeBasedRequestHeaders(request.mimeType),
      ...this.adapter.getAuxiliaryRequestHeaders(),
    }
  }
  protected getRequestBody(request: CreatePetsRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, createPetsResponseBodyValidator)
  }
  public async run(request: CreatePetsRequest): Promise<CreatePetsResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
      body: this.getRequestBody(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as CreatePetsResponse
  }
}

/**
 * List all pets
 */
export class ListPetsOperation implements RunnableOperation<ListPetsRequest, ListPetsResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: ListPetsRequest): string {
    const query = this.adapter.getQuery<ListPetsQueryParameters | undefined>(request.query, listPetsQueryParameters)
    return this.adapter.getUrl('/pets', query)
  }
  protected getHttpMethod(_request: ListPetsRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: ListPetsRequest): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseHeaders(response: RawHttpResponse): RawHttpHeaders {
    return this.adapter.getResponseHeaders(response, listPetsResponseHeaderParameters)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, listPetsResponseBodyValidator)
  }
  public async run(request: ListPetsRequest): Promise<ListPetsResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      headers: this.getResponseHeaders(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as ListPetsResponse
  }
}

/**
 * Info for a specific pet
 */
export class ShowPetByIdOperation implements RunnableOperation<ShowPetByIdRequest, ShowPetByIdResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: ShowPetByIdRequest): string {
    const path = this.adapter.getPath<ShowPetByIdPathParameters>(request.path, showPetByIdPathParameters)
    return this.adapter.getUrl(path, undefined)
  }
  protected getHttpMethod(_request: ShowPetByIdRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: ShowPetByIdRequest): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, showPetByIdResponseBodyValidator)
  }
  public async run(request: ShowPetByIdRequest): Promise<ShowPetByIdResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as ShowPetByIdResponse
  }
}
