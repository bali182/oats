/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from edge-cases/irregular-parameters.json (originating from oats-ts/oats-schemas)
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-runtime'
import { IRouter, NextFunction, Request, Response, Router } from 'express'
import { IrregularParametersApi } from './apiType'
import { irregularParametersPathParameters } from './pathParameters'
import { IrregularParametersPathParameters } from './pathTypes'
import { irregularParametersQueryParameters } from './queryParameters'
import { IrregularParametersQueryParameters } from './queryTypes'
import { irregularParametersRequestHeaderParameters } from './requestHeaderParameters'
import { IrregularParametersRequestHeaderParameters } from './requestHeaderTypes'
import { IrregularParametersServerRequest } from './requestServerTypes'

export function createIrregularParametersRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/irregular-params/:primitiveIntersection',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_lv5deh']
      const api: IrregularParametersApi = response.locals['__oats_api_lv5deh']
      try {
        const query = await adapter.getQueryParameters<IrregularParametersQueryParameters>(
          toolkit,
          irregularParametersQueryParameters,
        )
        const path = await adapter.getPathParameters<IrregularParametersPathParameters>(
          toolkit,
          irregularParametersPathParameters,
        )
        const headers = await adapter.getRequestHeaders<IrregularParametersRequestHeaderParameters>(
          toolkit,
          irregularParametersRequestHeaderParameters,
        )
        const typedRequest: IrregularParametersServerRequest = {
          path,
          query,
          headers,
        }
        const typedResponse = await api.irregularParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}
