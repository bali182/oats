/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from edge-cases/irregular-parameters.json (originating from oats-ts/oats-schemas)
 */

import {
  ClientAdapter,
  HttpMethod,
  RawHttpHeaders,
  RawHttpRequest,
  RawHttpResponse,
  RunnableOperation,
} from '@oats-ts/openapi-runtime'
import { irregularParametersPathParameters } from './pathParameters'
import { IrregularParametersPathParameters } from './pathTypes'
import { irregularParametersQueryParameters } from './queryParameters'
import { IrregularParametersQueryParameters } from './queryTypes'
import { irregularParametersRequestHeaderParameters } from './requestHeaderParameters'
import { IrregularParametersRequestHeaderParameters } from './requestHeaderTypes'
import { IrregularParametersRequest } from './requestTypes'
import { irregularParametersResponseBodyValidator } from './responseBodyValidators'
import { IrregularParametersResponse } from './responseTypes'

/**
 * Endpoint for testing query parameters with form serialization
 */
export class IrregularParametersOperation
  implements RunnableOperation<IrregularParametersRequest, IrregularParametersResponse>
{
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: IrregularParametersRequest): string {
    const query = this.adapter.getQuery<IrregularParametersQueryParameters>(
      request.query,
      irregularParametersQueryParameters,
    )
    const path = this.adapter.getPath<IrregularParametersPathParameters>(
      request.path,
      irregularParametersPathParameters,
    )
    return this.adapter.getUrl(path, query)
  }
  protected getHttpMethod(_request: IrregularParametersRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(request: IrregularParametersRequest): RawHttpHeaders {
    return {
      ...this.adapter.getParameterBasedRequestHeaders<IrregularParametersRequestHeaderParameters>(
        request.headers,
        irregularParametersRequestHeaderParameters,
      ),
      ...this.adapter.getAuxiliaryRequestHeaders(),
    }
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, irregularParametersResponseBodyValidator)
  }
  public async run(request: IrregularParametersRequest): Promise<IrregularParametersResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as IrregularParametersResponse
  }
}
