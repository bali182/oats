/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from edge-cases/paths-with-query.json (originating from oats-ts/oats-schemas)
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-runtime'
import { IRouter, NextFunction, Request, Response, Router } from 'express'
import { PathsWithQueryParametersApi } from './apiType'

export function createGetFooBarABRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/foo/bar',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_jg333n']
      const api: PathsWithQueryParametersApi = response.locals['__oats_api_jg333n']
      try {
        const typedResponse = await api.getFooBarAB()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createGetFooBoopBarABBCRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/foo/boop/bar',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_jg333n']
      const api: PathsWithQueryParametersApi = response.locals['__oats_api_jg333n']
      try {
        const typedResponse = await api.getFooBoopBarABBC()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}
