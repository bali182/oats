/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/record-schemas.json
 */

import {
  array,
  boolean,
  items,
  lazy,
  literal,
  number,
  object,
  optional,
  record,
  shape,
  string,
} from '@oats-ts/validators'

export type ArrayRecordType = Record<string, string[]>

export type BooleanRecordType = Record<string, boolean>

export type NumberRecordType = Record<string, number>

export type ObjectRecordType = Record<
  string,
  {
    foo: string
  }
>

export type RefRecordType = Record<string, ReferenceTarget>

export type ReferenceTarget = {
  referenceTarget?: true
}

export type StringRecordType = Record<string, string>

export const arrayRecordTypeTypeValidator = object(record(string(), array(items(string()))))

export const booleanRecordTypeTypeValidator = object(record(string(), boolean()))

export const numberRecordTypeTypeValidator = object(record(string(), number()))

export const objectRecordTypeTypeValidator = object(record(string(), object(shape({ foo: string() }))))

export const refRecordTypeTypeValidator = object(
  record(
    string(),
    lazy(() => referenceTargetTypeValidator),
  ),
)

export const referenceTargetTypeValidator = object(shape({ referenceTarget: optional(literal(true)) }))

export const stringRecordTypeTypeValidator = object(record(string(), string()))

export function isArrayRecordType(input: any): input is ArrayRecordType {
  return (
    input !== null &&
    typeof input === 'object' &&
    Object.keys(input).every(
      (key) => Array.isArray(input[key]) && input[key].every((item: any) => typeof item === 'string'),
    )
  )
}

export function isBooleanRecordType(input: any): input is BooleanRecordType {
  return (
    input !== null && typeof input === 'object' && Object.keys(input).every((key) => typeof input[key] === 'boolean')
  )
}

export function isNumberRecordType(input: any): input is NumberRecordType {
  return (
    input !== null && typeof input === 'object' && Object.keys(input).every((key) => typeof input[key] === 'number')
  )
}

export function isObjectRecordType(input: any): input is ObjectRecordType {
  return (
    input !== null &&
    typeof input === 'object' &&
    Object.keys(input).every(
      (key) => input[key] !== null && typeof input[key] === 'object' && typeof input[key].foo === 'string',
    )
  )
}

export function isRefRecordType(input: any): input is RefRecordType {
  return input !== null && typeof input === 'object' && Object.keys(input).every((key) => isReferenceTarget(input[key]))
}

export function isReferenceTarget(input: any): input is ReferenceTarget {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.referenceTarget === null || input.referenceTarget === undefined || input.referenceTarget === true)
  )
}

export function isStringRecordType(input: any): input is StringRecordType {
  return (
    input !== null && typeof input === 'object' && Object.keys(input).every((key) => typeof input[key] === 'string')
  )
}
