/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from edge-cases/no-operation-ids.json (originating from oats-ts/oats-schemas)
 */

import {
  ClientAdapter,
  HttpMethod,
  RawHttpHeaders,
  RawHttpRequest,
  RawHttpResponse,
  RunnableOperation,
} from '@oats-ts/openapi-runtime'
import { patchFooParam1BarParam2PathParameters, putFooParam1BarParam2PathParameters } from './pathParameters'
import { PatchFooParam1BarParam2PathParameters, PutFooParam1BarParam2PathParameters } from './pathTypes'
import { PatchFooParam1BarParam2Request, PutFooParam1BarParam2Request } from './requestTypes'
import {
  Delete123Response,
  DeleteResponse,
  GetFooResponse,
  PatchFooParam1BarParam2Response,
  PostFooResponse,
  PutFooParam1BarParam2Response,
} from './responseTypes'

export class Delete123Operation implements RunnableOperation<void, Delete123Response> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(): string {
    return this.adapter.getUrl('/123', undefined)
  }
  protected getHttpMethod(): HttpMethod {
    return 'delete'
  }
  protected getRequestHeaders(): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  public async run(): Promise<Delete123Response> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(),
      method: this.getHttpMethod(),
      headers: this.getRequestHeaders(),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      statusCode: this.getStatusCode(rawResponse),
    }
    return typedResponse as Delete123Response
  }
}

export class DeleteOperation implements RunnableOperation<void, DeleteResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(): string {
    return this.adapter.getUrl('/', undefined)
  }
  protected getHttpMethod(): HttpMethod {
    return 'delete'
  }
  protected getRequestHeaders(): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  public async run(): Promise<DeleteResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(),
      method: this.getHttpMethod(),
      headers: this.getRequestHeaders(),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      statusCode: this.getStatusCode(rawResponse),
    }
    return typedResponse as DeleteResponse
  }
}

export class GetFooOperation implements RunnableOperation<void, GetFooResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(): string {
    return this.adapter.getUrl('/foo', undefined)
  }
  protected getHttpMethod(): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  public async run(): Promise<GetFooResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(),
      method: this.getHttpMethod(),
      headers: this.getRequestHeaders(),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      statusCode: this.getStatusCode(rawResponse),
    }
    return typedResponse as GetFooResponse
  }
}

export class PatchFooParam1BarParam2Operation
  implements RunnableOperation<PatchFooParam1BarParam2Request, PatchFooParam1BarParam2Response>
{
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: PatchFooParam1BarParam2Request): string {
    const path = this.adapter.getPath<PatchFooParam1BarParam2PathParameters>(
      request.path,
      patchFooParam1BarParam2PathParameters,
    )
    return this.adapter.getUrl(path, undefined)
  }
  protected getHttpMethod(_request: PatchFooParam1BarParam2Request): HttpMethod {
    return 'patch'
  }
  protected getRequestHeaders(_request: PatchFooParam1BarParam2Request): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  public async run(request: PatchFooParam1BarParam2Request): Promise<PatchFooParam1BarParam2Response> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      statusCode: this.getStatusCode(rawResponse),
    }
    return typedResponse as PatchFooParam1BarParam2Response
  }
}

export class PostFooOperation implements RunnableOperation<void, PostFooResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(): string {
    return this.adapter.getUrl('/foo', undefined)
  }
  protected getHttpMethod(): HttpMethod {
    return 'post'
  }
  protected getRequestHeaders(): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  public async run(): Promise<PostFooResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(),
      method: this.getHttpMethod(),
      headers: this.getRequestHeaders(),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      statusCode: this.getStatusCode(rawResponse),
    }
    return typedResponse as PostFooResponse
  }
}

export class PutFooParam1BarParam2Operation
  implements RunnableOperation<PutFooParam1BarParam2Request, PutFooParam1BarParam2Response>
{
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: PutFooParam1BarParam2Request): string {
    const path = this.adapter.getPath<PutFooParam1BarParam2PathParameters>(
      request.path,
      putFooParam1BarParam2PathParameters,
    )
    return this.adapter.getUrl(path, undefined)
  }
  protected getHttpMethod(_request: PutFooParam1BarParam2Request): HttpMethod {
    return 'put'
  }
  protected getRequestHeaders(_request: PutFooParam1BarParam2Request): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  public async run(request: PutFooParam1BarParam2Request): Promise<PutFooParam1BarParam2Response> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      statusCode: this.getStatusCode(rawResponse),
    }
    return typedResponse as PutFooParam1BarParam2Response
  }
}
