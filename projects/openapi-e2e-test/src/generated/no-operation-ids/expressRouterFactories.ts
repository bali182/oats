/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from edge-cases/no-operation-ids.json (originating from oats-ts/oats-schemas)
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-runtime'
import { IRouter, NextFunction, Request, Response, Router } from 'express'
import { NoOperationIdsApi } from './apiType'
import { patchFooParam1BarParam2PathParameters, putFooParam1BarParam2PathParameters } from './pathParameters'
import { PatchFooParam1BarParam2PathParameters, PutFooParam1BarParam2PathParameters } from './pathTypes'
import { PatchFooParam1BarParam2ServerRequest, PutFooParam1BarParam2ServerRequest } from './requestServerTypes'

export function createDelete123Router(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).delete(
    '/123',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1hf0lhs']
      const api: NoOperationIdsApi = response.locals['__oats_api_1hf0lhs']
      try {
        const typedResponse = await api.delete123()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createDeleteRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).delete(
    '/',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1hf0lhs']
      const api: NoOperationIdsApi = response.locals['__oats_api_1hf0lhs']
      try {
        const typedResponse = await api.delete()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createGetFooRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/foo',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1hf0lhs']
      const api: NoOperationIdsApi = response.locals['__oats_api_1hf0lhs']
      try {
        const typedResponse = await api.getFoo()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createPatchFooParam1BarParam2Router(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).patch(
    '/foo/:param1/bar/:param2',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1hf0lhs']
      const api: NoOperationIdsApi = response.locals['__oats_api_1hf0lhs']
      try {
        const path = await adapter.getPathParameters<PatchFooParam1BarParam2PathParameters>(
          toolkit,
          patchFooParam1BarParam2PathParameters,
        )
        const typedRequest: PatchFooParam1BarParam2ServerRequest = {
          path,
        }
        const typedResponse = await api.patchFooParam1BarParam2(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createPostFooRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).post(
    '/foo',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1hf0lhs']
      const api: NoOperationIdsApi = response.locals['__oats_api_1hf0lhs']
      try {
        const typedResponse = await api.postFoo()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createPutFooParam1BarParam2Router(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).put(
    '/foo/:param1/bar/:param2',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1hf0lhs']
      const api: NoOperationIdsApi = response.locals['__oats_api_1hf0lhs']
      try {
        const path = await adapter.getPathParameters<PutFooParam1BarParam2PathParameters>(
          toolkit,
          putFooParam1BarParam2PathParameters,
        )
        const typedRequest: PutFooParam1BarParam2ServerRequest = {
          path,
        }
        const typedResponse = await api.putFooParam1BarParam2(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}
