/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/methods.json
 */

import { ClientAdapter, RawHttpRequest } from '@oats-ts/openapi-runtime'
import {
  deleteMethodResponseBodyValidator,
  getMethodResponseBodyValidator,
  patchMethodResponseBodyValidator,
  postMethodResponseBodyValidator,
  putMethodResponseBodyValidator,
} from './responseBodyValidators'
import {
  DeleteMethodResponse,
  GetMethodResponse,
  PatchMethodResponse,
  PostMethodResponse,
  PutMethodResponse,
} from './responseTypes'

export async function deleteMethod(adapter: ClientAdapter): Promise<DeleteMethodResponse> {
  const requestUrl = await adapter.getUrl('/delete-method', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'delete',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    deleteMethodResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as DeleteMethodResponse
}

export async function getMethod(adapter: ClientAdapter): Promise<GetMethodResponse> {
  const requestUrl = await adapter.getUrl('/get-method', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, getMethodResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as GetMethodResponse
}

export async function patchMethod(adapter: ClientAdapter): Promise<PatchMethodResponse> {
  const requestUrl = await adapter.getUrl('/patch-method', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'patch',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    patchMethodResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as PatchMethodResponse
}

export async function postMethod(adapter: ClientAdapter): Promise<PostMethodResponse> {
  const requestUrl = await adapter.getUrl('/post-method', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, postMethodResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as PostMethodResponse
}

export async function putMethod(adapter: ClientAdapter): Promise<PutMethodResponse> {
  const requestUrl = await adapter.getUrl('/put-method', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'put',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, putMethodResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as PutMethodResponse
}
