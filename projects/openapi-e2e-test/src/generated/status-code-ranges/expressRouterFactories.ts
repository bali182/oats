/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from edge-cases/status-code-ranges.json (originating from oats-ts/oats-schemas)
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-runtime'
import { IRouter, NextFunction, Request, Response, Router } from 'express'
import { StatusCodeRangesApi } from './apiType'
import {
  range1XxResponseHeaderParameters,
  range2XxResponseHeaderParameters,
  range3XxResponseHeaderParameters,
  range4XxResponseHeaderParameters,
  range5XxResponseHeaderParameters,
  withNormalStatusesResponseHeaderParameters,
} from './responseHeaderParameters'

export function createRange1XxRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/1xx',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_17tixfz']
      const api: StatusCodeRangesApi = response.locals['__oats_api_17tixfz']
      try {
        const typedResponse = await api.range1Xx()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            range1XxResponseHeaderParameters,
            undefined,
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createRange2XxRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/2xx',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_17tixfz']
      const api: StatusCodeRangesApi = response.locals['__oats_api_17tixfz']
      try {
        const typedResponse = await api.range2Xx()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            range2XxResponseHeaderParameters,
            undefined,
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createRange3XxRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/3xx',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_17tixfz']
      const api: StatusCodeRangesApi = response.locals['__oats_api_17tixfz']
      try {
        const typedResponse = await api.range3Xx()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            range3XxResponseHeaderParameters,
            undefined,
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createRange4XxRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/4xx',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_17tixfz']
      const api: StatusCodeRangesApi = response.locals['__oats_api_17tixfz']
      try {
        const typedResponse = await api.range4Xx()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            range4XxResponseHeaderParameters,
            undefined,
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createRange5XxRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/5xx',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_17tixfz']
      const api: StatusCodeRangesApi = response.locals['__oats_api_17tixfz']
      try {
        const typedResponse = await api.range5Xx()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            range5XxResponseHeaderParameters,
            undefined,
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createWithNormalStatusesRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/with-normal-statuses',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_17tixfz']
      const api: StatusCodeRangesApi = response.locals['__oats_api_17tixfz']
      try {
        const typedResponse = await api.withNormalStatuses()
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            withNormalStatusesResponseHeaderParameters,
            undefined,
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}
