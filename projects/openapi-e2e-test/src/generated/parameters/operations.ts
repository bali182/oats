/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/parameters.json
 */

import {
  ClientAdapter as _ClientAdapter,
  HttpMethod as _HttpMethod,
  RawHttpHeaders as _RawHttpHeaders,
  RawHttpRequest as _RawHttpRequest,
  RawHttpResponse as _RawHttpResponse,
  RunnableOperation as _RunnableOperation,
  SyncClientAdapter as _SyncClientAdapter,
} from '@oats-ts/openapi-runtime'
import { formCookieParametersCookieSerializer } from './cookieSerializers'
import {
  labelPathParametersPathSerializer,
  matrixPathParametersPathSerializer,
  simplePathParametersPathSerializer,
} from './pathSerializers'
import {
  deepObjectQueryParametersQuerySerializer,
  formQueryParametersQuerySerializer,
  pipeDelimitedQueryParametersQuerySerializer,
  spaceDelimitedQueryParametersQuerySerializer,
} from './querySerializers'
import { simpleHeaderParametersRequestHeadersSerializer } from './requestHeaderSerializers'
import {
  DeepObjectQueryParametersRequest,
  FormCookieParametersRequest,
  FormQueryParametersRequest,
  LabelPathParametersRequest,
  MatrixPathParametersRequest,
  PipeDelimitedQueryParametersRequest,
  SimpleHeaderParametersRequest,
  SimplePathParametersRequest,
  SimpleResponseHeaderParametersRequest,
  SpaceDelimitedQueryParametersRequest,
} from './requestTypes'
import {
  deepObjectQueryParametersResponseBodyValidator,
  formCookieParametersResponseBodyValidator,
  formQueryParametersResponseBodyValidator,
  labelPathParametersResponseBodyValidator,
  matrixPathParametersResponseBodyValidator,
  pipeDelimitedQueryParametersResponseBodyValidator,
  simpleHeaderParametersResponseBodyValidator,
  simplePathParametersResponseBodyValidator,
  simpleResponseHeaderParametersResponseBodyValidator,
  spaceDelimitedQueryParametersResponseBodyValidator,
} from './responseBodyValidators'
import { simpleResponseHeaderParametersResponseHeadersDeserializer } from './responseHeaderDeserializers'
import {
  DeepObjectQueryParametersResponse,
  FormCookieParametersResponse,
  FormQueryParametersResponse,
  LabelPathParametersResponse,
  MatrixPathParametersResponse,
  PipeDelimitedQueryParametersResponse,
  SimpleHeaderParametersResponse,
  SimplePathParametersResponse,
  SimpleResponseHeaderParametersResponse,
  SpaceDelimitedQueryParametersResponse,
} from './responseTypes'
import { formCookieParametersSetCookieDeserializer } from './setCookieDeserializers'

/**
 * Endpoint for testing query parameters with deepObject serialization
 */
export async function deepObjectQueryParameters(
  request: DeepObjectQueryParametersRequest,
  adapter: _ClientAdapter,
): Promise<DeepObjectQueryParametersResponse> {
  const query = await adapter.getQuery(request.query, deepObjectQueryParametersQuerySerializer)
  const requestUrl = await adapter.getUrl('/deepObject-query-parameters', query)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    deepObjectQueryParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as DeepObjectQueryParametersResponse
}

/**
 * Endpoint for testing cookie parameters with form serialization
 */
export async function formCookieParameters(
  request: FormCookieParametersRequest,
  adapter: _ClientAdapter,
): Promise<FormCookieParametersResponse> {
  const requestUrl = await adapter.getUrl('/form-cookie-parameters', undefined)
  const cookies = await adapter.getCookies(request.cookies, formCookieParametersCookieSerializer)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, cookies, undefined)
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseCookies = await adapter.getResponseCookies(rawResponse, formCookieParametersSetCookieDeserializer)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    formCookieParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
    cookies: responseCookies,
  } as FormCookieParametersResponse
}

/**
 * Endpoint for testing query parameters with form serialization
 */
export async function formQueryParameters(
  request: FormQueryParametersRequest,
  adapter: _ClientAdapter,
): Promise<FormQueryParametersResponse> {
  const query = await adapter.getQuery(request.query, formQueryParametersQuerySerializer)
  const requestUrl = await adapter.getUrl('/form-query-parameters', query)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    formQueryParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as FormQueryParametersResponse
}

/**
 * Endpoint for testing path parameters with label serialization
 */
export async function labelPathParameters(
  request: LabelPathParametersRequest,
  adapter: _ClientAdapter,
): Promise<LabelPathParametersResponse> {
  const path = await adapter.getPath(request.path, labelPathParametersPathSerializer)
  const requestUrl = await adapter.getUrl(path, undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    labelPathParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as LabelPathParametersResponse
}

/**
 * Endpoint for testing path parameters with matrix serialization
 */
export async function matrixPathParameters(
  request: MatrixPathParametersRequest,
  adapter: _ClientAdapter,
): Promise<MatrixPathParametersResponse> {
  const path = await adapter.getPath(request.path, matrixPathParametersPathSerializer)
  const requestUrl = await adapter.getUrl(path, undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    matrixPathParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as MatrixPathParametersResponse
}

/**
 * Endpoint for testing query parameters with pipeDelimited serialization
 */
export async function pipeDelimitedQueryParameters(
  request: PipeDelimitedQueryParametersRequest,
  adapter: _ClientAdapter,
): Promise<PipeDelimitedQueryParametersResponse> {
  const query = await adapter.getQuery(request.query, pipeDelimitedQueryParametersQuerySerializer)
  const requestUrl = await adapter.getUrl('/pipeDelimited-query-parameters', query)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    pipeDelimitedQueryParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as PipeDelimitedQueryParametersResponse
}

/**
 * Endpoint for testing header parameters with simple serialization
 */
export async function simpleHeaderParameters(
  request: SimpleHeaderParametersRequest,
  adapter: _ClientAdapter,
): Promise<SimpleHeaderParametersResponse> {
  const requestUrl = await adapter.getUrl('/simple-header-parameters', undefined)
  const requestHeaders = await adapter.getRequestHeaders(
    request.headers,
    undefined,
    undefined,
    simpleHeaderParametersRequestHeadersSerializer,
  )
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    simpleHeaderParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as SimpleHeaderParametersResponse
}

/**
 * Endpoint for testing path parameters with simple serialization
 */
export async function simplePathParameters(
  request: SimplePathParametersRequest,
  adapter: _ClientAdapter,
): Promise<SimplePathParametersResponse> {
  const path = await adapter.getPath(request.path, simplePathParametersPathSerializer)
  const requestUrl = await adapter.getUrl(path, undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    simplePathParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as SimplePathParametersResponse
}

/**
 * Endpoint for testing response-header parameters with simple serialization
 */
export async function simpleResponseHeaderParameters(
  request: SimpleResponseHeaderParametersRequest,
  adapter: _ClientAdapter,
): Promise<SimpleResponseHeaderParametersResponse> {
  const requestUrl = await adapter.getUrl('/simple-response-header-parameters', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseHeaders = await adapter.getResponseHeaders(
    rawResponse,
    statusCode,
    simpleResponseHeaderParametersResponseHeadersDeserializer,
  )
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    simpleResponseHeaderParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    headers: responseHeaders,
    body: responseBody,
  } as SimpleResponseHeaderParametersResponse
}

/**
 * Endpoint for testing query parameters with spaceDelimited serialization
 */
export async function spaceDelimitedQueryParameters(
  request: SpaceDelimitedQueryParametersRequest,
  adapter: _ClientAdapter,
): Promise<SpaceDelimitedQueryParametersResponse> {
  const query = await adapter.getQuery(request.query, spaceDelimitedQueryParametersQuerySerializer)
  const requestUrl = await adapter.getUrl('/spaceDelimited-query-parameters', query)
  const requestHeaders = await adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  const rawRequest: _RawHttpRequest = {
    url: requestUrl,
    method: 'get',
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    spaceDelimitedQueryParametersResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as SpaceDelimitedQueryParametersResponse
}

/**
 * Endpoint for testing query parameters with deepObject serialization
 */
export class DeepObjectQueryParametersOperation
  implements _RunnableOperation<DeepObjectQueryParametersRequest, DeepObjectQueryParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: DeepObjectQueryParametersRequest): string {
    const query = this.adapter.getQuery(request.query, deepObjectQueryParametersQuerySerializer)
    return this.adapter.getUrl('/deepObject-query-parameters', query)
  }
  protected getRequestMethod(_request: DeepObjectQueryParametersRequest): _HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: DeepObjectQueryParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      deepObjectQueryParametersResponseBodyValidator,
    )
  }
  public async run(request: DeepObjectQueryParametersRequest): Promise<DeepObjectQueryParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as DeepObjectQueryParametersResponse
  }
}

/**
 * Endpoint for testing cookie parameters with form serialization
 */
export class FormCookieParametersOperation
  implements _RunnableOperation<FormCookieParametersRequest, FormCookieParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: FormCookieParametersRequest): string {
    return this.adapter.getUrl('/form-cookie-parameters', undefined)
  }
  protected getRequestMethod(_request: FormCookieParametersRequest): _HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: FormCookieParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, undefined, cookies, undefined)
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      formCookieParametersResponseBodyValidator,
    )
  }
  public async run(request: FormCookieParametersRequest): Promise<FormCookieParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
      cookies: this.getResponseCookies(rawResponse),
    }
    return typedResponse as FormCookieParametersResponse
  }
}

/**
 * Endpoint for testing query parameters with form serialization
 */
export class FormQueryParametersOperation
  implements _RunnableOperation<FormQueryParametersRequest, FormQueryParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: FormQueryParametersRequest): string {
    const query = this.adapter.getQuery(request.query, formQueryParametersQuerySerializer)
    return this.adapter.getUrl('/form-query-parameters', query)
  }
  protected getRequestMethod(_request: FormQueryParametersRequest): _HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: FormQueryParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      formQueryParametersResponseBodyValidator,
    )
  }
  public async run(request: FormQueryParametersRequest): Promise<FormQueryParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as FormQueryParametersResponse
  }
}

/**
 * Endpoint for testing path parameters with label serialization
 */
export class LabelPathParametersOperation
  implements _RunnableOperation<LabelPathParametersRequest, LabelPathParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: LabelPathParametersRequest): string {
    const path = this.adapter.getPath(request.path, labelPathParametersPathSerializer)
    return this.adapter.getUrl(path, undefined)
  }
  protected getRequestMethod(_request: LabelPathParametersRequest): _HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: LabelPathParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      labelPathParametersResponseBodyValidator,
    )
  }
  public async run(request: LabelPathParametersRequest): Promise<LabelPathParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as LabelPathParametersResponse
  }
}

/**
 * Endpoint for testing path parameters with matrix serialization
 */
export class MatrixPathParametersOperation
  implements _RunnableOperation<MatrixPathParametersRequest, MatrixPathParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: MatrixPathParametersRequest): string {
    const path = this.adapter.getPath(request.path, matrixPathParametersPathSerializer)
    return this.adapter.getUrl(path, undefined)
  }
  protected getRequestMethod(_request: MatrixPathParametersRequest): _HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: MatrixPathParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      matrixPathParametersResponseBodyValidator,
    )
  }
  public async run(request: MatrixPathParametersRequest): Promise<MatrixPathParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as MatrixPathParametersResponse
  }
}

/**
 * Endpoint for testing query parameters with pipeDelimited serialization
 */
export class PipeDelimitedQueryParametersOperation
  implements _RunnableOperation<PipeDelimitedQueryParametersRequest, PipeDelimitedQueryParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: PipeDelimitedQueryParametersRequest): string {
    const query = this.adapter.getQuery(request.query, pipeDelimitedQueryParametersQuerySerializer)
    return this.adapter.getUrl('/pipeDelimited-query-parameters', query)
  }
  protected getRequestMethod(_request: PipeDelimitedQueryParametersRequest): _HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: PipeDelimitedQueryParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      pipeDelimitedQueryParametersResponseBodyValidator,
    )
  }
  public async run(request: PipeDelimitedQueryParametersRequest): Promise<PipeDelimitedQueryParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as PipeDelimitedQueryParametersResponse
  }
}

/**
 * Endpoint for testing header parameters with simple serialization
 */
export class SimpleHeaderParametersOperation
  implements _RunnableOperation<SimpleHeaderParametersRequest, SimpleHeaderParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: SimpleHeaderParametersRequest): string {
    return this.adapter.getUrl('/simple-header-parameters', undefined)
  }
  protected getRequestMethod(_request: SimpleHeaderParametersRequest): _HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(request: SimpleHeaderParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(
      request.headers,
      undefined,
      undefined,
      simpleHeaderParametersRequestHeadersSerializer,
    )
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      simpleHeaderParametersResponseBodyValidator,
    )
  }
  public async run(request: SimpleHeaderParametersRequest): Promise<SimpleHeaderParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as SimpleHeaderParametersResponse
  }
}

/**
 * Endpoint for testing path parameters with simple serialization
 */
export class SimplePathParametersOperation
  implements _RunnableOperation<SimplePathParametersRequest, SimplePathParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: SimplePathParametersRequest): string {
    const path = this.adapter.getPath(request.path, simplePathParametersPathSerializer)
    return this.adapter.getUrl(path, undefined)
  }
  protected getRequestMethod(_request: SimplePathParametersRequest): _HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: SimplePathParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      simplePathParametersResponseBodyValidator,
    )
  }
  public async run(request: SimplePathParametersRequest): Promise<SimplePathParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as SimplePathParametersResponse
  }
}

/**
 * Endpoint for testing response-header parameters with simple serialization
 */
export class SimpleResponseHeaderParametersOperation
  implements _RunnableOperation<SimpleResponseHeaderParametersRequest, SimpleResponseHeaderParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: SimpleResponseHeaderParametersRequest): string {
    return this.adapter.getUrl('/simple-response-header-parameters', undefined)
  }
  protected getRequestMethod(_request: SimpleResponseHeaderParametersRequest): _HttpMethod {
    return 'post'
  }
  protected getRequestBody(request: SimpleResponseHeaderParametersRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getRequestHeaders(request: SimpleResponseHeaderParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      simpleResponseHeaderParametersResponseBodyValidator,
    )
  }
  protected getResponseHeaders(response: _RawHttpResponse): _RawHttpHeaders {
    return this.adapter.getResponseHeaders(
      response,
      this.getStatusCode(response),
      simpleResponseHeaderParametersResponseHeadersDeserializer,
    )
  }
  public async run(request: SimpleResponseHeaderParametersRequest): Promise<SimpleResponseHeaderParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      body: this.getRequestBody(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      headers: this.getResponseHeaders(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as SimpleResponseHeaderParametersResponse
  }
}

/**
 * Endpoint for testing query parameters with spaceDelimited serialization
 */
export class SpaceDelimitedQueryParametersOperation
  implements _RunnableOperation<SpaceDelimitedQueryParametersRequest, SpaceDelimitedQueryParametersResponse>
{
  protected readonly adapter: _SyncClientAdapter
  public constructor(adapter: _SyncClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: SpaceDelimitedQueryParametersRequest): string {
    const query = this.adapter.getQuery(request.query, spaceDelimitedQueryParametersQuerySerializer)
    return this.adapter.getUrl('/spaceDelimited-query-parameters', query)
  }
  protected getRequestMethod(_request: SpaceDelimitedQueryParametersRequest): _HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: SpaceDelimitedQueryParametersRequest): _RawHttpHeaders {
    return this.adapter.getRequestHeaders(undefined, undefined, undefined, undefined)
  }
  protected getMimeType(response: _RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: _RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: _RawHttpResponse): any {
    return this.adapter.getResponseBody(
      response,
      this.getStatusCode(response),
      this.getMimeType(response),
      spaceDelimitedQueryParametersResponseBodyValidator,
    )
  }
  public async run(request: SpaceDelimitedQueryParametersRequest): Promise<SpaceDelimitedQueryParametersResponse> {
    const rawRequest: _RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getRequestMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as SpaceDelimitedQueryParametersResponse
  }
}
