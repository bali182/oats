/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/parameters.json (originating from oats-ts/oats-schemas)
 */

import {
  QueryDescriptorRule as _QueryDescriptorRule,
  parameters as _parameters,
  schemas as _schemas,
} from '@oats-ts/openapi-runtime'
import {
  DeepObjectQueryParametersQueryParameters,
  FormQueryParametersQueryParameters,
  PipeDelimitedQueryParametersQueryParameters,
  SpaceDelimitedQueryParametersQueryParameters,
} from './queryTypes'
import {
  commonEnumTypeTypeValidator,
  commonObjectTypeExplTypeValidator,
  commonObjectTypeTypeValidator,
  commonOptObjectTypeExplTypeValidator,
  commonOptObjectTypeTypeValidator,
} from './typeValidators'

export const deepObjectQueryParametersQueryParameters: _QueryDescriptorRule<DeepObjectQueryParametersQueryParameters> =
  {
    parameters: {
      objExpl: _parameters.query.deepObject.exploded.required.object({
        objExplStrField: _parameters.value.string(),
        objExplNumField: _parameters.value.number(),
        objExplBoolField: _parameters.value.boolean(),
        objExplEnmField: _parameters.value.string(),
        objExplOptStrField: _parameters.value.optional(_parameters.value.string()),
        objExplOptNumField: _parameters.value.optional(_parameters.value.number()),
        objExplOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
        objExplOptEnmField: _parameters.value.optional(_parameters.value.string()),
      }),
      optObjExpl: _parameters.query.deepObject.exploded.object({
        optObjExplStrField: _parameters.value.string(),
        optObjExplNumField: _parameters.value.number(),
        optObjExplBoolField: _parameters.value.boolean(),
        optObjExplEnmField: _parameters.value.string(),
        optObjExplOptStrField: _parameters.value.optional(_parameters.value.string()),
        optObjExplOptNumField: _parameters.value.optional(_parameters.value.number()),
        optObjExplOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
        optObjExplOptEnmField: _parameters.value.optional(_parameters.value.string()),
      }),
    },
    schema: _schemas.object(
      _schemas.shape({
        objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
        optObjExpl: _schemas.optional(_schemas.lazy(() => commonOptObjectTypeExplTypeValidator)),
      }),
    ),
  }

export const formQueryParametersQueryParameters: _QueryDescriptorRule<FormQueryParametersQueryParameters> = {
  parameters: {
    strExpl: _parameters.query.form.exploded.required.primitive(_parameters.value.string()),
    optStrExpl: _parameters.query.form.exploded.primitive(_parameters.value.string()),
    str: _parameters.query.form.required.primitive(_parameters.value.string()),
    optStr: _parameters.query.form.primitive(_parameters.value.string()),
    numExpl: _parameters.query.form.exploded.required.primitive(_parameters.value.number()),
    optNumExpl: _parameters.query.form.exploded.primitive(_parameters.value.number()),
    num: _parameters.query.form.required.primitive(_parameters.value.number()),
    optNum: _parameters.query.form.primitive(_parameters.value.number()),
    boolExpl: _parameters.query.form.exploded.required.primitive(_parameters.value.boolean()),
    optBoolExpl: _parameters.query.form.exploded.primitive(_parameters.value.boolean()),
    bool: _parameters.query.form.required.primitive(_parameters.value.boolean()),
    optBool: _parameters.query.form.primitive(_parameters.value.boolean()),
    enmExpl: _parameters.query.form.exploded.required.primitive(_parameters.value.string()),
    optEnmExpl: _parameters.query.form.exploded.primitive(_parameters.value.string()),
    enm: _parameters.query.form.required.primitive(_parameters.value.string()),
    optEnm: _parameters.query.form.primitive(_parameters.value.string()),
    strArrExpl: _parameters.query.form.exploded.required.array(_parameters.value.string()),
    optStrArrExpl: _parameters.query.form.exploded.array(_parameters.value.string()),
    strArr: _parameters.query.form.required.array(_parameters.value.string()),
    optStrArr: _parameters.query.form.array(_parameters.value.string()),
    numArrExpl: _parameters.query.form.exploded.required.array(_parameters.value.number()),
    optNumArrExpl: _parameters.query.form.exploded.array(_parameters.value.number()),
    numArr: _parameters.query.form.required.array(_parameters.value.number()),
    optNumArr: _parameters.query.form.array(_parameters.value.number()),
    boolArrExpl: _parameters.query.form.exploded.required.array(_parameters.value.boolean()),
    optBoolArrExpl: _parameters.query.form.exploded.array(_parameters.value.boolean()),
    boolArr: _parameters.query.form.required.array(_parameters.value.boolean()),
    optBoolArr: _parameters.query.form.array(_parameters.value.boolean()),
    enmArrExpl: _parameters.query.form.exploded.required.array(_parameters.value.string()),
    optEnmArrExpl: _parameters.query.form.exploded.array(_parameters.value.string()),
    enmArr: _parameters.query.form.required.array(_parameters.value.string()),
    optEnmArr: _parameters.query.form.array(_parameters.value.string()),
    objExpl: _parameters.query.form.exploded.required.object({
      objExplStrField: _parameters.value.string(),
      objExplNumField: _parameters.value.number(),
      objExplBoolField: _parameters.value.boolean(),
      objExplEnmField: _parameters.value.string(),
      objExplOptStrField: _parameters.value.optional(_parameters.value.string()),
      objExplOptNumField: _parameters.value.optional(_parameters.value.number()),
      objExplOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      objExplOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
    optObjExpl: _parameters.query.form.exploded.object({
      optObjExplStrField: _parameters.value.string(),
      optObjExplNumField: _parameters.value.number(),
      optObjExplBoolField: _parameters.value.boolean(),
      optObjExplEnmField: _parameters.value.string(),
      optObjExplOptStrField: _parameters.value.optional(_parameters.value.string()),
      optObjExplOptNumField: _parameters.value.optional(_parameters.value.number()),
      optObjExplOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      optObjExplOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
    obj: _parameters.query.form.required.object({
      objStrField: _parameters.value.string(),
      objNumField: _parameters.value.number(),
      objBoolField: _parameters.value.boolean(),
      objEnmField: _parameters.value.string(),
      objOptStrField: _parameters.value.optional(_parameters.value.string()),
      objOptNumField: _parameters.value.optional(_parameters.value.number()),
      objOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      objOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
    optObj: _parameters.query.form.object({
      optObjStrField: _parameters.value.string(),
      optObjNumField: _parameters.value.number(),
      optObjBoolField: _parameters.value.boolean(),
      optObjEnmField: _parameters.value.string(),
      optObjOptStrField: _parameters.value.optional(_parameters.value.string()),
      optObjOptNumField: _parameters.value.optional(_parameters.value.number()),
      optObjOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      optObjOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
  },
  schema: _schemas.object(
    _schemas.shape({
      bool: _schemas.boolean(),
      boolArr: _schemas.array(_schemas.items(_schemas.boolean())),
      boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
      boolExpl: _schemas.boolean(),
      enm: _schemas.lazy(() => commonEnumTypeTypeValidator),
      enmArr: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
      enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
      enmExpl: _schemas.lazy(() => commonEnumTypeTypeValidator),
      num: _schemas.number(),
      numArr: _schemas.array(_schemas.items(_schemas.number())),
      numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
      numExpl: _schemas.number(),
      obj: _schemas.lazy(() => commonObjectTypeTypeValidator),
      objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
      optBool: _schemas.optional(_schemas.boolean()),
      optBoolArr: _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
      optBoolArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
      optBoolExpl: _schemas.optional(_schemas.boolean()),
      optEnm: _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
      optEnmArr: _schemas.optional(_schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator)))),
      optEnmArrExpl: _schemas.optional(
        _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
      ),
      optEnmExpl: _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
      optNum: _schemas.optional(_schemas.number()),
      optNumArr: _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
      optNumArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
      optNumExpl: _schemas.optional(_schemas.number()),
      optObj: _schemas.optional(_schemas.lazy(() => commonOptObjectTypeTypeValidator)),
      optObjExpl: _schemas.optional(_schemas.lazy(() => commonOptObjectTypeExplTypeValidator)),
      optStr: _schemas.optional(_schemas.string()),
      optStrArr: _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
      optStrArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
      optStrExpl: _schemas.optional(_schemas.string()),
      str: _schemas.string(),
      strArr: _schemas.array(_schemas.items(_schemas.string())),
      strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
      strExpl: _schemas.string(),
    }),
  ),
}

export const pipeDelimitedQueryParametersQueryParameters: _QueryDescriptorRule<PipeDelimitedQueryParametersQueryParameters> =
  {
    parameters: {
      strArrExpl: _parameters.query.pipeDelimited.exploded.required.array(_parameters.value.string()),
      optStrArrExpl: _parameters.query.pipeDelimited.exploded.array(_parameters.value.string()),
      numArrExpl: _parameters.query.pipeDelimited.exploded.required.array(_parameters.value.number()),
      optNumArrExpl: _parameters.query.pipeDelimited.exploded.array(_parameters.value.number()),
      boolArrExpl: _parameters.query.pipeDelimited.exploded.required.array(_parameters.value.boolean()),
      optBoolArrExpl: _parameters.query.pipeDelimited.exploded.array(_parameters.value.boolean()),
      enmArrExpl: _parameters.query.pipeDelimited.exploded.required.array(_parameters.value.string()),
      optEnmArrExpl: _parameters.query.pipeDelimited.exploded.array(_parameters.value.string()),
    },
    schema: _schemas.object(
      _schemas.shape({
        boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
        enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
        numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
        optBoolArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
        optEnmArrExpl: _schemas.optional(
          _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
        ),
        optNumArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
        optStrArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
        strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
      }),
    ),
  }

export const spaceDelimitedQueryParametersQueryParameters: _QueryDescriptorRule<SpaceDelimitedQueryParametersQueryParameters> =
  {
    parameters: {
      strArrExpl: _parameters.query.spaceDelimited.exploded.required.array(_parameters.value.string()),
      optStrArrExpl: _parameters.query.spaceDelimited.exploded.array(_parameters.value.string()),
      numArrExpl: _parameters.query.spaceDelimited.exploded.required.array(_parameters.value.number()),
      optNumArrExpl: _parameters.query.spaceDelimited.exploded.array(_parameters.value.number()),
      boolArrExpl: _parameters.query.spaceDelimited.exploded.required.array(_parameters.value.boolean()),
      optBoolArrExpl: _parameters.query.spaceDelimited.exploded.array(_parameters.value.boolean()),
      enmArrExpl: _parameters.query.spaceDelimited.exploded.required.array(_parameters.value.string()),
      optEnmArrExpl: _parameters.query.spaceDelimited.exploded.array(_parameters.value.string()),
    },
    schema: _schemas.object(
      _schemas.shape({
        boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
        enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
        numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
        optBoolArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
        optEnmArrExpl: _schemas.optional(
          _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
        ),
        optNumArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
        optStrArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
        strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
      }),
    ),
  }
