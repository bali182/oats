/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/parameters.json (originating from oats-ts/oats-schemas)
 */

import { ExpressToolkit as _ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { ServerAdapter as _ServerAdapter } from '@oats-ts/openapi-runtime'
import {
  IRouter as _IRouter,
  NextFunction as _NextFunction,
  Request as _Request,
  Response as _Response,
  Router as _Router,
} from 'express'
import { parametersCorsConfiguration } from './corsConfiguration'

export function createParametersCorsRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router())
    .options(
      '/simple-response-header-parameters',
      async (request: _Request, response: _Response, next: _NextFunction) => {
        const toolkit: _ExpressToolkit = { request, response, next }
        const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
        try {
          const method = adapter.getAccessControlRequestedMethod(toolkit)
          const corsConfig =
            method === undefined
              ? undefined
              : parametersCorsConfiguration?.['/simple-response-header-parameters']?.[method]
          const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
          await adapter.respond(toolkit, { headers: corsHeaders })
        } catch (error) {
          adapter.handleError(toolkit, error)
        }
      },
    )
    .options('/form-cookie-parameters', async (request: _Request, response: _Response, next: _NextFunction) => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
      try {
        const method = adapter.getAccessControlRequestedMethod(toolkit)
        const corsConfig =
          method === undefined ? undefined : parametersCorsConfiguration?.['/form-cookie-parameters']?.[method]
        const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
        await adapter.respond(toolkit, { headers: corsHeaders })
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    })
    .options('/simple-header-parameters', async (request: _Request, response: _Response, next: _NextFunction) => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
      try {
        const method = adapter.getAccessControlRequestedMethod(toolkit)
        const corsConfig =
          method === undefined ? undefined : parametersCorsConfiguration?.['/simple-header-parameters']?.[method]
        const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
        await adapter.respond(toolkit, { headers: corsHeaders })
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    })
    .options('/deepObject-query-parameters', async (request: _Request, response: _Response, next: _NextFunction) => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
      try {
        const method = adapter.getAccessControlRequestedMethod(toolkit)
        const corsConfig =
          method === undefined ? undefined : parametersCorsConfiguration?.['/deepObject-query-parameters']?.[method]
        const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
        await adapter.respond(toolkit, { headers: corsHeaders })
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    })
    .options('/pipeDelimited-query-parameters', async (request: _Request, response: _Response, next: _NextFunction) => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
      try {
        const method = adapter.getAccessControlRequestedMethod(toolkit)
        const corsConfig =
          method === undefined ? undefined : parametersCorsConfiguration?.['/pipeDelimited-query-parameters']?.[method]
        const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
        await adapter.respond(toolkit, { headers: corsHeaders })
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    })
    .options(
      '/spaceDelimited-query-parameters',
      async (request: _Request, response: _Response, next: _NextFunction) => {
        const toolkit: _ExpressToolkit = { request, response, next }
        const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
        try {
          const method = adapter.getAccessControlRequestedMethod(toolkit)
          const corsConfig =
            method === undefined
              ? undefined
              : parametersCorsConfiguration?.['/spaceDelimited-query-parameters']?.[method]
          const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
          await adapter.respond(toolkit, { headers: corsHeaders })
        } catch (error) {
          adapter.handleError(toolkit, error)
        }
      },
    )
    .options('/form-query-parameters', async (request: _Request, response: _Response, next: _NextFunction) => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
      try {
        const method = adapter.getAccessControlRequestedMethod(toolkit)
        const corsConfig =
          method === undefined ? undefined : parametersCorsConfiguration?.['/form-query-parameters']?.[method]
        const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
        await adapter.respond(toolkit, { headers: corsHeaders })
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    })
    .options(
      '/matrix-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
      async (request: _Request, response: _Response, next: _NextFunction) => {
        const toolkit: _ExpressToolkit = { request, response, next }
        const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
        try {
          const method = adapter.getAccessControlRequestedMethod(toolkit)
          const corsConfig =
            method === undefined
              ? undefined
              : parametersCorsConfiguration?.[
                  '/matrix-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}'
                ]?.[method]
          const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
          await adapter.respond(toolkit, { headers: corsHeaders })
        } catch (error) {
          adapter.handleError(toolkit, error)
        }
      },
    )
    .options(
      '/label-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
      async (request: _Request, response: _Response, next: _NextFunction) => {
        const toolkit: _ExpressToolkit = { request, response, next }
        const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
        try {
          const method = adapter.getAccessControlRequestedMethod(toolkit)
          const corsConfig =
            method === undefined
              ? undefined
              : parametersCorsConfiguration?.[
                  '/label-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}'
                ]?.[method]
          const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
          await adapter.respond(toolkit, { headers: corsHeaders })
        } catch (error) {
          adapter.handleError(toolkit, error)
        }
      },
    )
    .options(
      '/simple-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
      async (request: _Request, response: _Response, next: _NextFunction) => {
        const toolkit: _ExpressToolkit = { request, response, next }
        const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_7xzhoe']
        try {
          const method = adapter.getAccessControlRequestedMethod(toolkit)
          const corsConfig =
            method === undefined
              ? undefined
              : parametersCorsConfiguration?.[
                  '/simple-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}'
                ]?.[method]
          const corsHeaders = await adapter.getPreflightCorsHeaders(toolkit, method, corsConfig)
          await adapter.respond(toolkit, { headers: corsHeaders })
        } catch (error) {
          adapter.handleError(toolkit, error)
        }
      },
    )
}
