/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/parameters.json (originating from oats-ts/oats-schemas)
 */

import { schemas as _schemas } from '@oats-ts/openapi-runtime'

export const commonEnumTypeTypeValidator = _schemas.union({
  A: _schemas.literal('A'),
  B: _schemas.literal('B'),
  C: _schemas.literal('C'),
})

export const commonObjectTypeExplTypeValidator = _schemas.object(
  _schemas.shape({
    objExplBoolField: _schemas.boolean(),
    objExplEnmField: _schemas.lazy(() => commonEnumTypeTypeValidator),
    objExplNumField: _schemas.number(),
    objExplOptBoolField: _schemas.optional(_schemas.boolean()),
    objExplOptEnmField: _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    objExplOptNumField: _schemas.optional(_schemas.number()),
    objExplOptStrField: _schemas.optional(_schemas.string()),
    objExplStrField: _schemas.string(),
  }),
)

export const commonObjectTypeTypeValidator = _schemas.object(
  _schemas.shape({
    objBoolField: _schemas.boolean(),
    objEnmField: _schemas.lazy(() => commonEnumTypeTypeValidator),
    objNumField: _schemas.number(),
    objOptBoolField: _schemas.optional(_schemas.boolean()),
    objOptEnmField: _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    objOptNumField: _schemas.optional(_schemas.number()),
    objOptStrField: _schemas.optional(_schemas.string()),
    objStrField: _schemas.string(),
  }),
)

export const commonOptObjectTypeExplTypeValidator = _schemas.object(
  _schemas.shape({
    optObjExplBoolField: _schemas.boolean(),
    optObjExplEnmField: _schemas.lazy(() => commonEnumTypeTypeValidator),
    optObjExplNumField: _schemas.number(),
    optObjExplOptBoolField: _schemas.optional(_schemas.boolean()),
    optObjExplOptEnmField: _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    optObjExplOptNumField: _schemas.optional(_schemas.number()),
    optObjExplOptStrField: _schemas.optional(_schemas.string()),
    optObjExplStrField: _schemas.string(),
  }),
)

export const commonOptObjectTypeTypeValidator = _schemas.object(
  _schemas.shape({
    optObjBoolField: _schemas.boolean(),
    optObjEnmField: _schemas.lazy(() => commonEnumTypeTypeValidator),
    optObjNumField: _schemas.number(),
    optObjOptBoolField: _schemas.optional(_schemas.boolean()),
    optObjOptEnmField: _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    optObjOptNumField: _schemas.optional(_schemas.number()),
    optObjOptStrField: _schemas.optional(_schemas.string()),
    optObjStrField: _schemas.string(),
  }),
)

export const deepObjectQueryParametersTypeValidator = _schemas.object(
  _schemas.shape({
    objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
    optObjExpl: _schemas.optional(_schemas.lazy(() => commonOptObjectTypeExplTypeValidator)),
  }),
)

export const formCookieParametersTypeValidator = _schemas.object(
  _schemas.shape({
    optBool: _schemas.optional(_schemas.boolean()),
    optEnm: _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    optNum: _schemas.optional(_schemas.number()),
    optStr: _schemas.optional(_schemas.string()),
  }),
)

export const formQueryParametersTypeValidator = _schemas.object(
  _schemas.shape({
    bool: _schemas.boolean(),
    boolArr: _schemas.array(_schemas.items(_schemas.boolean())),
    boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
    boolExpl: _schemas.boolean(),
    enm: _schemas.lazy(() => commonEnumTypeTypeValidator),
    enmArr: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: _schemas.lazy(() => commonEnumTypeTypeValidator),
    num: _schemas.number(),
    numArr: _schemas.array(_schemas.items(_schemas.number())),
    numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
    numExpl: _schemas.number(),
    obj: _schemas.lazy(() => commonObjectTypeTypeValidator),
    objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
    optBool: _schemas.optional(_schemas.boolean()),
    optBoolArr: _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
    optBoolArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
    optBoolExpl: _schemas.optional(_schemas.boolean()),
    optEnm: _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    optEnmArr: _schemas.optional(_schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator)))),
    optEnmArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator)))),
    optEnmExpl: _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    optNum: _schemas.optional(_schemas.number()),
    optNumArr: _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
    optNumArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
    optNumExpl: _schemas.optional(_schemas.number()),
    optObj: _schemas.optional(_schemas.lazy(() => commonOptObjectTypeTypeValidator)),
    optObjExpl: _schemas.optional(_schemas.lazy(() => commonOptObjectTypeExplTypeValidator)),
    optStr: _schemas.optional(_schemas.string()),
    optStrArr: _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
    optStrArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
    optStrExpl: _schemas.optional(_schemas.string()),
    str: _schemas.string(),
    strArr: _schemas.array(_schemas.items(_schemas.string())),
    strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
    strExpl: _schemas.string(),
  }),
)

export const labelPathParametersTypeValidator = _schemas.object(
  _schemas.shape({
    bool: _schemas.boolean(),
    boolArr: _schemas.array(_schemas.items(_schemas.boolean())),
    boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
    boolExpl: _schemas.boolean(),
    enm: _schemas.lazy(() => commonEnumTypeTypeValidator),
    enmArr: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: _schemas.lazy(() => commonEnumTypeTypeValidator),
    num: _schemas.number(),
    numArr: _schemas.array(_schemas.items(_schemas.number())),
    numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
    numExpl: _schemas.number(),
    obj: _schemas.lazy(() => commonObjectTypeTypeValidator),
    objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
    str: _schemas.string(),
    strArr: _schemas.array(_schemas.items(_schemas.string())),
    strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
    strExpl: _schemas.string(),
  }),
)

export const matrixPathParametersTypeValidator = _schemas.object(
  _schemas.shape({
    bool: _schemas.boolean(),
    boolArr: _schemas.array(_schemas.items(_schemas.boolean())),
    boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
    boolExpl: _schemas.boolean(),
    enm: _schemas.lazy(() => commonEnumTypeTypeValidator),
    enmArr: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: _schemas.lazy(() => commonEnumTypeTypeValidator),
    num: _schemas.number(),
    numArr: _schemas.array(_schemas.items(_schemas.number())),
    numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
    numExpl: _schemas.number(),
    obj: _schemas.lazy(() => commonObjectTypeTypeValidator),
    objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
    str: _schemas.string(),
    strArr: _schemas.array(_schemas.items(_schemas.string())),
    strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
    strExpl: _schemas.string(),
  }),
)

export const parameterIssueTypeValidator = _schemas.object(_schemas.shape({ message: _schemas.string() }))

export const pipeDelimitedQueryParametersTypeValidator = _schemas.object(
  _schemas.shape({
    boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
    enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
    optBoolArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
    optEnmArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator)))),
    optNumArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
    optStrArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
    strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
  }),
)

export const simpleHeaderParametersTypeValidator = _schemas.object(
  _schemas.shape({
    'X-Bool-Header': _schemas.boolean(),
    'X-BoolArr-Header': _schemas.array(_schemas.items(_schemas.boolean())),
    'X-BoolArrExpl-Header': _schemas.array(_schemas.items(_schemas.boolean())),
    'X-BoolExpl-Header': _schemas.boolean(),
    'X-Enm-Header': _schemas.lazy(() => commonEnumTypeTypeValidator),
    'X-EnmArr-Header': _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmArrExpl-Header': _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmExpl-Header': _schemas.lazy(() => commonEnumTypeTypeValidator),
    'X-Num-Header': _schemas.number(),
    'X-NumArr-Header': _schemas.array(_schemas.items(_schemas.number())),
    'X-NumArrExpl-Header': _schemas.array(_schemas.items(_schemas.number())),
    'X-NumExpl-Header': _schemas.number(),
    'X-Obj-Header': _schemas.lazy(() => commonObjectTypeTypeValidator),
    'X-ObjExpl-Header': _schemas.lazy(() => commonObjectTypeExplTypeValidator),
    'X-OptBool-Header': _schemas.optional(_schemas.boolean()),
    'X-OptBoolArr-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
    'X-OptBoolArrExpl-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
    'X-OptBoolExpl-Header': _schemas.optional(_schemas.boolean()),
    'X-OptEnm-Header': _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': _schemas.optional(
      _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    ),
    'X-OptEnmArrExpl-Header': _schemas.optional(
      _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    ),
    'X-OptEnmExpl-Header': _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    'X-OptNum-Header': _schemas.optional(_schemas.number()),
    'X-OptNumArr-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
    'X-OptNumArrExpl-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
    'X-OptNumExpl-Header': _schemas.optional(_schemas.number()),
    'X-OptObj-Header': _schemas.optional(_schemas.lazy(() => commonOptObjectTypeTypeValidator)),
    'X-OptObjExpl-Header': _schemas.optional(_schemas.lazy(() => commonOptObjectTypeExplTypeValidator)),
    'X-OptStr-Header': _schemas.optional(_schemas.string()),
    'X-OptStrArr-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
    'X-OptStrArrExpl-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
    'X-OptStrExpl-Header': _schemas.optional(_schemas.string()),
    'X-Str-Header': _schemas.string(),
    'X-StrArr-Header': _schemas.array(_schemas.items(_schemas.string())),
    'X-StrArrExpl-Header': _schemas.array(_schemas.items(_schemas.string())),
    'X-StrExpl-Header': _schemas.string(),
  }),
)

export const simplePathParametersTypeValidator = _schemas.object(
  _schemas.shape({
    bool: _schemas.boolean(),
    boolArr: _schemas.array(_schemas.items(_schemas.boolean())),
    boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
    boolExpl: _schemas.boolean(),
    enm: _schemas.lazy(() => commonEnumTypeTypeValidator),
    enmArr: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: _schemas.lazy(() => commonEnumTypeTypeValidator),
    num: _schemas.number(),
    numArr: _schemas.array(_schemas.items(_schemas.number())),
    numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
    numExpl: _schemas.number(),
    obj: _schemas.lazy(() => commonObjectTypeTypeValidator),
    objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
    str: _schemas.string(),
    strArr: _schemas.array(_schemas.items(_schemas.string())),
    strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
    strExpl: _schemas.string(),
  }),
)

export const simpleResponseHeaderParametersTypeValidator = _schemas.object(
  _schemas.shape({
    'X-Bool-Header': _schemas.boolean(),
    'X-BoolArr-Header': _schemas.array(_schemas.items(_schemas.boolean())),
    'X-BoolArrExpl-Header': _schemas.array(_schemas.items(_schemas.boolean())),
    'X-BoolExpl-Header': _schemas.boolean(),
    'X-Enm-Header': _schemas.lazy(() => commonEnumTypeTypeValidator),
    'X-EnmArr-Header': _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmArrExpl-Header': _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmExpl-Header': _schemas.lazy(() => commonEnumTypeTypeValidator),
    'X-Num-Header': _schemas.number(),
    'X-NumArr-Header': _schemas.array(_schemas.items(_schemas.number())),
    'X-NumArrExpl-Header': _schemas.array(_schemas.items(_schemas.number())),
    'X-NumExpl-Header': _schemas.number(),
    'X-Obj-Header': _schemas.lazy(() => commonObjectTypeTypeValidator),
    'X-ObjExpl-Header': _schemas.lazy(() => commonObjectTypeExplTypeValidator),
    'X-OptBool-Header': _schemas.optional(_schemas.boolean()),
    'X-OptBoolArr-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
    'X-OptBoolArrExpl-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
    'X-OptBoolExpl-Header': _schemas.optional(_schemas.boolean()),
    'X-OptEnm-Header': _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': _schemas.optional(
      _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    ),
    'X-OptEnmArrExpl-Header': _schemas.optional(
      _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    ),
    'X-OptEnmExpl-Header': _schemas.optional(_schemas.lazy(() => commonEnumTypeTypeValidator)),
    'X-OptNum-Header': _schemas.optional(_schemas.number()),
    'X-OptNumArr-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
    'X-OptNumArrExpl-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
    'X-OptNumExpl-Header': _schemas.optional(_schemas.number()),
    'X-OptObj-Header': _schemas.optional(_schemas.lazy(() => commonOptObjectTypeTypeValidator)),
    'X-OptObjExpl-Header': _schemas.optional(_schemas.lazy(() => commonOptObjectTypeExplTypeValidator)),
    'X-OptStr-Header': _schemas.optional(_schemas.string()),
    'X-OptStrArr-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
    'X-OptStrArrExpl-Header': _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
    'X-OptStrExpl-Header': _schemas.optional(_schemas.string()),
    'X-Str-Header': _schemas.string(),
    'X-StrArr-Header': _schemas.array(_schemas.items(_schemas.string())),
    'X-StrArrExpl-Header': _schemas.array(_schemas.items(_schemas.string())),
    'X-StrExpl-Header': _schemas.string(),
  }),
)

export const spaceDelimitedQueryParametersTypeValidator = _schemas.object(
  _schemas.shape({
    boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
    enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
    numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
    optBoolArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.boolean()))),
    optEnmArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator)))),
    optNumArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.number()))),
    optStrArrExpl: _schemas.optional(_schemas.array(_schemas.items(_schemas.string()))),
    strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
  }),
)
