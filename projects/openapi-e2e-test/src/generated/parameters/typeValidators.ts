/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/parameters.json
 */

import { validators } from '@oats-ts/validators'

export const commonEnumTypeTypeValidator = validators.union({
  A: validators.literal('A'),
  B: validators.literal('B'),
  C: validators.literal('C'),
})

export const commonObjectTypeExplTypeValidator = validators.object(
  validators.shape({
    objExplBoolField: validators.boolean(),
    objExplEnmField: validators.lazy(() => commonEnumTypeTypeValidator),
    objExplNumField: validators.number(),
    objExplOptBoolField: validators.optional(validators.boolean()),
    objExplOptEnmField: validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    objExplOptNumField: validators.optional(validators.number()),
    objExplOptStrField: validators.optional(validators.string()),
    objExplStrField: validators.string(),
  }),
)

export const commonObjectTypeTypeValidator = validators.object(
  validators.shape({
    objBoolField: validators.boolean(),
    objEnmField: validators.lazy(() => commonEnumTypeTypeValidator),
    objNumField: validators.number(),
    objOptBoolField: validators.optional(validators.boolean()),
    objOptEnmField: validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    objOptNumField: validators.optional(validators.number()),
    objOptStrField: validators.optional(validators.string()),
    objStrField: validators.string(),
  }),
)

export const commonOptObjectTypeExplTypeValidator = validators.object(
  validators.shape({
    optObjExplBoolField: validators.boolean(),
    optObjExplEnmField: validators.lazy(() => commonEnumTypeTypeValidator),
    optObjExplNumField: validators.number(),
    optObjExplOptBoolField: validators.optional(validators.boolean()),
    optObjExplOptEnmField: validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    optObjExplOptNumField: validators.optional(validators.number()),
    optObjExplOptStrField: validators.optional(validators.string()),
    optObjExplStrField: validators.string(),
  }),
)

export const commonOptObjectTypeTypeValidator = validators.object(
  validators.shape({
    optObjBoolField: validators.boolean(),
    optObjEnmField: validators.lazy(() => commonEnumTypeTypeValidator),
    optObjNumField: validators.number(),
    optObjOptBoolField: validators.optional(validators.boolean()),
    optObjOptEnmField: validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    optObjOptNumField: validators.optional(validators.number()),
    optObjOptStrField: validators.optional(validators.string()),
    optObjStrField: validators.string(),
  }),
)

export const deepObjectQueryParametersTypeValidator = validators.object(
  validators.shape({
    objExpl: validators.lazy(() => commonObjectTypeExplTypeValidator),
    optObjExpl: validators.optional(validators.lazy(() => commonOptObjectTypeExplTypeValidator)),
  }),
)

export const formCookieParametersTypeValidator = validators.object(
  validators.shape({
    optBool: validators.optional(validators.boolean()),
    optEnm: validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    optNum: validators.optional(validators.number()),
    optStr: validators.optional(validators.string()),
  }),
)

export const formQueryParametersTypeValidator = validators.object(
  validators.shape({
    bool: validators.boolean(),
    boolArr: validators.array(validators.items(validators.boolean())),
    boolArrExpl: validators.array(validators.items(validators.boolean())),
    boolExpl: validators.boolean(),
    enm: validators.lazy(() => commonEnumTypeTypeValidator),
    enmArr: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: validators.lazy(() => commonEnumTypeTypeValidator),
    num: validators.number(),
    numArr: validators.array(validators.items(validators.number())),
    numArrExpl: validators.array(validators.items(validators.number())),
    numExpl: validators.number(),
    obj: validators.lazy(() => commonObjectTypeTypeValidator),
    objExpl: validators.lazy(() => commonObjectTypeExplTypeValidator),
    optBool: validators.optional(validators.boolean()),
    optBoolArr: validators.optional(validators.array(validators.items(validators.boolean()))),
    optBoolArrExpl: validators.optional(validators.array(validators.items(validators.boolean()))),
    optBoolExpl: validators.optional(validators.boolean()),
    optEnm: validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    optEnmArr: validators.optional(
      validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    ),
    optEnmArrExpl: validators.optional(
      validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    ),
    optEnmExpl: validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    optNum: validators.optional(validators.number()),
    optNumArr: validators.optional(validators.array(validators.items(validators.number()))),
    optNumArrExpl: validators.optional(validators.array(validators.items(validators.number()))),
    optNumExpl: validators.optional(validators.number()),
    optObj: validators.optional(validators.lazy(() => commonOptObjectTypeTypeValidator)),
    optObjExpl: validators.optional(validators.lazy(() => commonOptObjectTypeExplTypeValidator)),
    optStr: validators.optional(validators.string()),
    optStrArr: validators.optional(validators.array(validators.items(validators.string()))),
    optStrArrExpl: validators.optional(validators.array(validators.items(validators.string()))),
    optStrExpl: validators.optional(validators.string()),
    str: validators.string(),
    strArr: validators.array(validators.items(validators.string())),
    strArrExpl: validators.array(validators.items(validators.string())),
    strExpl: validators.string(),
  }),
)

export const labelPathParametersTypeValidator = validators.object(
  validators.shape({
    bool: validators.boolean(),
    boolArr: validators.array(validators.items(validators.boolean())),
    boolArrExpl: validators.array(validators.items(validators.boolean())),
    boolExpl: validators.boolean(),
    enm: validators.lazy(() => commonEnumTypeTypeValidator),
    enmArr: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: validators.lazy(() => commonEnumTypeTypeValidator),
    num: validators.number(),
    numArr: validators.array(validators.items(validators.number())),
    numArrExpl: validators.array(validators.items(validators.number())),
    numExpl: validators.number(),
    obj: validators.lazy(() => commonObjectTypeTypeValidator),
    objExpl: validators.lazy(() => commonObjectTypeExplTypeValidator),
    str: validators.string(),
    strArr: validators.array(validators.items(validators.string())),
    strArrExpl: validators.array(validators.items(validators.string())),
    strExpl: validators.string(),
  }),
)

export const matrixPathParametersTypeValidator = validators.object(
  validators.shape({
    bool: validators.boolean(),
    boolArr: validators.array(validators.items(validators.boolean())),
    boolArrExpl: validators.array(validators.items(validators.boolean())),
    boolExpl: validators.boolean(),
    enm: validators.lazy(() => commonEnumTypeTypeValidator),
    enmArr: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: validators.lazy(() => commonEnumTypeTypeValidator),
    num: validators.number(),
    numArr: validators.array(validators.items(validators.number())),
    numArrExpl: validators.array(validators.items(validators.number())),
    numExpl: validators.number(),
    obj: validators.lazy(() => commonObjectTypeTypeValidator),
    objExpl: validators.lazy(() => commonObjectTypeExplTypeValidator),
    str: validators.string(),
    strArr: validators.array(validators.items(validators.string())),
    strArrExpl: validators.array(validators.items(validators.string())),
    strExpl: validators.string(),
  }),
)

export const parameterIssueTypeValidator = validators.object(validators.shape({ message: validators.string() }))

export const pipeDelimitedQueryParametersTypeValidator = validators.object(
  validators.shape({
    boolArrExpl: validators.array(validators.items(validators.boolean())),
    enmArrExpl: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    numArrExpl: validators.array(validators.items(validators.number())),
    optBoolArrExpl: validators.optional(validators.array(validators.items(validators.boolean()))),
    optEnmArrExpl: validators.optional(
      validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    ),
    optNumArrExpl: validators.optional(validators.array(validators.items(validators.number()))),
    optStrArrExpl: validators.optional(validators.array(validators.items(validators.string()))),
    strArrExpl: validators.array(validators.items(validators.string())),
  }),
)

export const simpleHeaderParametersTypeValidator = validators.object(
  validators.shape({
    'X-Bool-Header': validators.boolean(),
    'X-BoolArr-Header': validators.array(validators.items(validators.boolean())),
    'X-BoolArrExpl-Header': validators.array(validators.items(validators.boolean())),
    'X-BoolExpl-Header': validators.boolean(),
    'X-Enm-Header': validators.lazy(() => commonEnumTypeTypeValidator),
    'X-EnmArr-Header': validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmArrExpl-Header': validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmExpl-Header': validators.lazy(() => commonEnumTypeTypeValidator),
    'X-Num-Header': validators.number(),
    'X-NumArr-Header': validators.array(validators.items(validators.number())),
    'X-NumArrExpl-Header': validators.array(validators.items(validators.number())),
    'X-NumExpl-Header': validators.number(),
    'X-Obj-Header': validators.lazy(() => commonObjectTypeTypeValidator),
    'X-ObjExpl-Header': validators.lazy(() => commonObjectTypeExplTypeValidator),
    'X-OptBool-Header': validators.optional(validators.boolean()),
    'X-OptBoolArr-Header': validators.optional(validators.array(validators.items(validators.boolean()))),
    'X-OptBoolArrExpl-Header': validators.optional(validators.array(validators.items(validators.boolean()))),
    'X-OptBoolExpl-Header': validators.optional(validators.boolean()),
    'X-OptEnm-Header': validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': validators.optional(
      validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    ),
    'X-OptEnmArrExpl-Header': validators.optional(
      validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    ),
    'X-OptEnmExpl-Header': validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    'X-OptNum-Header': validators.optional(validators.number()),
    'X-OptNumArr-Header': validators.optional(validators.array(validators.items(validators.number()))),
    'X-OptNumArrExpl-Header': validators.optional(validators.array(validators.items(validators.number()))),
    'X-OptNumExpl-Header': validators.optional(validators.number()),
    'X-OptObj-Header': validators.optional(validators.lazy(() => commonOptObjectTypeTypeValidator)),
    'X-OptObjExpl-Header': validators.optional(validators.lazy(() => commonOptObjectTypeExplTypeValidator)),
    'X-OptStr-Header': validators.optional(validators.string()),
    'X-OptStrArr-Header': validators.optional(validators.array(validators.items(validators.string()))),
    'X-OptStrArrExpl-Header': validators.optional(validators.array(validators.items(validators.string()))),
    'X-OptStrExpl-Header': validators.optional(validators.string()),
    'X-Str-Header': validators.string(),
    'X-StrArr-Header': validators.array(validators.items(validators.string())),
    'X-StrArrExpl-Header': validators.array(validators.items(validators.string())),
    'X-StrExpl-Header': validators.string(),
  }),
)

export const simplePathParametersTypeValidator = validators.object(
  validators.shape({
    bool: validators.boolean(),
    boolArr: validators.array(validators.items(validators.boolean())),
    boolArrExpl: validators.array(validators.items(validators.boolean())),
    boolExpl: validators.boolean(),
    enm: validators.lazy(() => commonEnumTypeTypeValidator),
    enmArr: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: validators.lazy(() => commonEnumTypeTypeValidator),
    num: validators.number(),
    numArr: validators.array(validators.items(validators.number())),
    numArrExpl: validators.array(validators.items(validators.number())),
    numExpl: validators.number(),
    obj: validators.lazy(() => commonObjectTypeTypeValidator),
    objExpl: validators.lazy(() => commonObjectTypeExplTypeValidator),
    str: validators.string(),
    strArr: validators.array(validators.items(validators.string())),
    strArrExpl: validators.array(validators.items(validators.string())),
    strExpl: validators.string(),
  }),
)

export const simpleResponseHeaderParametersTypeValidator = validators.object(
  validators.shape({
    'X-Bool-Header': validators.boolean(),
    'X-BoolArr-Header': validators.array(validators.items(validators.boolean())),
    'X-BoolArrExpl-Header': validators.array(validators.items(validators.boolean())),
    'X-BoolExpl-Header': validators.boolean(),
    'X-Enm-Header': validators.lazy(() => commonEnumTypeTypeValidator),
    'X-EnmArr-Header': validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmArrExpl-Header': validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmExpl-Header': validators.lazy(() => commonEnumTypeTypeValidator),
    'X-Num-Header': validators.number(),
    'X-NumArr-Header': validators.array(validators.items(validators.number())),
    'X-NumArrExpl-Header': validators.array(validators.items(validators.number())),
    'X-NumExpl-Header': validators.number(),
    'X-Obj-Header': validators.lazy(() => commonObjectTypeTypeValidator),
    'X-ObjExpl-Header': validators.lazy(() => commonObjectTypeExplTypeValidator),
    'X-OptBool-Header': validators.optional(validators.boolean()),
    'X-OptBoolArr-Header': validators.optional(validators.array(validators.items(validators.boolean()))),
    'X-OptBoolArrExpl-Header': validators.optional(validators.array(validators.items(validators.boolean()))),
    'X-OptBoolExpl-Header': validators.optional(validators.boolean()),
    'X-OptEnm-Header': validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': validators.optional(
      validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    ),
    'X-OptEnmArrExpl-Header': validators.optional(
      validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    ),
    'X-OptEnmExpl-Header': validators.optional(validators.lazy(() => commonEnumTypeTypeValidator)),
    'X-OptNum-Header': validators.optional(validators.number()),
    'X-OptNumArr-Header': validators.optional(validators.array(validators.items(validators.number()))),
    'X-OptNumArrExpl-Header': validators.optional(validators.array(validators.items(validators.number()))),
    'X-OptNumExpl-Header': validators.optional(validators.number()),
    'X-OptObj-Header': validators.optional(validators.lazy(() => commonOptObjectTypeTypeValidator)),
    'X-OptObjExpl-Header': validators.optional(validators.lazy(() => commonOptObjectTypeExplTypeValidator)),
    'X-OptStr-Header': validators.optional(validators.string()),
    'X-OptStrArr-Header': validators.optional(validators.array(validators.items(validators.string()))),
    'X-OptStrArrExpl-Header': validators.optional(validators.array(validators.items(validators.string()))),
    'X-OptStrExpl-Header': validators.optional(validators.string()),
    'X-Str-Header': validators.string(),
    'X-StrArr-Header': validators.array(validators.items(validators.string())),
    'X-StrArrExpl-Header': validators.array(validators.items(validators.string())),
    'X-StrExpl-Header': validators.string(),
  }),
)

export const spaceDelimitedQueryParametersTypeValidator = validators.object(
  validators.shape({
    boolArrExpl: validators.array(validators.items(validators.boolean())),
    enmArrExpl: validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    numArrExpl: validators.array(validators.items(validators.number())),
    optBoolArrExpl: validators.optional(validators.array(validators.items(validators.boolean()))),
    optEnmArrExpl: validators.optional(
      validators.array(validators.items(validators.lazy(() => commonEnumTypeTypeValidator))),
    ),
    optNumArrExpl: validators.optional(validators.array(validators.items(validators.number()))),
    optStrArrExpl: validators.optional(validators.array(validators.items(validators.string()))),
    strArrExpl: validators.array(validators.items(validators.string())),
  }),
)
