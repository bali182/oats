/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/parameters.json
 */

import {
  array,
  boolean,
  items,
  lazy,
  literal,
  number,
  object,
  optional,
  shape,
  string,
  union,
} from '@oats-ts/validators'

export const commonEnumTypeTypeValidator = union({
  A: literal('A'),
  B: literal('B'),
  C: literal('C'),
})

export const commonObjectTypeExplTypeValidator = object(
  shape({
    objExplBoolField: boolean(),
    objExplEnmField: lazy(() => commonEnumTypeTypeValidator),
    objExplNumField: number(),
    objExplOptBoolField: optional(boolean()),
    objExplOptEnmField: optional(lazy(() => commonEnumTypeTypeValidator)),
    objExplOptNumField: optional(number()),
    objExplOptStrField: optional(string()),
    objExplStrField: string(),
  }),
)

export const commonObjectTypeTypeValidator = object(
  shape({
    objBoolField: boolean(),
    objEnmField: lazy(() => commonEnumTypeTypeValidator),
    objNumField: number(),
    objOptBoolField: optional(boolean()),
    objOptEnmField: optional(lazy(() => commonEnumTypeTypeValidator)),
    objOptNumField: optional(number()),
    objOptStrField: optional(string()),
    objStrField: string(),
  }),
)

export const commonOptObjectTypeExplTypeValidator = object(
  shape({
    optObjExplBoolField: boolean(),
    optObjExplEnmField: lazy(() => commonEnumTypeTypeValidator),
    optObjExplNumField: number(),
    optObjExplOptBoolField: optional(boolean()),
    optObjExplOptEnmField: optional(lazy(() => commonEnumTypeTypeValidator)),
    optObjExplOptNumField: optional(number()),
    optObjExplOptStrField: optional(string()),
    optObjExplStrField: string(),
  }),
)

export const commonOptObjectTypeTypeValidator = object(
  shape({
    optObjBoolField: boolean(),
    optObjEnmField: lazy(() => commonEnumTypeTypeValidator),
    optObjNumField: number(),
    optObjOptBoolField: optional(boolean()),
    optObjOptEnmField: optional(lazy(() => commonEnumTypeTypeValidator)),
    optObjOptNumField: optional(number()),
    optObjOptStrField: optional(string()),
    optObjStrField: string(),
  }),
)

export const deepObjectQueryParametersTypeValidator = object(
  shape({
    objExpl: lazy(() => commonObjectTypeExplTypeValidator),
    optObjExpl: optional(lazy(() => commonOptObjectTypeExplTypeValidator)),
  }),
)

export const formCookieParametersTypeValidator = object(
  shape({
    optBool: optional(boolean()),
    optEnm: optional(lazy(() => commonEnumTypeTypeValidator)),
    optNum: optional(number()),
    optStr: optional(string()),
  }),
)

export const formQueryParametersTypeValidator = object(
  shape({
    bool: boolean(),
    boolArr: array(items(boolean())),
    boolArrExpl: array(items(boolean())),
    boolExpl: boolean(),
    enm: lazy(() => commonEnumTypeTypeValidator),
    enmArr: array(items(lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: array(items(lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: lazy(() => commonEnumTypeTypeValidator),
    num: number(),
    numArr: array(items(number())),
    numArrExpl: array(items(number())),
    numExpl: number(),
    obj: lazy(() => commonObjectTypeTypeValidator),
    objExpl: lazy(() => commonObjectTypeExplTypeValidator),
    optBool: optional(boolean()),
    optBoolArr: optional(array(items(boolean()))),
    optBoolArrExpl: optional(array(items(boolean()))),
    optBoolExpl: optional(boolean()),
    optEnm: optional(lazy(() => commonEnumTypeTypeValidator)),
    optEnmArr: optional(array(items(lazy(() => commonEnumTypeTypeValidator)))),
    optEnmArrExpl: optional(array(items(lazy(() => commonEnumTypeTypeValidator)))),
    optEnmExpl: optional(lazy(() => commonEnumTypeTypeValidator)),
    optNum: optional(number()),
    optNumArr: optional(array(items(number()))),
    optNumArrExpl: optional(array(items(number()))),
    optNumExpl: optional(number()),
    optObj: optional(lazy(() => commonOptObjectTypeTypeValidator)),
    optObjExpl: optional(lazy(() => commonOptObjectTypeExplTypeValidator)),
    optStr: optional(string()),
    optStrArr: optional(array(items(string()))),
    optStrArrExpl: optional(array(items(string()))),
    optStrExpl: optional(string()),
    str: string(),
    strArr: array(items(string())),
    strArrExpl: array(items(string())),
    strExpl: string(),
  }),
)

export const labelPathParametersTypeValidator = object(
  shape({
    bool: boolean(),
    boolArr: array(items(boolean())),
    boolArrExpl: array(items(boolean())),
    boolExpl: boolean(),
    enm: lazy(() => commonEnumTypeTypeValidator),
    enmArr: array(items(lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: array(items(lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: lazy(() => commonEnumTypeTypeValidator),
    num: number(),
    numArr: array(items(number())),
    numArrExpl: array(items(number())),
    numExpl: number(),
    obj: lazy(() => commonObjectTypeTypeValidator),
    objExpl: lazy(() => commonObjectTypeExplTypeValidator),
    str: string(),
    strArr: array(items(string())),
    strArrExpl: array(items(string())),
    strExpl: string(),
  }),
)

export const matrixPathParametersTypeValidator = object(
  shape({
    bool: boolean(),
    boolArr: array(items(boolean())),
    boolArrExpl: array(items(boolean())),
    boolExpl: boolean(),
    enm: lazy(() => commonEnumTypeTypeValidator),
    enmArr: array(items(lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: array(items(lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: lazy(() => commonEnumTypeTypeValidator),
    num: number(),
    numArr: array(items(number())),
    numArrExpl: array(items(number())),
    numExpl: number(),
    obj: lazy(() => commonObjectTypeTypeValidator),
    objExpl: lazy(() => commonObjectTypeExplTypeValidator),
    str: string(),
    strArr: array(items(string())),
    strArrExpl: array(items(string())),
    strExpl: string(),
  }),
)

export const parameterIssueTypeValidator = object(shape({ message: string() }))

export const pipeDelimitedQueryParametersTypeValidator = object(
  shape({
    boolArrExpl: array(items(boolean())),
    enmArrExpl: array(items(lazy(() => commonEnumTypeTypeValidator))),
    numArrExpl: array(items(number())),
    optBoolArrExpl: optional(array(items(boolean()))),
    optEnmArrExpl: optional(array(items(lazy(() => commonEnumTypeTypeValidator)))),
    optNumArrExpl: optional(array(items(number()))),
    optStrArrExpl: optional(array(items(string()))),
    strArrExpl: array(items(string())),
  }),
)

export const simpleHeaderParametersTypeValidator = object(
  shape({
    'X-Bool-Header': boolean(),
    'X-BoolArr-Header': array(items(boolean())),
    'X-BoolArrExpl-Header': array(items(boolean())),
    'X-BoolExpl-Header': boolean(),
    'X-Enm-Header': lazy(() => commonEnumTypeTypeValidator),
    'X-EnmArr-Header': array(items(lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmArrExpl-Header': array(items(lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmExpl-Header': lazy(() => commonEnumTypeTypeValidator),
    'X-Num-Header': number(),
    'X-NumArr-Header': array(items(number())),
    'X-NumArrExpl-Header': array(items(number())),
    'X-NumExpl-Header': number(),
    'X-Obj-Header': lazy(() => commonObjectTypeTypeValidator),
    'X-ObjExpl-Header': lazy(() => commonObjectTypeExplTypeValidator),
    'X-OptBool-Header': optional(boolean()),
    'X-OptBoolArr-Header': optional(array(items(boolean()))),
    'X-OptBoolArrExpl-Header': optional(array(items(boolean()))),
    'X-OptBoolExpl-Header': optional(boolean()),
    'X-OptEnm-Header': optional(lazy(() => commonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': optional(array(items(lazy(() => commonEnumTypeTypeValidator)))),
    'X-OptEnmArrExpl-Header': optional(array(items(lazy(() => commonEnumTypeTypeValidator)))),
    'X-OptEnmExpl-Header': optional(lazy(() => commonEnumTypeTypeValidator)),
    'X-OptNum-Header': optional(number()),
    'X-OptNumArr-Header': optional(array(items(number()))),
    'X-OptNumArrExpl-Header': optional(array(items(number()))),
    'X-OptNumExpl-Header': optional(number()),
    'X-OptObj-Header': optional(lazy(() => commonOptObjectTypeTypeValidator)),
    'X-OptObjExpl-Header': optional(lazy(() => commonOptObjectTypeExplTypeValidator)),
    'X-OptStr-Header': optional(string()),
    'X-OptStrArr-Header': optional(array(items(string()))),
    'X-OptStrArrExpl-Header': optional(array(items(string()))),
    'X-OptStrExpl-Header': optional(string()),
    'X-Str-Header': string(),
    'X-StrArr-Header': array(items(string())),
    'X-StrArrExpl-Header': array(items(string())),
    'X-StrExpl-Header': string(),
  }),
)

export const simplePathParametersTypeValidator = object(
  shape({
    bool: boolean(),
    boolArr: array(items(boolean())),
    boolArrExpl: array(items(boolean())),
    boolExpl: boolean(),
    enm: lazy(() => commonEnumTypeTypeValidator),
    enmArr: array(items(lazy(() => commonEnumTypeTypeValidator))),
    enmArrExpl: array(items(lazy(() => commonEnumTypeTypeValidator))),
    enmExpl: lazy(() => commonEnumTypeTypeValidator),
    num: number(),
    numArr: array(items(number())),
    numArrExpl: array(items(number())),
    numExpl: number(),
    obj: lazy(() => commonObjectTypeTypeValidator),
    objExpl: lazy(() => commonObjectTypeExplTypeValidator),
    str: string(),
    strArr: array(items(string())),
    strArrExpl: array(items(string())),
    strExpl: string(),
  }),
)

export const simpleResponseHeaderParametersTypeValidator = object(
  shape({
    'X-Bool-Header': boolean(),
    'X-BoolArr-Header': array(items(boolean())),
    'X-BoolArrExpl-Header': array(items(boolean())),
    'X-BoolExpl-Header': boolean(),
    'X-Enm-Header': lazy(() => commonEnumTypeTypeValidator),
    'X-EnmArr-Header': array(items(lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmArrExpl-Header': array(items(lazy(() => commonEnumTypeTypeValidator))),
    'X-EnmExpl-Header': lazy(() => commonEnumTypeTypeValidator),
    'X-Num-Header': number(),
    'X-NumArr-Header': array(items(number())),
    'X-NumArrExpl-Header': array(items(number())),
    'X-NumExpl-Header': number(),
    'X-Obj-Header': lazy(() => commonObjectTypeTypeValidator),
    'X-ObjExpl-Header': lazy(() => commonObjectTypeExplTypeValidator),
    'X-OptBool-Header': optional(boolean()),
    'X-OptBoolArr-Header': optional(array(items(boolean()))),
    'X-OptBoolArrExpl-Header': optional(array(items(boolean()))),
    'X-OptBoolExpl-Header': optional(boolean()),
    'X-OptEnm-Header': optional(lazy(() => commonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': optional(array(items(lazy(() => commonEnumTypeTypeValidator)))),
    'X-OptEnmArrExpl-Header': optional(array(items(lazy(() => commonEnumTypeTypeValidator)))),
    'X-OptEnmExpl-Header': optional(lazy(() => commonEnumTypeTypeValidator)),
    'X-OptNum-Header': optional(number()),
    'X-OptNumArr-Header': optional(array(items(number()))),
    'X-OptNumArrExpl-Header': optional(array(items(number()))),
    'X-OptNumExpl-Header': optional(number()),
    'X-OptObj-Header': optional(lazy(() => commonOptObjectTypeTypeValidator)),
    'X-OptObjExpl-Header': optional(lazy(() => commonOptObjectTypeExplTypeValidator)),
    'X-OptStr-Header': optional(string()),
    'X-OptStrArr-Header': optional(array(items(string()))),
    'X-OptStrArrExpl-Header': optional(array(items(string()))),
    'X-OptStrExpl-Header': optional(string()),
    'X-Str-Header': string(),
    'X-StrArr-Header': array(items(string())),
    'X-StrArrExpl-Header': array(items(string())),
    'X-StrExpl-Header': string(),
  }),
)

export const spaceDelimitedQueryParametersTypeValidator = object(
  shape({
    boolArrExpl: array(items(boolean())),
    enmArrExpl: array(items(lazy(() => commonEnumTypeTypeValidator))),
    numArrExpl: array(items(number())),
    optBoolArrExpl: optional(array(items(boolean()))),
    optEnmArrExpl: optional(array(items(lazy(() => commonEnumTypeTypeValidator)))),
    optNumArrExpl: optional(array(items(number()))),
    optStrArrExpl: optional(array(items(string()))),
    strArrExpl: array(items(string())),
  }),
)
