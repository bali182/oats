/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/parameters.json
 */

import { dsl as _dsl, serializers as _serializers } from '@oats-ts/openapi-runtime'
import {
  LabelPathParametersPathParameters,
  MatrixPathParametersPathParameters,
  SimplePathParametersPathParameters,
} from './pathTypes'

export const labelPathParametersPathSerializer = _serializers.createPathSerializer<LabelPathParametersPathParameters>(
  {
    strExpl: _dsl.path.label.primitive(_dsl.value.string(), { explode: true }),
    str: _dsl.path.label.primitive(_dsl.value.string(), { explode: false }),
    numExpl: _dsl.path.label.primitive(_dsl.value.number(), { explode: true }),
    num: _dsl.path.label.primitive(_dsl.value.number(), { explode: false }),
    boolExpl: _dsl.path.label.primitive(_dsl.value.boolean(), { explode: true }),
    bool: _dsl.path.label.primitive(_dsl.value.boolean(), { explode: false }),
    enmExpl: _dsl.path.label.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: true }),
    enm: _dsl.path.label.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: false }),
    strArrExpl: _dsl.path.label.array(_dsl.value.string(), { explode: true }),
    strArr: _dsl.path.label.array(_dsl.value.string(), { explode: false }),
    numArrExpl: _dsl.path.label.array(_dsl.value.number(), { explode: true }),
    numArr: _dsl.path.label.array(_dsl.value.number(), { explode: false }),
    boolArrExpl: _dsl.path.label.array(_dsl.value.boolean(), { explode: true }),
    boolArr: _dsl.path.label.array(_dsl.value.boolean(), { explode: false }),
    enmArrExpl: _dsl.path.label.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: true }),
    enmArr: _dsl.path.label.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: false }),
    objExpl: _dsl.path.label.object(
      {
        objExplStrField: _dsl.value.string(),
        objExplNumField: _dsl.value.number(),
        objExplBoolField: _dsl.value.boolean(),
        objExplEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        objExplOptStrField: _dsl.value.optional(_dsl.value.string()),
        objExplOptNumField: _dsl.value.optional(_dsl.value.number()),
        objExplOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        objExplOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: true },
    ),
    obj: _dsl.path.label.object(
      {
        objStrField: _dsl.value.string(),
        objNumField: _dsl.value.number(),
        objBoolField: _dsl.value.boolean(),
        objEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        objOptStrField: _dsl.value.optional(_dsl.value.string()),
        objOptNumField: _dsl.value.optional(_dsl.value.number()),
        objOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        objOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: false },
    ),
  },
  '/label-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}',
)

export const matrixPathParametersPathSerializer = _serializers.createPathSerializer<MatrixPathParametersPathParameters>(
  {
    strExpl: _dsl.path.matrix.primitive(_dsl.value.string(), { explode: true }),
    str: _dsl.path.matrix.primitive(_dsl.value.string(), { explode: false }),
    numExpl: _dsl.path.matrix.primitive(_dsl.value.number(), { explode: true }),
    num: _dsl.path.matrix.primitive(_dsl.value.number(), { explode: false }),
    boolExpl: _dsl.path.matrix.primitive(_dsl.value.boolean(), { explode: true }),
    bool: _dsl.path.matrix.primitive(_dsl.value.boolean(), { explode: false }),
    enmExpl: _dsl.path.matrix.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: true }),
    enm: _dsl.path.matrix.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: false }),
    strArrExpl: _dsl.path.matrix.array(_dsl.value.string(), { explode: true }),
    strArr: _dsl.path.matrix.array(_dsl.value.string(), { explode: false }),
    numArrExpl: _dsl.path.matrix.array(_dsl.value.number(), { explode: true }),
    numArr: _dsl.path.matrix.array(_dsl.value.number(), { explode: false }),
    boolArrExpl: _dsl.path.matrix.array(_dsl.value.boolean(), { explode: true }),
    boolArr: _dsl.path.matrix.array(_dsl.value.boolean(), { explode: false }),
    enmArrExpl: _dsl.path.matrix.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: true }),
    enmArr: _dsl.path.matrix.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: false }),
    objExpl: _dsl.path.matrix.object(
      {
        objExplStrField: _dsl.value.string(),
        objExplNumField: _dsl.value.number(),
        objExplBoolField: _dsl.value.boolean(),
        objExplEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        objExplOptStrField: _dsl.value.optional(_dsl.value.string()),
        objExplOptNumField: _dsl.value.optional(_dsl.value.number()),
        objExplOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        objExplOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: true },
    ),
    obj: _dsl.path.matrix.object(
      {
        objStrField: _dsl.value.string(),
        objNumField: _dsl.value.number(),
        objBoolField: _dsl.value.boolean(),
        objEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        objOptStrField: _dsl.value.optional(_dsl.value.string()),
        objOptNumField: _dsl.value.optional(_dsl.value.number()),
        objOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        objOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: false },
    ),
  },
  '/matrix-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}',
)

export const simplePathParametersPathSerializer = _serializers.createPathSerializer<SimplePathParametersPathParameters>(
  {
    strExpl: _dsl.path.simple.primitive(_dsl.value.string(), { explode: true }),
    str: _dsl.path.simple.primitive(_dsl.value.string(), { explode: false }),
    numExpl: _dsl.path.simple.primitive(_dsl.value.number(), { explode: true }),
    num: _dsl.path.simple.primitive(_dsl.value.number(), { explode: false }),
    boolExpl: _dsl.path.simple.primitive(_dsl.value.boolean(), { explode: true }),
    bool: _dsl.path.simple.primitive(_dsl.value.boolean(), { explode: false }),
    enmExpl: _dsl.path.simple.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: true }),
    enm: _dsl.path.simple.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: false }),
    strArrExpl: _dsl.path.simple.array(_dsl.value.string(), { explode: true }),
    strArr: _dsl.path.simple.array(_dsl.value.string(), { explode: false }),
    numArrExpl: _dsl.path.simple.array(_dsl.value.number(), { explode: true }),
    numArr: _dsl.path.simple.array(_dsl.value.number(), { explode: false }),
    boolArrExpl: _dsl.path.simple.array(_dsl.value.boolean(), { explode: true }),
    boolArr: _dsl.path.simple.array(_dsl.value.boolean(), { explode: false }),
    enmArrExpl: _dsl.path.simple.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: true }),
    enmArr: _dsl.path.simple.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), { explode: false }),
    objExpl: _dsl.path.simple.object(
      {
        objExplStrField: _dsl.value.string(),
        objExplNumField: _dsl.value.number(),
        objExplBoolField: _dsl.value.boolean(),
        objExplEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        objExplOptStrField: _dsl.value.optional(_dsl.value.string()),
        objExplOptNumField: _dsl.value.optional(_dsl.value.number()),
        objExplOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        objExplOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: true },
    ),
    obj: _dsl.path.simple.object(
      {
        objStrField: _dsl.value.string(),
        objNumField: _dsl.value.number(),
        objBoolField: _dsl.value.boolean(),
        objEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        objOptStrField: _dsl.value.optional(_dsl.value.string()),
        objOptNumField: _dsl.value.optional(_dsl.value.number()),
        objOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        objOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: false },
    ),
  },
  '/simple-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}',
)
