/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/parameters.json
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-http'
import { NextFunction, Request, Response, Router } from 'express'
import { ParametersApi } from './apiType'
import { formCookieParametersCookieDeserializer } from './cookieDeserializers'
import {
  labelPathParametersPathDeserializer,
  matrixPathParametersPathDeserializer,
  simplePathParametersPathDeserializer,
} from './pathDeserializers'
import {
  deepObjectQueryParametersQueryDeserializer,
  formQueryParametersQueryDeserializer,
  pipeDelimitedQueryParametersQueryDeserializer,
  spaceDelimitedQueryParametersQueryDeserializer,
} from './queryDeserializers'
import { simpleResponseHeaderParametersRequestBodyValidator } from './requestBodyValidators'
import { simpleHeaderParametersRequestHeadersDeserializer } from './requestHeaderDeserializers'
import {
  DeepObjectQueryParametersServerRequest,
  FormCookieParametersServerRequest,
  FormQueryParametersServerRequest,
  LabelPathParametersServerRequest,
  MatrixPathParametersServerRequest,
  PipeDelimitedQueryParametersServerRequest,
  SimpleHeaderParametersServerRequest,
  SimplePathParametersServerRequest,
  SimpleResponseHeaderParametersServerRequest,
  SpaceDelimitedQueryParametersServerRequest,
} from './requestServerTypes'
import { simpleResponseHeaderParametersResponseHeadersSerializer } from './responseHeaderSerializers'
import { formCookieParametersSetCookieSerializer } from './setCookieSerializers'
import { SimpleResponseHeaderParameters } from './types'

export const deepObjectQueryParametersRouter: Router = Router()
  .options('/deepObject-query-parameters', async (request: Request, response: Response, next: NextFunction) => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    try {
      await adapter.respond(toolkit, {
        headers: await adapter.getPreflightCorsHeaders(toolkit, true, ['get'], { get: [] }, { get: ['content-type'] }),
      })
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })
  .get(
    '/deepObject-query-parameters',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      const api: ParametersApi = response.locals['__oats_api']
      try {
        const query = await adapter.getQueryParameters(toolkit, deepObjectQueryParametersQueryDeserializer)
        const typedRequest: DeepObjectQueryParametersServerRequest = {
          query,
        }
        const typedResponse = await api.deepObjectQueryParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            undefined,
            await adapter.getCorsHeaders(toolkit, true, ['content-type']),
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )

export const formCookieParametersRouter: Router = Router()
  .options('/form-cookie-parameters', async (request: Request, response: Response, next: NextFunction) => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    try {
      await adapter.respond(toolkit, {
        headers: await adapter.getPreflightCorsHeaders(toolkit, true, ['get'], { get: [] }, { get: ['content-type'] }),
      })
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })
  .get('/form-cookie-parameters', async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: ParametersApi = response.locals['__oats_api']
    try {
      const cookies = await adapter.getCookieParameters(toolkit, formCookieParametersCookieDeserializer)
      const typedRequest: FormCookieParametersServerRequest = {
        cookies,
      }
      const typedResponse = await api.formCookieParameters(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(
          toolkit,
          typedResponse,
          undefined,
          await adapter.getCorsHeaders(toolkit, true, ['content-type']),
        ),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, formCookieParametersSetCookieSerializer),
      }
      await adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })

export const formQueryParametersRouter: Router = Router()
  .options('/form-query-parameters', async (request: Request, response: Response, next: NextFunction) => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    try {
      await adapter.respond(toolkit, {
        headers: await adapter.getPreflightCorsHeaders(toolkit, true, ['get'], { get: [] }, { get: ['content-type'] }),
      })
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })
  .get('/form-query-parameters', async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: ParametersApi = response.locals['__oats_api']
    try {
      const query = await adapter.getQueryParameters(toolkit, formQueryParametersQueryDeserializer)
      const typedRequest: FormQueryParametersServerRequest = {
        query,
      }
      const typedResponse = await api.formQueryParameters(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(
          toolkit,
          typedResponse,
          undefined,
          await adapter.getCorsHeaders(toolkit, true, ['content-type']),
        ),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      await adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })

export const labelPathParametersRouter: Router = Router()
  .options(
    '/label-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
    async (request: Request, response: Response, next: NextFunction) => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      try {
        await adapter.respond(toolkit, {
          headers: await adapter.getPreflightCorsHeaders(
            toolkit,
            true,
            ['get'],
            { get: [] },
            { get: ['content-type'] },
          ),
        })
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
  .get(
    '/label-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      const api: ParametersApi = response.locals['__oats_api']
      try {
        const path = await adapter.getPathParameters(toolkit, labelPathParametersPathDeserializer)
        const typedRequest: LabelPathParametersServerRequest = {
          path,
        }
        const typedResponse = await api.labelPathParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            undefined,
            await adapter.getCorsHeaders(toolkit, true, ['content-type']),
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )

export const matrixPathParametersRouter: Router = Router()
  .options(
    '/matrix-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
    async (request: Request, response: Response, next: NextFunction) => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      try {
        await adapter.respond(toolkit, {
          headers: await adapter.getPreflightCorsHeaders(
            toolkit,
            true,
            ['get'],
            { get: [] },
            { get: ['content-type'] },
          ),
        })
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
  .get(
    '/matrix-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      const api: ParametersApi = response.locals['__oats_api']
      try {
        const path = await adapter.getPathParameters(toolkit, matrixPathParametersPathDeserializer)
        const typedRequest: MatrixPathParametersServerRequest = {
          path,
        }
        const typedResponse = await api.matrixPathParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            undefined,
            await adapter.getCorsHeaders(toolkit, true, ['content-type']),
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )

export const pipeDelimitedQueryParametersRouter: Router = Router()
  .options('/pipeDelimited-query-parameters', async (request: Request, response: Response, next: NextFunction) => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    try {
      await adapter.respond(toolkit, {
        headers: await adapter.getPreflightCorsHeaders(toolkit, true, ['get'], { get: [] }, { get: ['content-type'] }),
      })
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })
  .get(
    '/pipeDelimited-query-parameters',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      const api: ParametersApi = response.locals['__oats_api']
      try {
        const query = await adapter.getQueryParameters(toolkit, pipeDelimitedQueryParametersQueryDeserializer)
        const typedRequest: PipeDelimitedQueryParametersServerRequest = {
          query,
        }
        const typedResponse = await api.pipeDelimitedQueryParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            undefined,
            await adapter.getCorsHeaders(toolkit, true, ['content-type']),
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )

export const simpleHeaderParametersRouter: Router = Router()
  .options('/simple-header-parameters', async (request: Request, response: Response, next: NextFunction) => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    try {
      await adapter.respond(toolkit, {
        headers: await adapter.getPreflightCorsHeaders(
          toolkit,
          true,
          ['get'],
          {
            get: [
              'x-strexpl-header',
              'x-optstrexpl-header',
              'x-str-header',
              'x-optstr-header',
              'x-numexpl-header',
              'x-optnumexpl-header',
              'x-num-header',
              'x-optnum-header',
              'x-boolexpl-header',
              'x-optboolexpl-header',
              'x-bool-header',
              'x-optbool-header',
              'x-enmexpl-header',
              'x-optenmexpl-header',
              'x-enm-header',
              'x-optenm-header',
              'x-strarrexpl-header',
              'x-optstrarrexpl-header',
              'x-strarr-header',
              'x-optstrarr-header',
              'x-numarrexpl-header',
              'x-optnumarrexpl-header',
              'x-numarr-header',
              'x-optnumarr-header',
              'x-boolarrexpl-header',
              'x-optboolarrexpl-header',
              'x-boolarr-header',
              'x-optboolarr-header',
              'x-enmarrexpl-header',
              'x-optenmarrexpl-header',
              'x-enmarr-header',
              'x-optenmarr-header',
              'x-objexpl-header',
              'x-optobjexpl-header',
              'x-obj-header',
              'x-optobj-header',
            ],
          },
          { get: ['content-type'] },
        ),
      })
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })
  .get('/simple-header-parameters', async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: ParametersApi = response.locals['__oats_api']
    try {
      const headers = await adapter.getRequestHeaders(toolkit, simpleHeaderParametersRequestHeadersDeserializer)
      const typedRequest: SimpleHeaderParametersServerRequest = {
        headers,
      }
      const typedResponse = await api.simpleHeaderParameters(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(
          toolkit,
          typedResponse,
          undefined,
          await adapter.getCorsHeaders(toolkit, true, ['content-type']),
        ),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      await adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })

export const simplePathParametersRouter: Router = Router()
  .options(
    '/simple-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
    async (request: Request, response: Response, next: NextFunction) => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      try {
        await adapter.respond(toolkit, {
          headers: await adapter.getPreflightCorsHeaders(
            toolkit,
            true,
            ['get'],
            { get: [] },
            { get: ['content-type'] },
          ),
        })
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
  .get(
    '/simple-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      const api: ParametersApi = response.locals['__oats_api']
      try {
        const path = await adapter.getPathParameters(toolkit, simplePathParametersPathDeserializer)
        const typedRequest: SimplePathParametersServerRequest = {
          path,
        }
        const typedResponse = await api.simplePathParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            undefined,
            await adapter.getCorsHeaders(toolkit, true, ['content-type']),
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )

export const simpleResponseHeaderParametersRouter: Router = Router()
  .options('/simple-response-header-parameters', async (request: Request, response: Response, next: NextFunction) => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    try {
      await adapter.respond(toolkit, {
        headers: await adapter.getPreflightCorsHeaders(
          toolkit,
          true,
          ['post'],
          { post: ['content-type'] },
          {
            post: [
              'x-strexpl-header',
              'x-optstrexpl-header',
              'x-str-header',
              'x-optstr-header',
              'x-numexpl-header',
              'x-optnumexpl-header',
              'x-num-header',
              'x-optnum-header',
              'x-boolexpl-header',
              'x-optboolexpl-header',
              'x-bool-header',
              'x-optbool-header',
              'x-enmexpl-header',
              'x-optenmexpl-header',
              'x-enm-header',
              'x-optenm-header',
              'x-strarrexpl-header',
              'x-optstrarrexpl-header',
              'x-strarr-header',
              'x-optstrarr-header',
              'x-numarrexpl-header',
              'x-optnumarrexpl-header',
              'x-numarr-header',
              'x-optnumarr-header',
              'x-boolarrexpl-header',
              'x-optboolarrexpl-header',
              'x-boolarr-header',
              'x-optboolarr-header',
              'x-enmarrexpl-header',
              'x-optenmarrexpl-header',
              'x-enmarr-header',
              'x-optenmarr-header',
              'x-objexpl-header',
              'x-optobjexpl-header',
              'x-obj-header',
              'x-optobj-header',
              'content-type',
            ],
          },
        ),
      })
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })
  .post(
    '/simple-response-header-parameters',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      const api: ParametersApi = response.locals['__oats_api']
      try {
        const mimeType = await adapter.getMimeType<'application/json'>(toolkit)
        const body = await adapter.getRequestBody<'application/json', SimpleResponseHeaderParameters>(
          toolkit,
          true,
          mimeType,
          simpleResponseHeaderParametersRequestBodyValidator,
        )
        const typedRequest: SimpleResponseHeaderParametersServerRequest = {
          mimeType,
          body,
        }
        const typedResponse = await api.simpleResponseHeaderParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            simpleResponseHeaderParametersResponseHeadersSerializer,
            await adapter.getCorsHeaders(toolkit, true, [
              'x-strexpl-header',
              'x-optstrexpl-header',
              'x-str-header',
              'x-optstr-header',
              'x-numexpl-header',
              'x-optnumexpl-header',
              'x-num-header',
              'x-optnum-header',
              'x-boolexpl-header',
              'x-optboolexpl-header',
              'x-bool-header',
              'x-optbool-header',
              'x-enmexpl-header',
              'x-optenmexpl-header',
              'x-enm-header',
              'x-optenm-header',
              'x-strarrexpl-header',
              'x-optstrarrexpl-header',
              'x-strarr-header',
              'x-optstrarr-header',
              'x-numarrexpl-header',
              'x-optnumarrexpl-header',
              'x-numarr-header',
              'x-optnumarr-header',
              'x-boolarrexpl-header',
              'x-optboolarrexpl-header',
              'x-boolarr-header',
              'x-optboolarr-header',
              'x-enmarrexpl-header',
              'x-optenmarrexpl-header',
              'x-enmarr-header',
              'x-optenmarr-header',
              'x-objexpl-header',
              'x-optobjexpl-header',
              'x-obj-header',
              'x-optobj-header',
              'content-type',
            ]),
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )

export const spaceDelimitedQueryParametersRouter: Router = Router()
  .options('/spaceDelimited-query-parameters', async (request: Request, response: Response, next: NextFunction) => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    try {
      await adapter.respond(toolkit, {
        headers: await adapter.getPreflightCorsHeaders(toolkit, true, ['get'], { get: [] }, { get: ['content-type'] }),
      })
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  })
  .get(
    '/spaceDelimited-query-parameters',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
      const api: ParametersApi = response.locals['__oats_api']
      try {
        const query = await adapter.getQueryParameters(toolkit, spaceDelimitedQueryParametersQueryDeserializer)
        const typedRequest: SpaceDelimitedQueryParametersServerRequest = {
          query,
        }
        const typedResponse = await api.spaceDelimitedQueryParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            undefined,
            await adapter.getCorsHeaders(toolkit, true, ['content-type']),
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
