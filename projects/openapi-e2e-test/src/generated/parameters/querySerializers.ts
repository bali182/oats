/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/parameters.json
 */

import { dsl as _dsl, serializers as _serializers } from '@oats-ts/openapi-parameter-serialization'
import {
  DeepObjectQueryParametersQueryParameters,
  FormQueryParametersQueryParameters,
  PipeDelimitedQueryParametersQueryParameters,
  SpaceDelimitedQueryParametersQueryParameters,
} from './queryTypes'

export const deepObjectQueryParametersQuerySerializer =
  _serializers.createQuerySerializer<DeepObjectQueryParametersQueryParameters>({
    objExpl: _dsl.query.deepObject.object(
      {
        objExplStrField: _dsl.value.string(),
        objExplNumField: _dsl.value.number(),
        objExplBoolField: _dsl.value.boolean(),
        objExplEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        objExplOptStrField: _dsl.value.optional(_dsl.value.string()),
        objExplOptNumField: _dsl.value.optional(_dsl.value.number()),
        objExplOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        objExplOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: true, required: true },
    ),
    optObjExpl: _dsl.query.deepObject.object(
      {
        optObjExplStrField: _dsl.value.string(),
        optObjExplNumField: _dsl.value.number(),
        optObjExplBoolField: _dsl.value.boolean(),
        optObjExplEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        optObjExplOptStrField: _dsl.value.optional(_dsl.value.string()),
        optObjExplOptNumField: _dsl.value.optional(_dsl.value.number()),
        optObjExplOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        optObjExplOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: true, required: false },
    ),
  })

export const formQueryParametersQuerySerializer =
  _serializers.createQuerySerializer<FormQueryParametersQueryParameters>({
    strExpl: _dsl.query.form.primitive(_dsl.value.string(), { explode: true, required: true }),
    optStrExpl: _dsl.query.form.primitive(_dsl.value.string(), { explode: true, required: false }),
    str: _dsl.query.form.primitive(_dsl.value.string(), { explode: false, required: true }),
    optStr: _dsl.query.form.primitive(_dsl.value.string(), { explode: false, required: false }),
    numExpl: _dsl.query.form.primitive(_dsl.value.number(), { explode: true, required: true }),
    optNumExpl: _dsl.query.form.primitive(_dsl.value.number(), { explode: true, required: false }),
    num: _dsl.query.form.primitive(_dsl.value.number(), { explode: false, required: true }),
    optNum: _dsl.query.form.primitive(_dsl.value.number(), { explode: false, required: false }),
    boolExpl: _dsl.query.form.primitive(_dsl.value.boolean(), { explode: true, required: true }),
    optBoolExpl: _dsl.query.form.primitive(_dsl.value.boolean(), { explode: true, required: false }),
    bool: _dsl.query.form.primitive(_dsl.value.boolean(), { explode: false, required: true }),
    optBool: _dsl.query.form.primitive(_dsl.value.boolean(), { explode: false, required: false }),
    enmExpl: _dsl.query.form.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: true,
      required: true,
    }),
    optEnmExpl: _dsl.query.form.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: true,
      required: false,
    }),
    enm: _dsl.query.form.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: false,
      required: true,
    }),
    optEnm: _dsl.query.form.primitive(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: false,
      required: false,
    }),
    strArrExpl: _dsl.query.form.array(_dsl.value.string(), { explode: true, required: true }),
    optStrArrExpl: _dsl.query.form.array(_dsl.value.string(), { explode: true, required: false }),
    strArr: _dsl.query.form.array(_dsl.value.string(), { explode: false, required: true }),
    optStrArr: _dsl.query.form.array(_dsl.value.string(), { explode: false, required: false }),
    numArrExpl: _dsl.query.form.array(_dsl.value.number(), { explode: true, required: true }),
    optNumArrExpl: _dsl.query.form.array(_dsl.value.number(), { explode: true, required: false }),
    numArr: _dsl.query.form.array(_dsl.value.number(), { explode: false, required: true }),
    optNumArr: _dsl.query.form.array(_dsl.value.number(), { explode: false, required: false }),
    boolArrExpl: _dsl.query.form.array(_dsl.value.boolean(), { explode: true, required: true }),
    optBoolArrExpl: _dsl.query.form.array(_dsl.value.boolean(), { explode: true, required: false }),
    boolArr: _dsl.query.form.array(_dsl.value.boolean(), { explode: false, required: true }),
    optBoolArr: _dsl.query.form.array(_dsl.value.boolean(), { explode: false, required: false }),
    enmArrExpl: _dsl.query.form.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: true,
      required: true,
    }),
    optEnmArrExpl: _dsl.query.form.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: true,
      required: false,
    }),
    enmArr: _dsl.query.form.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: false,
      required: true,
    }),
    optEnmArr: _dsl.query.form.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: false,
      required: false,
    }),
    objExpl: _dsl.query.form.object(
      {
        objExplStrField: _dsl.value.string(),
        objExplNumField: _dsl.value.number(),
        objExplBoolField: _dsl.value.boolean(),
        objExplEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        objExplOptStrField: _dsl.value.optional(_dsl.value.string()),
        objExplOptNumField: _dsl.value.optional(_dsl.value.number()),
        objExplOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        objExplOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: true, required: true },
    ),
    optObjExpl: _dsl.query.form.object(
      {
        optObjExplStrField: _dsl.value.string(),
        optObjExplNumField: _dsl.value.number(),
        optObjExplBoolField: _dsl.value.boolean(),
        optObjExplEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        optObjExplOptStrField: _dsl.value.optional(_dsl.value.string()),
        optObjExplOptNumField: _dsl.value.optional(_dsl.value.number()),
        optObjExplOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        optObjExplOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: true, required: false },
    ),
    obj: _dsl.query.form.object(
      {
        objStrField: _dsl.value.string(),
        objNumField: _dsl.value.number(),
        objBoolField: _dsl.value.boolean(),
        objEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        objOptStrField: _dsl.value.optional(_dsl.value.string()),
        objOptNumField: _dsl.value.optional(_dsl.value.number()),
        objOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        objOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: false, required: true },
    ),
    optObj: _dsl.query.form.object(
      {
        optObjStrField: _dsl.value.string(),
        optObjNumField: _dsl.value.number(),
        optObjBoolField: _dsl.value.boolean(),
        optObjEnmField: _dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])),
        optObjOptStrField: _dsl.value.optional(_dsl.value.string()),
        optObjOptNumField: _dsl.value.optional(_dsl.value.number()),
        optObjOptBoolField: _dsl.value.optional(_dsl.value.boolean()),
        optObjOptEnmField: _dsl.value.optional(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C']))),
      },
      { explode: false, required: false },
    ),
  })

export const pipeDelimitedQueryParametersQuerySerializer =
  _serializers.createQuerySerializer<PipeDelimitedQueryParametersQueryParameters>({
    strArrExpl: _dsl.query.pipeDelimited.array(_dsl.value.string(), { explode: true, required: true }),
    optStrArrExpl: _dsl.query.pipeDelimited.array(_dsl.value.string(), { explode: true, required: false }),
    numArrExpl: _dsl.query.pipeDelimited.array(_dsl.value.number(), { explode: true, required: true }),
    optNumArrExpl: _dsl.query.pipeDelimited.array(_dsl.value.number(), { explode: true, required: false }),
    boolArrExpl: _dsl.query.pipeDelimited.array(_dsl.value.boolean(), { explode: true, required: true }),
    optBoolArrExpl: _dsl.query.pipeDelimited.array(_dsl.value.boolean(), { explode: true, required: false }),
    enmArrExpl: _dsl.query.pipeDelimited.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: true,
      required: true,
    }),
    optEnmArrExpl: _dsl.query.pipeDelimited.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: true,
      required: false,
    }),
  })

export const spaceDelimitedQueryParametersQuerySerializer =
  _serializers.createQuerySerializer<SpaceDelimitedQueryParametersQueryParameters>({
    strArrExpl: _dsl.query.spaceDelimited.array(_dsl.value.string(), { explode: true, required: true }),
    optStrArrExpl: _dsl.query.spaceDelimited.array(_dsl.value.string(), { explode: true, required: false }),
    numArrExpl: _dsl.query.spaceDelimited.array(_dsl.value.number(), { explode: true, required: true }),
    optNumArrExpl: _dsl.query.spaceDelimited.array(_dsl.value.number(), { explode: true, required: false }),
    boolArrExpl: _dsl.query.spaceDelimited.array(_dsl.value.boolean(), { explode: true, required: true }),
    optBoolArrExpl: _dsl.query.spaceDelimited.array(_dsl.value.boolean(), { explode: true, required: false }),
    enmArrExpl: _dsl.query.spaceDelimited.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: true,
      required: true,
    }),
    optEnmArrExpl: _dsl.query.spaceDelimited.array(_dsl.value.string(_dsl.value.enum(['A', 'B', 'C'])), {
      explode: true,
      required: false,
    }),
  })
