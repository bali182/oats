/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/parameters.json (originating from oats-ts/oats-schemas)
 */

import { ExpressToolkit as _ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse as _RawHttpResponse, ServerAdapter as _ServerAdapter } from '@oats-ts/openapi-runtime'
import {
  IRouter as _IRouter,
  NextFunction as _NextFunction,
  Request as _Request,
  Response as _Response,
  Router as _Router,
} from 'express'
import { ParametersApi } from './apiType'
import { formCookieParametersCookieParameters } from './cookieParameters'
import { FormCookieParametersCookieParameters } from './cookieTypes'
import { parametersCorsConfiguration } from './corsConfiguration'
import {
  labelPathParametersPathParameters,
  matrixPathParametersPathParameters,
  simplePathParametersPathParameters,
} from './pathParameters'
import {
  LabelPathParametersPathParameters,
  MatrixPathParametersPathParameters,
  SimplePathParametersPathParameters,
} from './pathTypes'
import {
  deepObjectQueryParametersQueryParameters,
  formQueryParametersQueryParameters,
  pipeDelimitedQueryParametersQueryParameters,
  spaceDelimitedQueryParametersQueryParameters,
} from './queryParameters'
import {
  DeepObjectQueryParametersQueryParameters,
  FormQueryParametersQueryParameters,
  PipeDelimitedQueryParametersQueryParameters,
  SpaceDelimitedQueryParametersQueryParameters,
} from './queryTypes'
import { simpleResponseHeaderParametersRequestBodyValidator } from './requestBodyValidators'
import { simpleHeaderParametersRequestHeaderParameters } from './requestHeaderParameters'
import { SimpleHeaderParametersRequestHeaderParameters } from './requestHeaderTypes'
import {
  DeepObjectQueryParametersServerRequest,
  FormCookieParametersServerRequest,
  FormQueryParametersServerRequest,
  LabelPathParametersServerRequest,
  MatrixPathParametersServerRequest,
  PipeDelimitedQueryParametersServerRequest,
  SimpleHeaderParametersServerRequest,
  SimplePathParametersServerRequest,
  SimpleResponseHeaderParametersServerRequest,
  SpaceDelimitedQueryParametersServerRequest,
} from './requestServerTypes'
import { simpleResponseHeaderParametersResponseHeaderParameters } from './responseHeaderParameters'
import { SimpleResponseHeaderParameters } from './types'

export function createDeepObjectQueryParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).get(
    '/deepObject-query-parameters',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const query = await adapter.getQueryParameters<DeepObjectQueryParametersQueryParameters>(
          toolkit,
          deepObjectQueryParametersQueryParameters,
        )
        const typedRequest: DeepObjectQueryParametersServerRequest = {
          query,
        }
        const corsConfig = parametersCorsConfiguration?.['/deepObject-query-parameters']?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.deepObjectQueryParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createFormCookieParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).get(
    '/form-cookie-parameters',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const cookies = await adapter.getCookieParameters<FormCookieParametersCookieParameters>(
          toolkit,
          formCookieParametersCookieParameters,
        )
        const typedRequest: FormCookieParametersServerRequest = {
          cookies,
        }
        const corsConfig = parametersCorsConfiguration?.['/form-cookie-parameters']?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.formCookieParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createFormQueryParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).get(
    '/form-query-parameters',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const query = await adapter.getQueryParameters<FormQueryParametersQueryParameters>(
          toolkit,
          formQueryParametersQueryParameters,
        )
        const typedRequest: FormQueryParametersServerRequest = {
          query,
        }
        const corsConfig = parametersCorsConfiguration?.['/form-query-parameters']?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.formQueryParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createLabelPathParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).get(
    '/label-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const path = await adapter.getPathParameters<LabelPathParametersPathParameters>(
          toolkit,
          labelPathParametersPathParameters,
        )
        const typedRequest: LabelPathParametersServerRequest = {
          path,
        }
        const corsConfig =
          parametersCorsConfiguration?.[
            '/label-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}'
          ]?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.labelPathParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createMatrixPathParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).get(
    '/matrix-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const path = await adapter.getPathParameters<MatrixPathParametersPathParameters>(
          toolkit,
          matrixPathParametersPathParameters,
        )
        const typedRequest: MatrixPathParametersServerRequest = {
          path,
        }
        const corsConfig =
          parametersCorsConfiguration?.[
            '/matrix-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}'
          ]?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.matrixPathParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createPipeDelimitedQueryParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).get(
    '/pipeDelimited-query-parameters',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const query = await adapter.getQueryParameters<PipeDelimitedQueryParametersQueryParameters>(
          toolkit,
          pipeDelimitedQueryParametersQueryParameters,
        )
        const typedRequest: PipeDelimitedQueryParametersServerRequest = {
          query,
        }
        const corsConfig = parametersCorsConfiguration?.['/pipeDelimited-query-parameters']?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.pipeDelimitedQueryParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createSimpleHeaderParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).get(
    '/simple-header-parameters',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const headers = await adapter.getRequestHeaders<SimpleHeaderParametersRequestHeaderParameters>(
          toolkit,
          simpleHeaderParametersRequestHeaderParameters,
        )
        const typedRequest: SimpleHeaderParametersServerRequest = {
          headers,
        }
        const corsConfig = parametersCorsConfiguration?.['/simple-header-parameters']?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.simpleHeaderParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createSimplePathParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).get(
    '/simple-path-parameters/:strExpl/:str/:numExpl/:num/:boolExpl/:bool/:enmExpl/:enm/:strArrExpl/:strArr/:numArrExpl/:numArr/:boolArrExpl/:boolArr/:enmArrExpl/:enmArr/:objExpl/:obj',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const path = await adapter.getPathParameters<SimplePathParametersPathParameters>(
          toolkit,
          simplePathParametersPathParameters,
        )
        const typedRequest: SimplePathParametersServerRequest = {
          path,
        }
        const corsConfig =
          parametersCorsConfiguration?.[
            '/simple-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}'
          ]?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.simplePathParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createSimpleResponseHeaderParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).post(
    '/simple-response-header-parameters',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const mimeType = await adapter.getMimeType<'application/json'>(toolkit)
        const body = await adapter.getRequestBody<'application/json', SimpleResponseHeaderParameters>(
          toolkit,
          true,
          mimeType,
          simpleResponseHeaderParametersRequestBodyValidator,
        )
        const typedRequest: SimpleResponseHeaderParametersServerRequest = {
          mimeType,
          body,
        }
        const corsConfig = parametersCorsConfiguration?.['/simple-response-header-parameters']?.post
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.simpleResponseHeaderParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(
            toolkit,
            typedResponse,
            simpleResponseHeaderParametersResponseHeaderParameters,
            corsHeaders,
          ),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createSpaceDelimitedQueryParametersRouter(router?: _IRouter | undefined): _IRouter {
  return (router ?? _Router()).get(
    '/spaceDelimited-query-parameters',
    async (request: _Request, response: _Response, next: _NextFunction): Promise<void> => {
      const toolkit: _ExpressToolkit = { request, response, next }
      const adapter: _ServerAdapter<_ExpressToolkit> = response.locals['__oats_adapter_15nbq9j']
      const api: ParametersApi = response.locals['__oats_api_15nbq9j']
      try {
        const query = await adapter.getQueryParameters<SpaceDelimitedQueryParametersQueryParameters>(
          toolkit,
          spaceDelimitedQueryParametersQueryParameters,
        )
        const typedRequest: SpaceDelimitedQueryParametersServerRequest = {
          query,
        }
        const corsConfig = parametersCorsConfiguration?.['/spaceDelimited-query-parameters']?.get
        const corsHeaders = await adapter.getCorsHeaders(toolkit, corsConfig)
        const typedResponse = await api.spaceDelimitedQueryParameters(typedRequest)
        const rawResponse: _RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, corsHeaders),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}
