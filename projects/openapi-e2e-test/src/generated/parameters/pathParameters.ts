/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/parameters.json (originating from oats-ts/oats-schemas)
 */

import {
  PathDescriptorRule as _PathDescriptorRule,
  parameters as _parameters,
  parsePathToMatcher as _parsePathToMatcher,
  parsePathToSegments as _parsePathToSegments,
  schemas as _schemas,
} from '@oats-ts/openapi-runtime'
import {
  LabelPathParametersPathParameters,
  MatrixPathParametersPathParameters,
  SimplePathParametersPathParameters,
} from './pathTypes'
import {
  commonEnumTypeTypeValidator,
  commonObjectTypeExplTypeValidator,
  commonObjectTypeTypeValidator,
} from './typeValidators'

export const labelPathParametersPathParameters: _PathDescriptorRule<LabelPathParametersPathParameters> = {
  parameters: {
    strExpl: _parameters.path.label.exploded.required.primitive(_parameters.value.string()),
    str: _parameters.path.label.required.primitive(_parameters.value.string()),
    numExpl: _parameters.path.label.exploded.required.primitive(_parameters.value.number()),
    num: _parameters.path.label.required.primitive(_parameters.value.number()),
    boolExpl: _parameters.path.label.exploded.required.primitive(_parameters.value.boolean()),
    bool: _parameters.path.label.required.primitive(_parameters.value.boolean()),
    enmExpl: _parameters.path.label.exploded.required.primitive(_parameters.value.string()),
    enm: _parameters.path.label.required.primitive(_parameters.value.string()),
    strArrExpl: _parameters.path.label.exploded.required.array(_parameters.value.string()),
    strArr: _parameters.path.label.required.array(_parameters.value.string()),
    numArrExpl: _parameters.path.label.exploded.required.array(_parameters.value.number()),
    numArr: _parameters.path.label.required.array(_parameters.value.number()),
    boolArrExpl: _parameters.path.label.exploded.required.array(_parameters.value.boolean()),
    boolArr: _parameters.path.label.required.array(_parameters.value.boolean()),
    enmArrExpl: _parameters.path.label.exploded.required.array(_parameters.value.string()),
    enmArr: _parameters.path.label.required.array(_parameters.value.string()),
    objExpl: _parameters.path.label.exploded.required.object({
      objExplStrField: _parameters.value.string(),
      objExplNumField: _parameters.value.number(),
      objExplBoolField: _parameters.value.boolean(),
      objExplEnmField: _parameters.value.string(),
      objExplOptStrField: _parameters.value.optional(_parameters.value.string()),
      objExplOptNumField: _parameters.value.optional(_parameters.value.number()),
      objExplOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      objExplOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
    obj: _parameters.path.label.required.object({
      objStrField: _parameters.value.string(),
      objNumField: _parameters.value.number(),
      objBoolField: _parameters.value.boolean(),
      objEnmField: _parameters.value.string(),
      objOptStrField: _parameters.value.optional(_parameters.value.string()),
      objOptNumField: _parameters.value.optional(_parameters.value.number()),
      objOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      objOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
  },
  schema: _schemas.object(
    _schemas.shape({
      bool: _schemas.boolean(),
      boolArr: _schemas.array(_schemas.items(_schemas.boolean())),
      boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
      boolExpl: _schemas.boolean(),
      enm: _schemas.lazy(() => commonEnumTypeTypeValidator),
      enmArr: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
      enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
      enmExpl: _schemas.lazy(() => commonEnumTypeTypeValidator),
      num: _schemas.number(),
      numArr: _schemas.array(_schemas.items(_schemas.number())),
      numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
      numExpl: _schemas.number(),
      obj: _schemas.lazy(() => commonObjectTypeTypeValidator),
      objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
      str: _schemas.string(),
      strArr: _schemas.array(_schemas.items(_schemas.string())),
      strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
      strExpl: _schemas.string(),
    }),
  ),
  matcher: _parsePathToMatcher(
    '/label-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}',
  ),
  pathSegments: _parsePathToSegments(
    '/label-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}',
  ),
}

export const matrixPathParametersPathParameters: _PathDescriptorRule<MatrixPathParametersPathParameters> = {
  parameters: {
    strExpl: _parameters.path.matrix.exploded.required.primitive(_parameters.value.string()),
    str: _parameters.path.matrix.required.primitive(_parameters.value.string()),
    numExpl: _parameters.path.matrix.exploded.required.primitive(_parameters.value.number()),
    num: _parameters.path.matrix.required.primitive(_parameters.value.number()),
    boolExpl: _parameters.path.matrix.exploded.required.primitive(_parameters.value.boolean()),
    bool: _parameters.path.matrix.required.primitive(_parameters.value.boolean()),
    enmExpl: _parameters.path.matrix.exploded.required.primitive(_parameters.value.string()),
    enm: _parameters.path.matrix.required.primitive(_parameters.value.string()),
    strArrExpl: _parameters.path.matrix.exploded.required.array(_parameters.value.string()),
    strArr: _parameters.path.matrix.required.array(_parameters.value.string()),
    numArrExpl: _parameters.path.matrix.exploded.required.array(_parameters.value.number()),
    numArr: _parameters.path.matrix.required.array(_parameters.value.number()),
    boolArrExpl: _parameters.path.matrix.exploded.required.array(_parameters.value.boolean()),
    boolArr: _parameters.path.matrix.required.array(_parameters.value.boolean()),
    enmArrExpl: _parameters.path.matrix.exploded.required.array(_parameters.value.string()),
    enmArr: _parameters.path.matrix.required.array(_parameters.value.string()),
    objExpl: _parameters.path.matrix.exploded.required.object({
      objExplStrField: _parameters.value.string(),
      objExplNumField: _parameters.value.number(),
      objExplBoolField: _parameters.value.boolean(),
      objExplEnmField: _parameters.value.string(),
      objExplOptStrField: _parameters.value.optional(_parameters.value.string()),
      objExplOptNumField: _parameters.value.optional(_parameters.value.number()),
      objExplOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      objExplOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
    obj: _parameters.path.matrix.required.object({
      objStrField: _parameters.value.string(),
      objNumField: _parameters.value.number(),
      objBoolField: _parameters.value.boolean(),
      objEnmField: _parameters.value.string(),
      objOptStrField: _parameters.value.optional(_parameters.value.string()),
      objOptNumField: _parameters.value.optional(_parameters.value.number()),
      objOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      objOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
  },
  schema: _schemas.object(
    _schemas.shape({
      bool: _schemas.boolean(),
      boolArr: _schemas.array(_schemas.items(_schemas.boolean())),
      boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
      boolExpl: _schemas.boolean(),
      enm: _schemas.lazy(() => commonEnumTypeTypeValidator),
      enmArr: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
      enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
      enmExpl: _schemas.lazy(() => commonEnumTypeTypeValidator),
      num: _schemas.number(),
      numArr: _schemas.array(_schemas.items(_schemas.number())),
      numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
      numExpl: _schemas.number(),
      obj: _schemas.lazy(() => commonObjectTypeTypeValidator),
      objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
      str: _schemas.string(),
      strArr: _schemas.array(_schemas.items(_schemas.string())),
      strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
      strExpl: _schemas.string(),
    }),
  ),
  matcher: _parsePathToMatcher(
    '/matrix-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}',
  ),
  pathSegments: _parsePathToSegments(
    '/matrix-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}',
  ),
}

export const simplePathParametersPathParameters: _PathDescriptorRule<SimplePathParametersPathParameters> = {
  parameters: {
    strExpl: _parameters.path.simple.exploded.required.primitive(_parameters.value.string()),
    str: _parameters.path.simple.required.primitive(_parameters.value.string()),
    numExpl: _parameters.path.simple.exploded.required.primitive(_parameters.value.number()),
    num: _parameters.path.simple.required.primitive(_parameters.value.number()),
    boolExpl: _parameters.path.simple.exploded.required.primitive(_parameters.value.boolean()),
    bool: _parameters.path.simple.required.primitive(_parameters.value.boolean()),
    enmExpl: _parameters.path.simple.exploded.required.primitive(_parameters.value.string()),
    enm: _parameters.path.simple.required.primitive(_parameters.value.string()),
    strArrExpl: _parameters.path.simple.exploded.required.array(_parameters.value.string()),
    strArr: _parameters.path.simple.required.array(_parameters.value.string()),
    numArrExpl: _parameters.path.simple.exploded.required.array(_parameters.value.number()),
    numArr: _parameters.path.simple.required.array(_parameters.value.number()),
    boolArrExpl: _parameters.path.simple.exploded.required.array(_parameters.value.boolean()),
    boolArr: _parameters.path.simple.required.array(_parameters.value.boolean()),
    enmArrExpl: _parameters.path.simple.exploded.required.array(_parameters.value.string()),
    enmArr: _parameters.path.simple.required.array(_parameters.value.string()),
    objExpl: _parameters.path.simple.exploded.required.object({
      objExplStrField: _parameters.value.string(),
      objExplNumField: _parameters.value.number(),
      objExplBoolField: _parameters.value.boolean(),
      objExplEnmField: _parameters.value.string(),
      objExplOptStrField: _parameters.value.optional(_parameters.value.string()),
      objExplOptNumField: _parameters.value.optional(_parameters.value.number()),
      objExplOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      objExplOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
    obj: _parameters.path.simple.required.object({
      objStrField: _parameters.value.string(),
      objNumField: _parameters.value.number(),
      objBoolField: _parameters.value.boolean(),
      objEnmField: _parameters.value.string(),
      objOptStrField: _parameters.value.optional(_parameters.value.string()),
      objOptNumField: _parameters.value.optional(_parameters.value.number()),
      objOptBoolField: _parameters.value.optional(_parameters.value.boolean()),
      objOptEnmField: _parameters.value.optional(_parameters.value.string()),
    }),
  },
  schema: _schemas.object(
    _schemas.shape({
      bool: _schemas.boolean(),
      boolArr: _schemas.array(_schemas.items(_schemas.boolean())),
      boolArrExpl: _schemas.array(_schemas.items(_schemas.boolean())),
      boolExpl: _schemas.boolean(),
      enm: _schemas.lazy(() => commonEnumTypeTypeValidator),
      enmArr: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
      enmArrExpl: _schemas.array(_schemas.items(_schemas.lazy(() => commonEnumTypeTypeValidator))),
      enmExpl: _schemas.lazy(() => commonEnumTypeTypeValidator),
      num: _schemas.number(),
      numArr: _schemas.array(_schemas.items(_schemas.number())),
      numArrExpl: _schemas.array(_schemas.items(_schemas.number())),
      numExpl: _schemas.number(),
      obj: _schemas.lazy(() => commonObjectTypeTypeValidator),
      objExpl: _schemas.lazy(() => commonObjectTypeExplTypeValidator),
      str: _schemas.string(),
      strArr: _schemas.array(_schemas.items(_schemas.string())),
      strArrExpl: _schemas.array(_schemas.items(_schemas.string())),
      strExpl: _schemas.string(),
    }),
  ),
  matcher: _parsePathToMatcher(
    '/simple-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}',
  ),
  pathSegments: _parsePathToSegments(
    '/simple-path-parameters/{strExpl}/{str}/{numExpl}/{num}/{boolExpl}/{bool}/{enmExpl}/{enm}/{strArrExpl}/{strArr}/{numArrExpl}/{numArr}/{boolArrExpl}/{boolArr}/{enmArrExpl}/{enmArr}/{objExpl}/{obj}',
  ),
}
