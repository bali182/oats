/*
 * This file has been generated by Oats, please don't modify it by hand!
 * 
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/types/union-type-schemas.json
 */

import { boolean, lazy, literal, number, object, shape, string, union } from '@oats-ts/validators'

export type InlineObjectUnionType =
  | {
      foo: string
    }
  | {
      bar: number
    }

export type ObjectRefLeaf1 = {
  foo: string
  type: 'ObjectRefLeaf1'
}

export type ObjectRefLeaf2 = {
  bar: string
  type: 'ObjectRefLeaf3'
}

export type ObjectRefLeaf3 = {
  foobar: string
  type: 'ObjectRefLeaf3'
}

export type ObjectRefMid = ObjectRefLeaf2 | ObjectRefLeaf3

export type ObjectRefUnionType = ObjectRefLeaf1 | ObjectRefMid

export type PrimitiveUnionType = string | number | boolean

export const inlineObjectUnionTypeTypeValidator = union({
  object0: object(shape({ foo: string() })),
  object1: object(shape({ bar: number() })),
})

export const objectRefLeaf1TypeValidator = object(
  shape({
    foo: string(),
    type: literal('ObjectRefLeaf1'),
  }),
)

export const objectRefLeaf2TypeValidator = object(
  shape({
    bar: string(),
    type: literal('ObjectRefLeaf3'),
  }),
)

export const objectRefLeaf3TypeValidator = object(
  shape({
    foobar: string(),
    type: literal('ObjectRefLeaf3'),
  }),
)

export const objectRefMidTypeValidator = union({
  ObjectRefLeaf2: lazy(() => objectRefLeaf2TypeValidator),
  ObjectRefLeaf3: lazy(() => objectRefLeaf3TypeValidator),
})

export const objectRefUnionTypeTypeValidator = union({
  ObjectRefLeaf1: lazy(() => objectRefLeaf1TypeValidator),
  ObjectRefMid: lazy(() => objectRefMidTypeValidator),
})

export const primitiveUnionTypeTypeValidator = union({
  string: string(),
  number: number(),
  boolean: boolean(),
})

export function isInlineObjectUnionType(input: any): input is InlineObjectUnionType {
  return (
    (input !== null && typeof input === 'object' && typeof input.foo === 'string') ||
    (input !== null && typeof input === 'object' && typeof input.bar === 'number')
  )
}

export function isObjectRefLeaf1(input: any): input is ObjectRefLeaf1 {
  return input !== null && typeof input === 'object' && typeof input.foo === 'string' && input.type === 'ObjectRefLeaf1'
}

export function isObjectRefLeaf2(input: any): input is ObjectRefLeaf2 {
  return input !== null && typeof input === 'object' && typeof input.bar === 'string' && input.type === 'ObjectRefLeaf3'
}

export function isObjectRefLeaf3(input: any): input is ObjectRefLeaf3 {
  return (
    input !== null && typeof input === 'object' && typeof input.foobar === 'string' && input.type === 'ObjectRefLeaf3'
  )
}

export function isObjectRefMid(input: any): input is ObjectRefMid {
  return isObjectRefLeaf2(input) || isObjectRefLeaf3(input)
}

export function isObjectRefUnionType(input: any): input is ObjectRefUnionType {
  return isObjectRefLeaf1(input) || isObjectRefMid(input)
}

export function isPrimitiveUnionType(input: any): input is PrimitiveUnionType {
  return typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean'
}
