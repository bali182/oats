/*
 * This file has been generated by Oats, please don't modify it by hand!
 * 
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/types/discriminated-union-type-schemas.json
 */

import { lazy, literal, object, optional, shape, string, union } from '@oats-ts/validators'

export type MidLevelUnionType = ObjectRefLeaf2 | ObjectRefLeaf3

export type ObjectRefLeaf1 = {
  topLevelType: 'ObjectRefLeaf1'
  foo?: string
}

export type ObjectRefLeaf2 = {
  midLevelType: 'ObjectRefLeaf1'
  topLevelType: 'MidLevelUnionType'
  bar?: string
}

export type ObjectRefLeaf3 = {
  midLevelType: 'ObjectRefLeaf3'
  topLevelType: 'MidLevelUnionType'
  foobar?: string
}

export type TopLevelUnionType = ObjectRefLeaf1 | MidLevelUnionType

export const midLevelUnionTypeTypeValidator = union({
  ObjectRefLeaf2: lazy(() => objectRefLeaf2TypeValidator),
  ObjectRefLeaf3: lazy(() => objectRefLeaf3TypeValidator),
})

export const objectRefLeaf1TypeValidator = object(
  shape({
    topLevelType: literal('ObjectRefLeaf1'),
    foo: optional(string()),
  }),
)

export const objectRefLeaf2TypeValidator = object(
  shape({
    midLevelType: literal('ObjectRefLeaf1'),
    topLevelType: literal('MidLevelUnionType'),
    bar: optional(string()),
  }),
)

export const objectRefLeaf3TypeValidator = object(
  shape({
    midLevelType: literal('ObjectRefLeaf3'),
    topLevelType: literal('MidLevelUnionType'),
    foobar: optional(string()),
  }),
)

export const topLevelUnionTypeTypeValidator = union({
  ObjectRefLeaf1: lazy(() => objectRefLeaf1TypeValidator),
  MidLevelUnionType: lazy(() => midLevelUnionTypeTypeValidator),
})

export function isMidLevelUnionType(input: any): input is MidLevelUnionType {
  return isObjectRefLeaf2(input) || isObjectRefLeaf3(input)
}

export function isObjectRefLeaf1(input: any): input is ObjectRefLeaf1 {
  return (
    input !== null &&
    typeof input === 'object' &&
    input.topLevelType === 'ObjectRefLeaf1' &&
    (input.foo === null || input.foo === undefined || typeof input.foo === 'string')
  )
}

export function isObjectRefLeaf2(input: any): input is ObjectRefLeaf2 {
  return (
    input !== null &&
    typeof input === 'object' &&
    input.midLevelType === 'ObjectRefLeaf1' &&
    input.topLevelType === 'MidLevelUnionType' &&
    (input.bar === null || input.bar === undefined || typeof input.bar === 'string')
  )
}

export function isObjectRefLeaf3(input: any): input is ObjectRefLeaf3 {
  return (
    input !== null &&
    typeof input === 'object' &&
    input.midLevelType === 'ObjectRefLeaf3' &&
    input.topLevelType === 'MidLevelUnionType' &&
    (input.foobar === null || input.foobar === undefined || typeof input.foobar === 'string')
  )
}

export function isTopLevelUnionType(input: any): input is TopLevelUnionType {
  return isObjectRefLeaf1(input) || isMidLevelUnionType(input)
}
