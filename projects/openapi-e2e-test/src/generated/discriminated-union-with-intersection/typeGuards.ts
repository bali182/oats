/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from edge-cases/discriminated-union-with-intersection.json (originating from oats-ts/oats-schemas)
 */

import {
  LeafIntersectionType,
  LeafType1,
  LeafType2,
  LeafType3,
  MidLevelIntersectionType,
  MidLevelUnionType,
  TopLevelUnionType,
} from './types'

export function isLeafIntersectionType(input: any): input is LeafIntersectionType {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.racoon === undefined || typeof input.racoon === 'string') &&
    input !== null &&
    typeof input === 'object' &&
    (input.meerkat === undefined || typeof input.meerkat === 'number') &&
    input.type === 'LeafIntersectionType'
  )
}

export function isLeafType1(input: any): input is LeafType1 {
  return input !== null && typeof input === 'object' && input.type === 'LeafType1' && typeof input.foo === 'string'
}

export function isLeafType2(input: any): input is LeafType2 {
  return input !== null && typeof input === 'object' && input.type === 'LeafType2' && typeof input.bar === 'string'
}

export function isLeafType3(input: any): input is LeafType3 {
  return input !== null && typeof input === 'object' && input.type === 'LeafType3' && typeof input.foobar === 'string'
}

export function isMidLevelIntersectionType(input: any): input is MidLevelIntersectionType {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.cat === undefined || typeof input.cat === 'string') &&
    input !== null &&
    typeof input === 'object' &&
    (input.dog === undefined || typeof input.dog === 'number') &&
    input.type === 'MidLevelIntersectionType'
  )
}

export function isMidLevelUnionType(input: any): input is MidLevelUnionType {
  return isLeafType2(input) || isLeafType3(input) || isLeafIntersectionType(input)
}

export function isTopLevelUnionType(input: any): input is TopLevelUnionType {
  return isLeafType1(input) || isMidLevelUnionType(input) || isMidLevelIntersectionType(input)
}
