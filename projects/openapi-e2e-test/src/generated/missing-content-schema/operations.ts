/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from edge-cases/missing-content-schema.json (originating from oats-ts/oats-schemas)
 */

import {
  ClientAdapter,
  HttpMethod,
  RawHttpHeaders,
  RawHttpRequest,
  RawHttpResponse,
  RunnableOperation,
} from '@oats-ts/openapi-runtime'
import { MissingRequestBodySchemaRequest } from './requestTypes'
import { missingResponseSchemaResponseBodyValidator } from './responseBodyValidators'
import { MissingRequestBodySchemaResponse, MissingResponseSchemaResponse } from './responseTypes'

export class MissingRequestBodySchemaOperation
  implements RunnableOperation<MissingRequestBodySchemaRequest, MissingRequestBodySchemaResponse>
{
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: MissingRequestBodySchemaRequest): string {
    return this.adapter.getUrl('/missing-request-body-schema', undefined)
  }
  protected getHttpMethod(_request: MissingRequestBodySchemaRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(request: MissingRequestBodySchemaRequest): RawHttpHeaders {
    return {
      ...this.adapter.getMimeTypeBasedRequestHeaders(request.mimeType),
      ...this.adapter.getAuxiliaryRequestHeaders(),
    }
  }
  protected getRequestBody(request: MissingRequestBodySchemaRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  public async run(request: MissingRequestBodySchemaRequest): Promise<MissingRequestBodySchemaResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
      body: this.getRequestBody(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      statusCode: this.getStatusCode(rawResponse),
    }
    return typedResponse as MissingRequestBodySchemaResponse
  }
}

export class MissingResponseSchemaOperation implements RunnableOperation<void, MissingResponseSchemaResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(): string {
    return this.adapter.getUrl('/missing-response-schema', undefined)
  }
  protected getHttpMethod(): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, missingResponseSchemaResponseBodyValidator)
  }
  public async run(): Promise<MissingResponseSchemaResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(),
      method: this.getHttpMethod(),
      headers: this.getRequestHeaders(),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as MissingResponseSchemaResponse
  }
}
