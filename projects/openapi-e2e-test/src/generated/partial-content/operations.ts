/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/partial-content.json (originating from oats-ts/oats-schemas)
 */

import {
  ClientAdapter,
  HttpMethod,
  RawHttpHeaders,
  RawHttpRequest,
  RawHttpResponse,
  RunnableOperation,
} from '@oats-ts/openapi-runtime'
import { OptionalRequestBodyRequest } from './requestTypes'
import { optionalRequestBodyResponseBodyValidator } from './responseBodyValidators'
import { MissingBodyResponse, OptionalRequestBodyResponse } from './responseTypes'

export class MissingBodyOperation implements RunnableOperation<void, MissingBodyResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(): string {
    return this.adapter.getUrl('/missing-body', undefined)
  }
  protected getHttpMethod(): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  public async run(): Promise<MissingBodyResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(),
      method: this.getHttpMethod(),
      headers: this.getRequestHeaders(),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      statusCode: this.getStatusCode(rawResponse),
    }
    return typedResponse as MissingBodyResponse
  }
}

export class OptionalRequestBodyOperation
  implements RunnableOperation<OptionalRequestBodyRequest, OptionalRequestBodyResponse>
{
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: OptionalRequestBodyRequest): string {
    return this.adapter.getUrl('/optional-request-body', undefined)
  }
  protected getHttpMethod(_request: OptionalRequestBodyRequest): HttpMethod {
    return 'post'
  }
  protected getRequestHeaders(request: OptionalRequestBodyRequest): RawHttpHeaders {
    return {
      ...this.adapter.getMimeTypeBasedRequestHeaders(request.mimeType),
      ...this.adapter.getAuxiliaryRequestHeaders(),
    }
  }
  protected getRequestBody(request: OptionalRequestBodyRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, optionalRequestBodyResponseBodyValidator)
  }
  public async run(request: OptionalRequestBodyRequest): Promise<OptionalRequestBodyResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
      body: this.getRequestBody(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as OptionalRequestBodyResponse
  }
}
