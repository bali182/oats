/*
 * This file has been generated by Oats, please don't modify it by hand!
 * 
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/_ref.json
 */

import { lazy, literal, object, optional, shape } from '@oats-ts/validators'

export type ObjectWithReferenceFieldsType = {
  referenceField?: ReferenceTarget
}

export type ReferenceTarget = {
  referenceTarget?: true
}

export const objectWithReferenceFieldsTypeTypeValidator = object(
  shape({ referenceField: optional(lazy(() => referenceTargetTypeValidator)) }),
)

export const referenceTargetTypeValidator = object(shape({ referenceTarget: optional(literal(true)) }))

export function isObjectWithReferenceFieldsType(input: any): input is ObjectWithReferenceFieldsType {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.referenceField === null || input.referenceField === undefined || isReferenceTarget(input.referenceField))
  )
}

export function isReferenceTarget(input: any): input is ReferenceTarget {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.referenceTarget === null || input.referenceTarget === undefined || input.referenceTarget === true)
  )
}
