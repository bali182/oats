/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/generated-schemas/bodies.json
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { ClientAdapter, RawHttpRequest, RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-http'
import { Try } from '@oats-ts/try'
import {
  array,
  boolean,
  items,
  lazy,
  literal,
  number,
  object,
  optional,
  shape,
  string,
  tuple,
  union,
} from '@oats-ts/validators'
import { NextFunction, Request, RequestHandler, Response, Router } from 'express'

export type BodiesApi = {
  str(request: StrServerRequest): Promise<StrServerResponse>
  num(request: NumServerRequest): Promise<NumServerResponse>
  enm(request: EnmServerRequest): Promise<EnmServerResponse>
  bool(request: BoolServerRequest): Promise<BoolServerResponse>
  primTuple(request: PrimTupleServerRequest): Promise<PrimTupleServerResponse>
  optPrimTuple(request: OptPrimTupleServerRequest): Promise<OptPrimTupleServerResponse>
  strArr(request: StrArrServerRequest): Promise<StrArrServerResponse>
  numArr(request: NumArrServerRequest): Promise<NumArrServerResponse>
  enmArr(request: EnmArrServerRequest): Promise<EnmArrServerResponse>
  boolArr(request: BoolArrServerRequest): Promise<BoolArrServerResponse>
  primObj(request: PrimObjServerRequest): Promise<PrimObjServerResponse>
  arrObj(request: ArrObjServerRequest): Promise<ArrObjServerResponse>
  nestedObj(request: NestedObjServerRequest): Promise<NestedObjServerResponse>
}

export const bodiesCorsMiddleware: RequestHandler = (request: Request, response: Response, next: NextFunction) => {
  response.setHeader('Access-Control-Allow-Origin', request.header('origin') ?? '*')
  response.setHeader('Access-Control-Allow-Methods', 'POST')
  response.setHeader('Access-Control-Allow-Headers', 'content-type')
  response.setHeader('Access-Control-Expose-Headers', 'content-type')
  next()
}

export const arrObjRouter: Router = Router().post(
  '/arr-obj',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', ObjectWithArrays>(
        toolkit,
        true,
        mimeType,
        arrObjRequestBodyValidator,
      )
      const typedRequest: ArrObjServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.arrObj(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const boolArrRouter: Router = Router().post(
  '/bool-arr',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', boolean[]>(
        toolkit,
        true,
        mimeType,
        boolArrRequestBodyValidator,
      )
      const typedRequest: BoolArrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.boolArr(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const boolRouter: Router = Router().post(
  '/bool',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', boolean>(
        toolkit,
        true,
        mimeType,
        boolRequestBodyValidator,
      )
      const typedRequest: BoolServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.bool(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const enmArrRouter: Router = Router().post(
  '/enm-arr',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', EnumType[]>(
        toolkit,
        true,
        mimeType,
        enmArrRequestBodyValidator,
      )
      const typedRequest: EnmArrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.enmArr(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const enmRouter: Router = Router().post(
  '/enm',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', EnumType>(
        toolkit,
        true,
        mimeType,
        enmRequestBodyValidator,
      )
      const typedRequest: EnmServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.enm(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const nestedObjRouter: Router = Router().post(
  '/nested-obj',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', ObjectWithNestedObjects>(
        toolkit,
        true,
        mimeType,
        nestedObjRequestBodyValidator,
      )
      const typedRequest: NestedObjServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.nestedObj(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const numArrRouter: Router = Router().post(
  '/num-arr',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', number[]>(
        toolkit,
        true,
        mimeType,
        numArrRequestBodyValidator,
      )
      const typedRequest: NumArrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.numArr(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const numRouter: Router = Router().post(
  '/num',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', number>(
        toolkit,
        true,
        mimeType,
        numRequestBodyValidator,
      )
      const typedRequest: NumServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.num(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const optPrimTupleRouter: Router = Router().post(
  '/opt-prim-tuple',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', PrimitiveOptionalTupleType>(
        toolkit,
        true,
        mimeType,
        optPrimTupleRequestBodyValidator,
      )
      const typedRequest: OptPrimTupleServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.optPrimTuple(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const primObjRouter: Router = Router().post(
  '/prim-obj',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', ObjectWithPrimitives>(
        toolkit,
        true,
        mimeType,
        primObjRequestBodyValidator,
      )
      const typedRequest: PrimObjServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.primObj(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const primTupleRouter: Router = Router().post(
  '/prim-tuple',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', PrimitiveTupleType>(
        toolkit,
        true,
        mimeType,
        primTupleRequestBodyValidator,
      )
      const typedRequest: PrimTupleServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.primTuple(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const strArrRouter: Router = Router().post(
  '/str-arr',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', string[]>(
        toolkit,
        true,
        mimeType,
        strArrRequestBodyValidator,
      )
      const typedRequest: StrArrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.strArr(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export const strRouter: Router = Router().post(
  '/str',
  async (request: Request, response: Response, next: NextFunction): Promise<void> => {
    const toolkit: ExpressToolkit = { request, response, next }
    const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter']
    const api: BodiesApi = response.locals['__oats_api']
    try {
      const mimeType = await adapter.getMimeType<'application/json' | 'application/yaml'>(toolkit)
      const body = await adapter.getRequestBody<'application/json' | 'application/yaml', string>(
        toolkit,
        true,
        mimeType,
        strRequestBodyValidator,
      )
      const typedRequest: StrServerRequest = {
        mimeType,
        body,
      }
      const typedResponse = await api.str(typedRequest)
      const rawResponse: RawHttpResponse = {
        headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined),
        statusCode: await adapter.getStatusCode(toolkit, typedResponse),
        body: await adapter.getResponseBody(toolkit, typedResponse),
        cookies: await adapter.getResponseCookies(toolkit, typedResponse, undefined),
      }
      return adapter.respond(toolkit, rawResponse)
    } catch (error) {
      adapter.handleError(toolkit, error)
    }
  },
)

export function createBodiesRouter(
  api: BodiesApi,
  adapter: ServerAdapter<ExpressToolkit>,
  routes: Partial<BodiesRouters> = {},
): Router {
  return Router().use(
    (_, response, next) => {
      response.locals['__oats_api'] = api
      response.locals['__oats_adapter'] = adapter
      next()
    },
    routes.strRouter ?? strRouter,
    routes.numRouter ?? numRouter,
    routes.enmRouter ?? enmRouter,
    routes.boolRouter ?? boolRouter,
    routes.primTupleRouter ?? primTupleRouter,
    routes.optPrimTupleRouter ?? optPrimTupleRouter,
    routes.strArrRouter ?? strArrRouter,
    routes.numArrRouter ?? numArrRouter,
    routes.enmArrRouter ?? enmArrRouter,
    routes.boolArrRouter ?? boolArrRouter,
    routes.primObjRouter ?? primObjRouter,
    routes.arrObjRouter ?? arrObjRouter,
    routes.nestedObjRouter ?? nestedObjRouter,
  )
}

export type BodiesRouters = {
  strRouter: Router
  numRouter: Router
  enmRouter: Router
  boolRouter: Router
  primTupleRouter: Router
  optPrimTupleRouter: Router
  strArrRouter: Router
  numArrRouter: Router
  enmArrRouter: Router
  boolArrRouter: Router
  primObjRouter: Router
  arrObjRouter: Router
  nestedObjRouter: Router
}

export async function arrObj(request: ArrObjRequest, adapter: ClientAdapter): Promise<ArrObjResponse> {
  const requestUrl = await adapter.getUrl('/arr-obj', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, arrObjResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as ArrObjResponse
}

export async function bool(request: BoolRequest, adapter: ClientAdapter): Promise<BoolResponse> {
  const requestUrl = await adapter.getUrl('/bool', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, boolResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as BoolResponse
}

export async function boolArr(request: BoolArrRequest, adapter: ClientAdapter): Promise<BoolArrResponse> {
  const requestUrl = await adapter.getUrl('/bool-arr', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, boolArrResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as BoolArrResponse
}

export async function enm(request: EnmRequest, adapter: ClientAdapter): Promise<EnmResponse> {
  const requestUrl = await adapter.getUrl('/enm', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, enmResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as EnmResponse
}

export async function enmArr(request: EnmArrRequest, adapter: ClientAdapter): Promise<EnmArrResponse> {
  const requestUrl = await adapter.getUrl('/enm-arr', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, enmArrResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as EnmArrResponse
}

export async function nestedObj(request: NestedObjRequest, adapter: ClientAdapter): Promise<NestedObjResponse> {
  const requestUrl = await adapter.getUrl('/nested-obj', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, nestedObjResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as NestedObjResponse
}

export async function num(request: NumRequest, adapter: ClientAdapter): Promise<NumResponse> {
  const requestUrl = await adapter.getUrl('/num', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, numResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as NumResponse
}

export async function numArr(request: NumArrRequest, adapter: ClientAdapter): Promise<NumArrResponse> {
  const requestUrl = await adapter.getUrl('/num-arr', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, numArrResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as NumArrResponse
}

export async function optPrimTuple(
  request: OptPrimTupleRequest,
  adapter: ClientAdapter,
): Promise<OptPrimTupleResponse> {
  const requestUrl = await adapter.getUrl('/opt-prim-tuple', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(
    rawResponse,
    statusCode,
    mimeType,
    optPrimTupleResponseBodyValidator,
  )
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as OptPrimTupleResponse
}

export async function primObj(request: PrimObjRequest, adapter: ClientAdapter): Promise<PrimObjResponse> {
  const requestUrl = await adapter.getUrl('/prim-obj', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, primObjResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as PrimObjResponse
}

export async function primTuple(request: PrimTupleRequest, adapter: ClientAdapter): Promise<PrimTupleResponse> {
  const requestUrl = await adapter.getUrl('/prim-tuple', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, primTupleResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as PrimTupleResponse
}

export async function str(request: StrRequest, adapter: ClientAdapter): Promise<StrResponse> {
  const requestUrl = await adapter.getUrl('/str', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, strResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as StrResponse
}

export async function strArr(request: StrArrRequest, adapter: ClientAdapter): Promise<StrArrResponse> {
  const requestUrl = await adapter.getUrl('/str-arr', undefined)
  const requestHeaders = await adapter.getRequestHeaders(undefined, request.mimeType, undefined, undefined)
  const requestBody = await adapter.getRequestBody(request.mimeType, request.body)
  const rawRequest: RawHttpRequest = {
    url: requestUrl,
    method: 'post',
    body: requestBody,
    headers: requestHeaders,
  }
  const rawResponse = await adapter.request(rawRequest)
  const mimeType = await adapter.getMimeType(rawResponse)
  const statusCode = await adapter.getStatusCode(rawResponse)
  const responseBody = await adapter.getResponseBody(rawResponse, statusCode, mimeType, strArrResponseBodyValidator)
  return {
    mimeType,
    statusCode,
    body: responseBody,
  } as StrArrResponse
}

export const arrObjRequestBodyValidator = {
  'application/json': lazy(() => objectWithArraysTypeValidator),
  'application/yaml': lazy(() => objectWithArraysTypeValidator),
} as const

export const boolArrRequestBodyValidator = {
  'application/json': array(items(boolean())),
  'application/yaml': array(items(boolean())),
} as const

export const boolRequestBodyValidator = { 'application/json': boolean(), 'application/yaml': boolean() } as const

export const enmArrRequestBodyValidator = {
  'application/json': array(items(lazy(() => enumTypeTypeValidator))),
  'application/yaml': array(items(lazy(() => enumTypeTypeValidator))),
} as const

export const enmRequestBodyValidator = {
  'application/json': lazy(() => enumTypeTypeValidator),
  'application/yaml': lazy(() => enumTypeTypeValidator),
} as const

export const nestedObjRequestBodyValidator = {
  'application/json': lazy(() => objectWithNestedObjectsTypeValidator),
  'application/yaml': lazy(() => objectWithNestedObjectsTypeValidator),
} as const

export const numArrRequestBodyValidator = {
  'application/json': array(items(number())),
  'application/yaml': array(items(number())),
} as const

export const numRequestBodyValidator = { 'application/json': number(), 'application/yaml': number() } as const

export const optPrimTupleRequestBodyValidator = {
  'application/json': lazy(() => primitiveOptionalTupleTypeTypeValidator),
  'application/yaml': lazy(() => primitiveOptionalTupleTypeTypeValidator),
} as const

export const primObjRequestBodyValidator = {
  'application/json': lazy(() => objectWithPrimitivesTypeValidator),
  'application/yaml': lazy(() => objectWithPrimitivesTypeValidator),
} as const

export const primTupleRequestBodyValidator = {
  'application/json': lazy(() => primitiveTupleTypeTypeValidator),
  'application/yaml': lazy(() => primitiveTupleTypeTypeValidator),
} as const

export const strArrRequestBodyValidator = {
  'application/json': array(items(string())),
  'application/yaml': array(items(string())),
} as const

export const strRequestBodyValidator = { 'application/json': string(), 'application/yaml': string() } as const

export type ArrObjServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<ObjectWithArrays>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<ObjectWithArrays>
    }

export type BoolArrServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<boolean[]>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<boolean[]>
    }

export type BoolServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<boolean>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<boolean>
    }

export type EnmArrServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<EnumType[]>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<EnumType[]>
    }

export type EnmServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<EnumType>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<EnumType>
    }

export type NestedObjServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<ObjectWithNestedObjects>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<ObjectWithNestedObjects>
    }

export type NumArrServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<number[]>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<number[]>
    }

export type NumServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<number>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<number>
    }

export type OptPrimTupleServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<PrimitiveOptionalTupleType>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<PrimitiveOptionalTupleType>
    }

export type PrimObjServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<ObjectWithPrimitives>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<ObjectWithPrimitives>
    }

export type PrimTupleServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<PrimitiveTupleType>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<PrimitiveTupleType>
    }

export type StrArrServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<string[]>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<string[]>
    }

export type StrServerRequest =
  | {
      mimeType: 'application/json'
      body: Try<string>
    }
  | {
      mimeType: 'application/yaml'
      body: Try<string>
    }

export type ArrObjRequest =
  | {
      mimeType: 'application/json'
      body: ObjectWithArrays
    }
  | {
      mimeType: 'application/yaml'
      body: ObjectWithArrays
    }

export type BoolArrRequest =
  | {
      mimeType: 'application/json'
      body: boolean[]
    }
  | {
      mimeType: 'application/yaml'
      body: boolean[]
    }

export type BoolRequest =
  | {
      mimeType: 'application/json'
      body: boolean
    }
  | {
      mimeType: 'application/yaml'
      body: boolean
    }

export type EnmArrRequest =
  | {
      mimeType: 'application/json'
      body: EnumType[]
    }
  | {
      mimeType: 'application/yaml'
      body: EnumType[]
    }

export type EnmRequest =
  | {
      mimeType: 'application/json'
      body: EnumType
    }
  | {
      mimeType: 'application/yaml'
      body: EnumType
    }

export type NestedObjRequest =
  | {
      mimeType: 'application/json'
      body: ObjectWithNestedObjects
    }
  | {
      mimeType: 'application/yaml'
      body: ObjectWithNestedObjects
    }

export type NumArrRequest =
  | {
      mimeType: 'application/json'
      body: number[]
    }
  | {
      mimeType: 'application/yaml'
      body: number[]
    }

export type NumRequest =
  | {
      mimeType: 'application/json'
      body: number
    }
  | {
      mimeType: 'application/yaml'
      body: number
    }

export type OptPrimTupleRequest =
  | {
      mimeType: 'application/json'
      body: PrimitiveOptionalTupleType
    }
  | {
      mimeType: 'application/yaml'
      body: PrimitiveOptionalTupleType
    }

export type PrimObjRequest =
  | {
      mimeType: 'application/json'
      body: ObjectWithPrimitives
    }
  | {
      mimeType: 'application/yaml'
      body: ObjectWithPrimitives
    }

export type PrimTupleRequest =
  | {
      mimeType: 'application/json'
      body: PrimitiveTupleType
    }
  | {
      mimeType: 'application/yaml'
      body: PrimitiveTupleType
    }

export type StrArrRequest =
  | {
      mimeType: 'application/json'
      body: string[]
    }
  | {
      mimeType: 'application/yaml'
      body: string[]
    }

export type StrRequest =
  | {
      mimeType: 'application/json'
      body: string
    }
  | {
      mimeType: 'application/yaml'
      body: string
    }

export const arrObjResponseBodyValidator = {
  200: {
    'application/json': lazy(() => objectWithArraysTypeValidator),
    'application/yaml': lazy(() => objectWithArraysTypeValidator),
  },
} as const

export const boolArrResponseBodyValidator = {
  200: { 'application/json': array(items(boolean())), 'application/yaml': array(items(boolean())) },
} as const

export const boolResponseBodyValidator = {
  200: { 'application/json': boolean(), 'application/yaml': boolean() },
} as const

export const enmArrResponseBodyValidator = {
  200: {
    'application/json': array(items(lazy(() => enumTypeTypeValidator))),
    'application/yaml': array(items(lazy(() => enumTypeTypeValidator))),
  },
} as const

export const enmResponseBodyValidator = {
  200: { 'application/json': lazy(() => enumTypeTypeValidator), 'application/yaml': lazy(() => enumTypeTypeValidator) },
} as const

export const nestedObjResponseBodyValidator = {
  200: {
    'application/json': lazy(() => objectWithNestedObjectsTypeValidator),
    'application/yaml': lazy(() => objectWithNestedObjectsTypeValidator),
  },
} as const

export const numArrResponseBodyValidator = {
  200: { 'application/json': array(items(number())), 'application/yaml': array(items(number())) },
} as const

export const numResponseBodyValidator = { 200: { 'application/json': number(), 'application/yaml': number() } } as const

export const optPrimTupleResponseBodyValidator = {
  200: {
    'application/json': lazy(() => primitiveOptionalTupleTypeTypeValidator),
    'application/yaml': lazy(() => primitiveOptionalTupleTypeTypeValidator),
  },
} as const

export const primObjResponseBodyValidator = {
  200: {
    'application/json': lazy(() => objectWithPrimitivesTypeValidator),
    'application/yaml': lazy(() => objectWithPrimitivesTypeValidator),
  },
} as const

export const primTupleResponseBodyValidator = {
  200: {
    'application/json': lazy(() => primitiveTupleTypeTypeValidator),
    'application/yaml': lazy(() => primitiveTupleTypeTypeValidator),
  },
} as const

export const strArrResponseBodyValidator = {
  200: { 'application/json': array(items(string())), 'application/yaml': array(items(string())) },
} as const

export const strResponseBodyValidator = { 200: { 'application/json': string(), 'application/yaml': string() } } as const

export type ArrObjServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: ObjectWithArrays
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: ObjectWithArrays
    }

export type BoolArrServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: boolean[]
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: boolean[]
    }

export type BoolServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: boolean
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: boolean
    }

export type EnmArrServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: EnumType[]
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: EnumType[]
    }

export type EnmServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: EnumType
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: EnumType
    }

export type NestedObjServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: ObjectWithNestedObjects
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: ObjectWithNestedObjects
    }

export type NumArrServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: number[]
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: number[]
    }

export type NumServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: number
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: number
    }

export type OptPrimTupleServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: PrimitiveOptionalTupleType
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: PrimitiveOptionalTupleType
    }

export type PrimObjServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: ObjectWithPrimitives
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: ObjectWithPrimitives
    }

export type PrimTupleServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: PrimitiveTupleType
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: PrimitiveTupleType
    }

export type StrArrServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: string[]
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: string[]
    }

export type StrServerResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: string
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: string
    }

export type ArrObjResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: ObjectWithArrays
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: ObjectWithArrays
    }

export type BoolArrResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: boolean[]
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: boolean[]
    }

export type BoolResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: boolean
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: boolean
    }

export type EnmArrResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: EnumType[]
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: EnumType[]
    }

export type EnmResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: EnumType
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: EnumType
    }

export type NestedObjResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: ObjectWithNestedObjects
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: ObjectWithNestedObjects
    }

export type NumArrResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: number[]
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: number[]
    }

export type NumResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: number
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: number
    }

export type OptPrimTupleResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: PrimitiveOptionalTupleType
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: PrimitiveOptionalTupleType
    }

export type PrimObjResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: ObjectWithPrimitives
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: ObjectWithPrimitives
    }

export type PrimTupleResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: PrimitiveTupleType
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: PrimitiveTupleType
    }

export type StrArrResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: string[]
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: string[]
    }

export type StrResponse =
  | {
      statusCode: 200
      mimeType: 'application/json'
      body: string
    }
  | {
      statusCode: 200
      mimeType: 'application/yaml'
      body: string
    }

export class BodiesSdkImpl implements BodiesSdk {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  public async str(request: StrRequest): Promise<StrResponse> {
    return str(request, this.adapter)
  }
  public async num(request: NumRequest): Promise<NumResponse> {
    return num(request, this.adapter)
  }
  public async enm(request: EnmRequest): Promise<EnmResponse> {
    return enm(request, this.adapter)
  }
  public async bool(request: BoolRequest): Promise<BoolResponse> {
    return bool(request, this.adapter)
  }
  public async primTuple(request: PrimTupleRequest): Promise<PrimTupleResponse> {
    return primTuple(request, this.adapter)
  }
  public async optPrimTuple(request: OptPrimTupleRequest): Promise<OptPrimTupleResponse> {
    return optPrimTuple(request, this.adapter)
  }
  public async strArr(request: StrArrRequest): Promise<StrArrResponse> {
    return strArr(request, this.adapter)
  }
  public async numArr(request: NumArrRequest): Promise<NumArrResponse> {
    return numArr(request, this.adapter)
  }
  public async enmArr(request: EnmArrRequest): Promise<EnmArrResponse> {
    return enmArr(request, this.adapter)
  }
  public async boolArr(request: BoolArrRequest): Promise<BoolArrResponse> {
    return boolArr(request, this.adapter)
  }
  public async primObj(request: PrimObjRequest): Promise<PrimObjResponse> {
    return primObj(request, this.adapter)
  }
  public async arrObj(request: ArrObjRequest): Promise<ArrObjResponse> {
    return arrObj(request, this.adapter)
  }
  public async nestedObj(request: NestedObjRequest): Promise<NestedObjResponse> {
    return nestedObj(request, this.adapter)
  }
}

export type BodiesSdk = {
  str(request: StrRequest): Promise<StrResponse>
  num(request: NumRequest): Promise<NumResponse>
  enm(request: EnmRequest): Promise<EnmResponse>
  bool(request: BoolRequest): Promise<BoolResponse>
  primTuple(request: PrimTupleRequest): Promise<PrimTupleResponse>
  optPrimTuple(request: OptPrimTupleRequest): Promise<OptPrimTupleResponse>
  strArr(request: StrArrRequest): Promise<StrArrResponse>
  numArr(request: NumArrRequest): Promise<NumArrResponse>
  enmArr(request: EnmArrRequest): Promise<EnmArrResponse>
  boolArr(request: BoolArrRequest): Promise<BoolArrResponse>
  primObj(request: PrimObjRequest): Promise<PrimObjResponse>
  arrObj(request: ArrObjRequest): Promise<ArrObjResponse>
  nestedObj(request: NestedObjRequest): Promise<NestedObjResponse>
}

export type EnumType = 'A' | 'B' | 'C'

export type ObjectWithArrays = {
  boolArr: boolean[]
  enmArr: EnumType[]
  numArr: number[]
  strArr: string[]
}

export type ObjectWithNestedObjects = {
  arrObj: ObjectWithArrays
  primObj: ObjectWithPrimitives
}

export type ObjectWithPrimitives = {
  bool: boolean
  enm: EnumType
  lit: 'Literal Value'
  num: number
  str: string
}

export type PrimitiveOptionalTupleType = ['Literal Value'?, string?, number?, EnumType?, boolean?]

export type PrimitiveTupleType = ['Literal Value', string, number, EnumType, boolean]

export function isEnumType(input: any): input is EnumType {
  return input === 'A' || input === 'B' || input === 'C'
}

export function isObjectWithArrays(input: any): input is ObjectWithArrays {
  return (
    input !== null &&
    typeof input === 'object' &&
    Array.isArray(input.boolArr) &&
    input.boolArr.every((item: any) => typeof item === 'boolean') &&
    Array.isArray(input.enmArr) &&
    input.enmArr.every((item: any) => isEnumType(item) as boolean) &&
    Array.isArray(input.numArr) &&
    input.numArr.every((item: any) => typeof item === 'number') &&
    Array.isArray(input.strArr) &&
    input.strArr.every((item: any) => typeof item === 'string')
  )
}

export function isObjectWithNestedObjects(input: any): input is ObjectWithNestedObjects {
  return (
    input !== null &&
    typeof input === 'object' &&
    (isObjectWithArrays(input.arrObj) as boolean) &&
    (isObjectWithPrimitives(input.primObj) as boolean)
  )
}

export function isObjectWithPrimitives(input: any): input is ObjectWithPrimitives {
  return (
    input !== null &&
    typeof input === 'object' &&
    typeof input.bool === 'boolean' &&
    (isEnumType(input.enm) as boolean) &&
    input.lit === 'Literal Value' &&
    typeof input.num === 'number' &&
    typeof input.str === 'string'
  )
}

export function isPrimitiveOptionalTupleType(input: any): input is PrimitiveOptionalTupleType {
  return (
    Array.isArray(input) &&
    (input[0] === null || input[0] === undefined || input[0] === 'Literal Value') &&
    (input[1] === null || input[1] === undefined || typeof input[1] === 'string') &&
    (input[2] === null || input[2] === undefined || typeof input[2] === 'number') &&
    (input[3] === null || input[3] === undefined || (isEnumType(input[3]) as boolean)) &&
    (input[4] === null || input[4] === undefined || typeof input[4] === 'boolean')
  )
}

export function isPrimitiveTupleType(input: any): input is PrimitiveTupleType {
  return (
    Array.isArray(input) &&
    input[0] === 'Literal Value' &&
    typeof input[1] === 'string' &&
    typeof input[2] === 'number' &&
    (isEnumType(input[3]) as boolean) &&
    typeof input[4] === 'boolean'
  )
}

export const enumTypeTypeValidator = union({
  A: literal('A'),
  B: literal('B'),
  C: literal('C'),
})

export const objectWithArraysTypeValidator = object(
  shape({
    boolArr: array(items(boolean())),
    enmArr: array(items(lazy(() => enumTypeTypeValidator))),
    numArr: array(items(number())),
    strArr: array(items(string())),
  }),
)

export const objectWithNestedObjectsTypeValidator = object(
  shape({
    arrObj: lazy(() => objectWithArraysTypeValidator),
    primObj: lazy(() => objectWithPrimitivesTypeValidator),
  }),
)

export const objectWithPrimitivesTypeValidator = object(
  shape({
    bool: boolean(),
    enm: lazy(() => enumTypeTypeValidator),
    lit: literal('Literal Value'),
    num: number(),
    str: string(),
  }),
)

export const primitiveOptionalTupleTypeTypeValidator = array(
  tuple(
    optional(literal('Literal Value')),
    optional(string()),
    optional(number()),
    optional(lazy(() => enumTypeTypeValidator)),
    optional(boolean()),
  ),
)

export const primitiveTupleTypeTypeValidator = array(
  tuple(
    literal('Literal Value'),
    string(),
    number(),
    lazy(() => enumTypeTypeValidator),
    boolean(),
  ),
)
