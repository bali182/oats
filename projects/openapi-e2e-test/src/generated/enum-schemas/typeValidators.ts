/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/enum-schemas.json (originating from oats-ts/oats-schemas)
 */

import { schemas } from '@oats-ts/openapi-runtime'

export const arrayEnumTypeTypeValidator = schemas.union({
  '["A","B","C"]': schemas.array(schemas.tuple([schemas.literal('A'), schemas.literal('B'), schemas.literal('C')])),
  '[1,2,3]': schemas.array(schemas.tuple([schemas.literal(1), schemas.literal(2), schemas.literal(3)])),
  '[true,false]': schemas.array(schemas.tuple([schemas.literal(true), schemas.literal(false)])),
})

export const booleanEnumTypeTypeValidator = schemas.union({
  true: schemas.literal(true),
  false: schemas.literal(false),
})

export const mixedEnumTypeTypeValidator = schemas.union({
  A: schemas.literal('A'),
  '121': schemas.literal(121),
  true: schemas.literal(true),
  null: schemas.literal(null),
  '["B",2,false]': schemas.array(schemas.tuple([schemas.literal('B'), schemas.literal(2), schemas.literal(false)])),
  '{"obj":true}': schemas.object(schemas.shape({ obj: schemas.literal(true) })),
})

export const numberEnumTypeTypeValidator = schemas.union({
  '1': schemas.literal(1),
  '2': schemas.literal(2),
  '3': schemas.literal(3),
})

export const objectEnumTypeTypeValidator = schemas.union({
  '{"str":"hi"}': schemas.object(schemas.shape({ str: schemas.literal('hi') })),
  '{"num":121}': schemas.object(schemas.shape({ num: schemas.literal(121) })),
  '{"bool":true}': schemas.object(schemas.shape({ bool: schemas.literal(true) })),
  '{"null":null}': schemas.object(schemas.shape({ null: schemas.literal(null) })),
  '{"has-dashes":true,"has space":true,"has .`/!+^ chars":true}': schemas.object(
    schemas.shape({
      'has-dashes': schemas.literal(true),
      'has space': schemas.literal(true),
      'has .`/!+^ chars': schemas.literal(true),
    }),
  ),
})

export const stringEnumTypeTypeValidator = schemas.union({
  A: schemas.literal('A'),
  B: schemas.literal('B'),
  C: schemas.literal('C'),
})
