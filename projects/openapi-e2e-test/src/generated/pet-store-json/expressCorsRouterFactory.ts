/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/pet-store-json.json (originating from oats-ts/oats-schemas)
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { ServerAdapter } from '@oats-ts/openapi-runtime'
import { IRouter, NextFunction, Request, Response, Router } from 'express'
import { swaggerPetstoreCorsConfiguration } from './corsConfiguration'

export function createSwaggerPetstoreCorsRouter(_local_router?: IRouter | undefined): IRouter {
  return (_local_router ?? Router())
    .options('/pets/:petId', async (_local_request: Request, _local_response: Response, _local_next: NextFunction) => {
      const _local_toolkit: ExpressToolkit = { request: _local_request, response: _local_response, next: _local_next }
      const _local_adapter: ServerAdapter<ExpressToolkit> = _local_response.locals['_local___oats_adapter_qslhlh']
      try {
        const _local_method = _local_adapter.getAccessControlRequestedMethod(_local_toolkit)
        const _local_corsConfig =
          _local_method === undefined ? undefined : swaggerPetstoreCorsConfiguration?.['/pets/{petId}']?.[_local_method]
        const _local_corsHeaders = await _local_adapter.getPreflightCorsHeaders(
          _local_toolkit,
          _local_method,
          _local_corsConfig,
        )
        await _local_adapter.respond(_local_toolkit, { headers: _local_corsHeaders })
      } catch (_local_error) {
        _local_adapter.handleError(_local_toolkit, _local_error)
      }
    })
    .options('/pets', async (_local_request: Request, _local_response: Response, _local_next: NextFunction) => {
      const _local_toolkit: ExpressToolkit = { request: _local_request, response: _local_response, next: _local_next }
      const _local_adapter: ServerAdapter<ExpressToolkit> = _local_response.locals['_local___oats_adapter_qslhlh']
      try {
        const _local_method = _local_adapter.getAccessControlRequestedMethod(_local_toolkit)
        const _local_corsConfig =
          _local_method === undefined ? undefined : swaggerPetstoreCorsConfiguration?.['/pets']?.[_local_method]
        const _local_corsHeaders = await _local_adapter.getPreflightCorsHeaders(
          _local_toolkit,
          _local_method,
          _local_corsConfig,
        )
        await _local_adapter.respond(_local_toolkit, { headers: _local_corsHeaders })
      } catch (_local_error) {
        _local_adapter.handleError(_local_toolkit, _local_error)
      }
    })
}
