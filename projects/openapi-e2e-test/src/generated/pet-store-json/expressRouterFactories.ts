/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/pet-store-json.json
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-runtime'
import { IRouter, NextFunction, Request, Response, Router } from 'express'
import { SwaggerPetstoreApi } from './apiType'
import { swaggerPetstoreCorsConfiguration } from './corsConfiguration'
import { showPetByIdPathDeserializer } from './pathDeserializers'
import { listPetsQueryDeserializer } from './queryDeserializers'
import { createPetsRequestBodyValidator } from './requestBodyValidators'
import { CreatePetsServerRequest, ListPetsServerRequest, ShowPetByIdServerRequest } from './requestServerTypes'
import { listPetsResponseHeadersSerializer } from './responseHeaderSerializers'
import { Pet } from './types'

export function createCreatePetsRouter(_local_router?: IRouter | undefined): IRouter {
  return (_local_router ?? Router()).post(
    '/pets',
    async (_local_request: Request, _local_response: Response, _local_next: NextFunction): Promise<void> => {
      const _local_toolkit: ExpressToolkit = { request: _local_request, response: _local_response, next: _local_next }
      const _local_adapter: ServerAdapter<ExpressToolkit> = _local_response.locals['_local___oats_adapter_qslhlh']
      const _local_api: SwaggerPetstoreApi = _local_response.locals['_local___oats_api_qslhlh']
      try {
        const _local_mimeType = await _local_adapter.getMimeType<'application/json'>(_local_toolkit)
        const _local_body = await _local_adapter.getRequestBody<'application/json', Pet>(
          _local_toolkit,
          true,
          _local_mimeType,
          createPetsRequestBodyValidator,
        )
        const _local_typedRequest: CreatePetsServerRequest = {
          mimeType: _local_mimeType,
          body: _local_body,
        }
        const _local_corsConfig = swaggerPetstoreCorsConfiguration?.['/pets']?.post
        const _local_corsHeaders = await _local_adapter.getCorsHeaders(_local_toolkit, _local_corsConfig)
        const _local_typedResponse = await _local_api._local_createPets(_local_typedRequest)
        const _local_rawResponse: RawHttpResponse = {
          headers: await _local_adapter.getResponseHeaders(
            _local_toolkit,
            _local_typedResponse,
            undefined,
            _local_corsHeaders,
          ),
          statusCode: await _local_adapter.getStatusCode(_local_toolkit, _local_typedResponse),
          body: await _local_adapter.getResponseBody(_local_toolkit, _local_typedResponse),
        }
        await _local_adapter.respond(_local_toolkit, _local_rawResponse)
      } catch (_local_error) {
        _local_adapter.handleError(_local_toolkit, _local_error)
      }
    },
  )
}

export function createListPetsRouter(_local_router?: IRouter | undefined): IRouter {
  return (_local_router ?? Router()).get(
    '/pets',
    async (_local_request: Request, _local_response: Response, _local_next: NextFunction): Promise<void> => {
      const _local_toolkit: ExpressToolkit = { request: _local_request, response: _local_response, next: _local_next }
      const _local_adapter: ServerAdapter<ExpressToolkit> = _local_response.locals['_local___oats_adapter_qslhlh']
      const _local_api: SwaggerPetstoreApi = _local_response.locals['_local___oats_api_qslhlh']
      try {
        const _local_query = await _local_adapter.getQueryParameters(_local_toolkit, listPetsQueryDeserializer)
        const _local_typedRequest: ListPetsServerRequest = {
          query: _local_query,
        }
        const _local_corsConfig = swaggerPetstoreCorsConfiguration?.['/pets']?.get
        const _local_corsHeaders = await _local_adapter.getCorsHeaders(_local_toolkit, _local_corsConfig)
        const _local_typedResponse = await _local_api._local_listPets(_local_typedRequest)
        const _local_rawResponse: RawHttpResponse = {
          headers: await _local_adapter.getResponseHeaders(
            _local_toolkit,
            _local_typedResponse,
            listPetsResponseHeadersSerializer,
            _local_corsHeaders,
          ),
          statusCode: await _local_adapter.getStatusCode(_local_toolkit, _local_typedResponse),
          body: await _local_adapter.getResponseBody(_local_toolkit, _local_typedResponse),
        }
        await _local_adapter.respond(_local_toolkit, _local_rawResponse)
      } catch (_local_error) {
        _local_adapter.handleError(_local_toolkit, _local_error)
      }
    },
  )
}

export function createShowPetByIdRouter(_local_router?: IRouter | undefined): IRouter {
  return (_local_router ?? Router()).get(
    '/pets/:petId',
    async (_local_request: Request, _local_response: Response, _local_next: NextFunction): Promise<void> => {
      const _local_toolkit: ExpressToolkit = { request: _local_request, response: _local_response, next: _local_next }
      const _local_adapter: ServerAdapter<ExpressToolkit> = _local_response.locals['_local___oats_adapter_qslhlh']
      const _local_api: SwaggerPetstoreApi = _local_response.locals['_local___oats_api_qslhlh']
      try {
        const _local_path = await _local_adapter.getPathParameters(_local_toolkit, showPetByIdPathDeserializer)
        const _local_typedRequest: ShowPetByIdServerRequest = {
          path: _local_path,
        }
        const _local_corsConfig = swaggerPetstoreCorsConfiguration?.['/pets/{petId}']?.get
        const _local_corsHeaders = await _local_adapter.getCorsHeaders(_local_toolkit, _local_corsConfig)
        const _local_typedResponse = await _local_api._local_showPetById(_local_typedRequest)
        const _local_rawResponse: RawHttpResponse = {
          headers: await _local_adapter.getResponseHeaders(
            _local_toolkit,
            _local_typedResponse,
            undefined,
            _local_corsHeaders,
          ),
          statusCode: await _local_adapter.getStatusCode(_local_toolkit, _local_typedResponse),
          body: await _local_adapter.getResponseBody(_local_toolkit, _local_typedResponse),
        }
        await _local_adapter.respond(_local_toolkit, _local_rawResponse)
      } catch (_local_error) {
        _local_adapter.handleError(_local_toolkit, _local_error)
      }
    },
  )
}
