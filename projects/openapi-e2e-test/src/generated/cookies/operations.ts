/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/cookies.json (originating from oats-ts/oats-schemas)
 */

import {
  ClientAdapter,
  HttpMethod,
  RawHttpHeaders,
  RawHttpRequest,
  RawHttpResponse,
  RunnableOperation,
  SetCookieValue,
} from '@oats-ts/openapi-runtime'
import { protectedPathCookieParameters } from './cookieParameters'
import { ProtectedPathCookieParameters } from './cookieTypes'
import { LoginRequest, ProtectedPathRequest } from './requestTypes'
import { protectedPathResponseBodyValidator } from './responseBodyValidators'
import { LoginResponse, ProtectedPathResponse } from './responseTypes'

/**
 * This operation takes login info, and returns a cookie containing a token
 */
export class LoginOperation implements RunnableOperation<LoginRequest, LoginResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: LoginRequest): string {
    return this.adapter.getUrl('/login', undefined)
  }
  protected getHttpMethod(_request: LoginRequest): HttpMethod {
    return 'post'
  }
  protected getRequestHeaders(request: LoginRequest): RawHttpHeaders {
    return {
      ...this.adapter.getMimeTypeBasedRequestHeaders(request.mimeType),
      ...this.adapter.getAuxiliaryRequestHeaders(),
    }
  }
  protected getRequestBody(request: LoginRequest): any {
    return this.adapter.getRequestBody(request.mimeType, request.body)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseCookies(response: RawHttpResponse): SetCookieValue[] {
    return this.adapter.getResponseCookies(response)
  }
  public async run(request: LoginRequest): Promise<LoginResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
      body: this.getRequestBody(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      statusCode: this.getStatusCode(rawResponse),
      cookies: this.getResponseCookies(rawResponse),
    }
    return typedResponse as LoginResponse
  }
}

export class ProtectedPathOperation implements RunnableOperation<ProtectedPathRequest, ProtectedPathResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: ProtectedPathRequest): string {
    return this.adapter.getUrl('/protected', undefined)
  }
  protected getHttpMethod(_request: ProtectedPathRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(request: ProtectedPathRequest): RawHttpHeaders {
    return {
      ...this.adapter.getCookieBasedRequestHeaders<ProtectedPathCookieParameters>(
        request.cookies,
        protectedPathCookieParameters,
      ),
      ...this.adapter.getAuxiliaryRequestHeaders(),
    }
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, protectedPathResponseBodyValidator)
  }
  protected getResponseCookies(response: RawHttpResponse): SetCookieValue[] {
    return this.adapter.getResponseCookies(response)
  }
  public async run(request: ProtectedPathRequest): Promise<ProtectedPathResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
      cookies: this.getResponseCookies(rawResponse),
    }
    return typedResponse as ProtectedPathResponse
  }
}
