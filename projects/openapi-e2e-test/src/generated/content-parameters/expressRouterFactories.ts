/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/content-parameters.json (originating from oats-ts/oats-schemas)
 */

import { ExpressToolkit } from '@oats-ts/openapi-express-server-adapter'
import { RawHttpResponse, ServerAdapter } from '@oats-ts/openapi-runtime'
import { IRouter, NextFunction, Request, Response, Router } from 'express'
import { ContentParametersApi } from './apiType'
import { cookieParametersCookieParameters } from './cookieParameters'
import { CookieParametersCookieParameters } from './cookieTypes'
import { pathParametersPathParameters } from './pathParameters'
import { PathParametersPathParameters } from './pathTypes'
import { queryParametersQueryParameters } from './queryParameters'
import { QueryParametersQueryParameters } from './queryTypes'
import { headerParametersRequestHeaderParameters } from './requestHeaderParameters'
import { HeaderParametersRequestHeaderParameters } from './requestHeaderTypes'
import {
  CookieParametersServerRequest,
  HeaderParametersServerRequest,
  PathParametersServerRequest,
  QueryParametersServerRequest,
} from './requestServerTypes'

export function createCookieParametersRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/cookie-parameters',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1k4xmpv']
      const api: ContentParametersApi = response.locals['__oats_api_1k4xmpv']
      try {
        const cookies = await adapter.getCookieParameters<CookieParametersCookieParameters>(
          toolkit,
          cookieParametersCookieParameters,
        )
        const typedRequest: CookieParametersServerRequest = {
          cookies,
        }
        const typedResponse = await api.cookieParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createHeaderParametersRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/header-parameters',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1k4xmpv']
      const api: ContentParametersApi = response.locals['__oats_api_1k4xmpv']
      try {
        const headers = await adapter.getRequestHeaders<HeaderParametersRequestHeaderParameters>(
          toolkit,
          headerParametersRequestHeaderParameters,
        )
        const typedRequest: HeaderParametersServerRequest = {
          headers,
        }
        const typedResponse = await api.headerParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createPathParametersRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/path-parameters/:str/:num/:bool/:enm/:strArr/:numArr/:boolArr/:enmArr/:obj',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1k4xmpv']
      const api: ContentParametersApi = response.locals['__oats_api_1k4xmpv']
      try {
        const path = await adapter.getPathParameters<PathParametersPathParameters>(
          toolkit,
          pathParametersPathParameters,
        )
        const typedRequest: PathParametersServerRequest = {
          path,
        }
        const typedResponse = await api.pathParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}

export function createQueryParametersRouter(router?: IRouter | undefined): IRouter {
  return (router ?? Router()).get(
    '/query-parameters',
    async (request: Request, response: Response, next: NextFunction): Promise<void> => {
      const toolkit: ExpressToolkit = { request, response, next }
      const adapter: ServerAdapter<ExpressToolkit> = response.locals['__oats_adapter_1k4xmpv']
      const api: ContentParametersApi = response.locals['__oats_api_1k4xmpv']
      try {
        const query = await adapter.getQueryParameters<QueryParametersQueryParameters>(
          toolkit,
          queryParametersQueryParameters,
        )
        const typedRequest: QueryParametersServerRequest = {
          query,
        }
        const typedResponse = await api.queryParameters(typedRequest)
        const rawResponse: RawHttpResponse = {
          headers: await adapter.getResponseHeaders(toolkit, typedResponse, undefined, undefined),
          statusCode: await adapter.getStatusCode(toolkit, typedResponse),
          body: await adapter.getResponseBody(toolkit, typedResponse),
          cookies: await adapter.getResponseCookies(toolkit, typedResponse),
        }
        await adapter.respond(toolkit, rawResponse)
      } catch (error) {
        adapter.handleError(toolkit, error)
      }
    },
  )
}
