/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/content-parameters.json (originating from oats-ts/oats-schemas)
 */

import { QueryParameters, parameter, validators } from '@oats-ts/openapi-runtime'
import { QueryParametersQueryParameters } from './queryTypes'
import {
  contentCommonEnumTypeTypeValidator,
  contentCommonObjectTypeTypeValidator,
  contentCommonOptObjectTypeTypeValidator,
} from './typeValidators'

export const queryParametersQueryParameters: QueryParameters<QueryParametersQueryParameters> = {
  descriptor: {
    str: parameter.query.required.schema('application/json'),
    optStr: parameter.query.schema('application/json'),
    num: parameter.query.required.schema('application/json'),
    optNum: parameter.query.schema('application/json'),
    bool: parameter.query.required.schema('application/json'),
    optBool: parameter.query.schema('application/json'),
    enm: parameter.query.required.schema('application/json'),
    optEnm: parameter.query.schema('application/json'),
    strArr: parameter.query.required.schema('application/json'),
    optStrArr: parameter.query.schema('application/json'),
    numArr: parameter.query.required.schema('application/json'),
    optNumArr: parameter.query.schema('application/json'),
    boolArr: parameter.query.required.schema('application/json'),
    optBoolArr: parameter.query.schema('application/json'),
    enmArr: parameter.query.required.schema('application/json'),
    optEnmArr: parameter.query.schema('application/json'),
    obj: parameter.query.required.schema('application/json'),
    optObj: parameter.query.schema('application/json'),
  },
  schema: validators.object(
    validators.shape({
      bool: validators.boolean(),
      boolArr: validators.array(validators.items(validators.boolean())),
      enm: validators.lazy(() => contentCommonEnumTypeTypeValidator),
      enmArr: validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
      num: validators.number(),
      numArr: validators.array(validators.items(validators.number())),
      obj: validators.lazy(() => contentCommonObjectTypeTypeValidator),
      optBool: validators.optional(validators.boolean()),
      optBoolArr: validators.optional(validators.array(validators.items(validators.boolean()))),
      optEnm: validators.optional(validators.lazy(() => contentCommonEnumTypeTypeValidator)),
      optEnmArr: validators.optional(
        validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
      ),
      optNum: validators.optional(validators.number()),
      optNumArr: validators.optional(validators.array(validators.items(validators.number()))),
      optObj: validators.optional(validators.lazy(() => contentCommonOptObjectTypeTypeValidator)),
      optStr: validators.optional(validators.string()),
      optStrArr: validators.optional(validators.array(validators.items(validators.string()))),
      str: validators.string(),
      strArr: validators.array(validators.items(validators.string())),
    }),
  ),
}
