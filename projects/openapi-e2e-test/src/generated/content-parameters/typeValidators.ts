/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/content-parameters.json (originating from oats-ts/oats-schemas)
 */

import { schemas } from '@oats-ts/openapi-runtime'

export const contentCommonEnumTypeTypeValidator = schemas.union({
  A: schemas.literal('A'),
  B: schemas.literal('B'),
  C: schemas.literal('C'),
})

export const contentCommonObjectTypeExplTypeValidator = schemas.object(
  schemas.shape({
    objExplBoolField: schemas.boolean(),
    objExplEnmField: schemas.lazy(() => contentCommonEnumTypeTypeValidator),
    objExplNumField: schemas.number(),
    objExplOptBoolField: schemas.optional(schemas.boolean()),
    objExplOptEnmField: schemas.optional(schemas.lazy(() => contentCommonEnumTypeTypeValidator)),
    objExplOptNumField: schemas.optional(schemas.number()),
    objExplOptStrField: schemas.optional(schemas.string()),
    objExplStrField: schemas.string(),
  }),
)

export const contentCommonObjectTypeTypeValidator = schemas.object(
  schemas.shape({
    objBoolField: schemas.boolean(),
    objEnmField: schemas.lazy(() => contentCommonEnumTypeTypeValidator),
    objNumField: schemas.number(),
    objOptBoolField: schemas.optional(schemas.boolean()),
    objOptEnmField: schemas.optional(schemas.lazy(() => contentCommonEnumTypeTypeValidator)),
    objOptNumField: schemas.optional(schemas.number()),
    objOptStrField: schemas.optional(schemas.string()),
    objStrField: schemas.string(),
  }),
)

export const contentCommonOptObjectTypeTypeValidator = schemas.object(
  schemas.shape({
    optObjBoolField: schemas.boolean(),
    optObjEnmField: schemas.lazy(() => contentCommonEnumTypeTypeValidator),
    optObjNumField: schemas.number(),
    optObjOptBoolField: schemas.optional(schemas.boolean()),
    optObjOptEnmField: schemas.optional(schemas.lazy(() => contentCommonEnumTypeTypeValidator)),
    optObjOptNumField: schemas.optional(schemas.number()),
    optObjOptStrField: schemas.optional(schemas.string()),
    optObjStrField: schemas.string(),
  }),
)

export const contentParameterIssueTypeValidator = schemas.object(schemas.shape({ message: schemas.string() }))

export const cookieParametersTypeValidator = schemas.object(
  schemas.shape({
    bool: schemas.boolean(),
    boolArr: schemas.array(schemas.items(schemas.boolean())),
    enm: schemas.lazy(() => contentCommonEnumTypeTypeValidator),
    enmArr: schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator))),
    num: schemas.number(),
    numArr: schemas.array(schemas.items(schemas.number())),
    obj: schemas.lazy(() => contentCommonObjectTypeTypeValidator),
    optBool: schemas.optional(schemas.boolean()),
    optBoolArr: schemas.optional(schemas.array(schemas.items(schemas.boolean()))),
    optEnm: schemas.optional(schemas.lazy(() => contentCommonEnumTypeTypeValidator)),
    optEnmArr: schemas.optional(schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator)))),
    optNum: schemas.optional(schemas.number()),
    optNumArr: schemas.optional(schemas.array(schemas.items(schemas.number()))),
    optObj: schemas.optional(schemas.lazy(() => contentCommonOptObjectTypeTypeValidator)),
    optStr: schemas.optional(schemas.string()),
    optStrArr: schemas.optional(schemas.array(schemas.items(schemas.string()))),
    str: schemas.string(),
    strArr: schemas.array(schemas.items(schemas.string())),
  }),
)

export const headerParametersTypeValidator = schemas.object(
  schemas.shape({
    'X-Bool-Header': schemas.boolean(),
    'X-BoolArr-Header': schemas.array(schemas.items(schemas.boolean())),
    'X-Enm-Header': schemas.lazy(() => contentCommonEnumTypeTypeValidator),
    'X-EnmArr-Header': schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator))),
    'X-Num-Header': schemas.number(),
    'X-NumArr-Header': schemas.array(schemas.items(schemas.number())),
    'X-Obj-Header': schemas.lazy(() => contentCommonObjectTypeTypeValidator),
    'X-OptBool-Header': schemas.optional(schemas.boolean()),
    'X-OptBoolArr-Header': schemas.optional(schemas.array(schemas.items(schemas.boolean()))),
    'X-OptEnm-Header': schemas.optional(schemas.lazy(() => contentCommonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': schemas.optional(
      schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator))),
    ),
    'X-OptNum-Header': schemas.optional(schemas.number()),
    'X-OptNumArr-Header': schemas.optional(schemas.array(schemas.items(schemas.number()))),
    'X-OptObj-Header': schemas.optional(schemas.lazy(() => contentCommonOptObjectTypeTypeValidator)),
    'X-OptStr-Header': schemas.optional(schemas.string()),
    'X-OptStrArr-Header': schemas.optional(schemas.array(schemas.items(schemas.string()))),
    'X-Str-Header': schemas.string(),
    'X-StrArr-Header': schemas.array(schemas.items(schemas.string())),
  }),
)

export const pathParametersTypeValidator = schemas.object(
  schemas.shape({
    bool: schemas.boolean(),
    boolArr: schemas.array(schemas.items(schemas.boolean())),
    enm: schemas.lazy(() => contentCommonEnumTypeTypeValidator),
    enmArr: schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator))),
    num: schemas.number(),
    numArr: schemas.array(schemas.items(schemas.number())),
    obj: schemas.lazy(() => contentCommonObjectTypeTypeValidator),
    str: schemas.string(),
    strArr: schemas.array(schemas.items(schemas.string())),
  }),
)

export const queryParametersTypeValidator = schemas.object(
  schemas.shape({
    bool: schemas.boolean(),
    boolArr: schemas.array(schemas.items(schemas.boolean())),
    enm: schemas.lazy(() => contentCommonEnumTypeTypeValidator),
    enmArr: schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator))),
    num: schemas.number(),
    numArr: schemas.array(schemas.items(schemas.number())),
    obj: schemas.lazy(() => contentCommonObjectTypeTypeValidator),
    optBool: schemas.optional(schemas.boolean()),
    optBoolArr: schemas.optional(schemas.array(schemas.items(schemas.boolean()))),
    optEnm: schemas.optional(schemas.lazy(() => contentCommonEnumTypeTypeValidator)),
    optEnmArr: schemas.optional(schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator)))),
    optNum: schemas.optional(schemas.number()),
    optNumArr: schemas.optional(schemas.array(schemas.items(schemas.number()))),
    optObj: schemas.optional(schemas.lazy(() => contentCommonOptObjectTypeTypeValidator)),
    optStr: schemas.optional(schemas.string()),
    optStrArr: schemas.optional(schemas.array(schemas.items(schemas.string()))),
    str: schemas.string(),
    strArr: schemas.array(schemas.items(schemas.string())),
  }),
)

export const responseHeaderParametersTypeValidator = schemas.object(
  schemas.shape({
    'X-Bool-Header': schemas.boolean(),
    'X-BoolArr-Header': schemas.array(schemas.items(schemas.boolean())),
    'X-Enm-Header': schemas.lazy(() => contentCommonEnumTypeTypeValidator),
    'X-EnmArr-Header': schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator))),
    'X-Num-Header': schemas.number(),
    'X-NumArr-Header': schemas.array(schemas.items(schemas.number())),
    'X-Obj-Header': schemas.lazy(() => contentCommonObjectTypeTypeValidator),
    'X-OptBool-Header': schemas.optional(schemas.boolean()),
    'X-OptBoolArr-Header': schemas.optional(schemas.array(schemas.items(schemas.boolean()))),
    'X-OptEnm-Header': schemas.optional(schemas.lazy(() => contentCommonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': schemas.optional(
      schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator))),
    ),
    'X-OptNum-Header': schemas.optional(schemas.number()),
    'X-OptNumArr-Header': schemas.optional(schemas.array(schemas.items(schemas.number()))),
    'X-OptObj-Header': schemas.optional(schemas.lazy(() => contentCommonOptObjectTypeTypeValidator)),
    'X-OptStr-Header': schemas.optional(schemas.string()),
    'X-OptStrArr-Header': schemas.optional(schemas.array(schemas.items(schemas.string()))),
    'X-Str-Header': schemas.string(),
    'X-StrArr-Header': schemas.array(schemas.items(schemas.string())),
  }),
)
