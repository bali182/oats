/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/content-parameters.json (originating from oats-ts/oats-schemas)
 */

import { validators } from '@oats-ts/openapi-runtime'

export const contentCommonEnumTypeTypeValidator = validators.union({
  A: validators.literal('A'),
  B: validators.literal('B'),
  C: validators.literal('C'),
})

export const contentCommonObjectTypeExplTypeValidator = validators.object(
  validators.shape({
    objExplBoolField: validators.boolean(),
    objExplEnmField: validators.lazy(() => contentCommonEnumTypeTypeValidator),
    objExplNumField: validators.number(),
    objExplOptBoolField: validators.optional(validators.boolean()),
    objExplOptEnmField: validators.optional(validators.lazy(() => contentCommonEnumTypeTypeValidator)),
    objExplOptNumField: validators.optional(validators.number()),
    objExplOptStrField: validators.optional(validators.string()),
    objExplStrField: validators.string(),
  }),
)

export const contentCommonObjectTypeTypeValidator = validators.object(
  validators.shape({
    objBoolField: validators.boolean(),
    objEnmField: validators.lazy(() => contentCommonEnumTypeTypeValidator),
    objNumField: validators.number(),
    objOptBoolField: validators.optional(validators.boolean()),
    objOptEnmField: validators.optional(validators.lazy(() => contentCommonEnumTypeTypeValidator)),
    objOptNumField: validators.optional(validators.number()),
    objOptStrField: validators.optional(validators.string()),
    objStrField: validators.string(),
  }),
)

export const contentCommonOptObjectTypeTypeValidator = validators.object(
  validators.shape({
    optObjBoolField: validators.boolean(),
    optObjEnmField: validators.lazy(() => contentCommonEnumTypeTypeValidator),
    optObjNumField: validators.number(),
    optObjOptBoolField: validators.optional(validators.boolean()),
    optObjOptEnmField: validators.optional(validators.lazy(() => contentCommonEnumTypeTypeValidator)),
    optObjOptNumField: validators.optional(validators.number()),
    optObjOptStrField: validators.optional(validators.string()),
    optObjStrField: validators.string(),
  }),
)

export const contentParameterIssueTypeValidator = validators.object(validators.shape({ message: validators.string() }))

export const cookieParametersTypeValidator = validators.object(
  validators.shape({
    bool: validators.boolean(),
    boolArr: validators.array(validators.items(validators.boolean())),
    enm: validators.lazy(() => contentCommonEnumTypeTypeValidator),
    enmArr: validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
    num: validators.number(),
    numArr: validators.array(validators.items(validators.number())),
    obj: validators.lazy(() => contentCommonObjectTypeTypeValidator),
    optBool: validators.optional(validators.boolean()),
    optBoolArr: validators.optional(validators.array(validators.items(validators.boolean()))),
    optEnm: validators.optional(validators.lazy(() => contentCommonEnumTypeTypeValidator)),
    optEnmArr: validators.optional(
      validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
    ),
    optNum: validators.optional(validators.number()),
    optNumArr: validators.optional(validators.array(validators.items(validators.number()))),
    optObj: validators.optional(validators.lazy(() => contentCommonOptObjectTypeTypeValidator)),
    optStr: validators.optional(validators.string()),
    optStrArr: validators.optional(validators.array(validators.items(validators.string()))),
    str: validators.string(),
    strArr: validators.array(validators.items(validators.string())),
  }),
)

export const headerParametersTypeValidator = validators.object(
  validators.shape({
    'X-Bool-Header': validators.boolean(),
    'X-BoolArr-Header': validators.array(validators.items(validators.boolean())),
    'X-Enm-Header': validators.lazy(() => contentCommonEnumTypeTypeValidator),
    'X-EnmArr-Header': validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
    'X-Num-Header': validators.number(),
    'X-NumArr-Header': validators.array(validators.items(validators.number())),
    'X-Obj-Header': validators.lazy(() => contentCommonObjectTypeTypeValidator),
    'X-OptBool-Header': validators.optional(validators.boolean()),
    'X-OptBoolArr-Header': validators.optional(validators.array(validators.items(validators.boolean()))),
    'X-OptEnm-Header': validators.optional(validators.lazy(() => contentCommonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': validators.optional(
      validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
    ),
    'X-OptNum-Header': validators.optional(validators.number()),
    'X-OptNumArr-Header': validators.optional(validators.array(validators.items(validators.number()))),
    'X-OptObj-Header': validators.optional(validators.lazy(() => contentCommonOptObjectTypeTypeValidator)),
    'X-OptStr-Header': validators.optional(validators.string()),
    'X-OptStrArr-Header': validators.optional(validators.array(validators.items(validators.string()))),
    'X-Str-Header': validators.string(),
    'X-StrArr-Header': validators.array(validators.items(validators.string())),
  }),
)

export const pathParametersTypeValidator = validators.object(
  validators.shape({
    bool: validators.boolean(),
    boolArr: validators.array(validators.items(validators.boolean())),
    enm: validators.lazy(() => contentCommonEnumTypeTypeValidator),
    enmArr: validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
    num: validators.number(),
    numArr: validators.array(validators.items(validators.number())),
    obj: validators.lazy(() => contentCommonObjectTypeTypeValidator),
    str: validators.string(),
    strArr: validators.array(validators.items(validators.string())),
  }),
)

export const queryParametersTypeValidator = validators.object(
  validators.shape({
    bool: validators.boolean(),
    boolArr: validators.array(validators.items(validators.boolean())),
    enm: validators.lazy(() => contentCommonEnumTypeTypeValidator),
    enmArr: validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
    num: validators.number(),
    numArr: validators.array(validators.items(validators.number())),
    obj: validators.lazy(() => contentCommonObjectTypeTypeValidator),
    optBool: validators.optional(validators.boolean()),
    optBoolArr: validators.optional(validators.array(validators.items(validators.boolean()))),
    optEnm: validators.optional(validators.lazy(() => contentCommonEnumTypeTypeValidator)),
    optEnmArr: validators.optional(
      validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
    ),
    optNum: validators.optional(validators.number()),
    optNumArr: validators.optional(validators.array(validators.items(validators.number()))),
    optObj: validators.optional(validators.lazy(() => contentCommonOptObjectTypeTypeValidator)),
    optStr: validators.optional(validators.string()),
    optStrArr: validators.optional(validators.array(validators.items(validators.string()))),
    str: validators.string(),
    strArr: validators.array(validators.items(validators.string())),
  }),
)

export const responseHeaderParametersTypeValidator = validators.object(
  validators.shape({
    'X-Bool-Header': validators.boolean(),
    'X-BoolArr-Header': validators.array(validators.items(validators.boolean())),
    'X-Enm-Header': validators.lazy(() => contentCommonEnumTypeTypeValidator),
    'X-EnmArr-Header': validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
    'X-Num-Header': validators.number(),
    'X-NumArr-Header': validators.array(validators.items(validators.number())),
    'X-Obj-Header': validators.lazy(() => contentCommonObjectTypeTypeValidator),
    'X-OptBool-Header': validators.optional(validators.boolean()),
    'X-OptBoolArr-Header': validators.optional(validators.array(validators.items(validators.boolean()))),
    'X-OptEnm-Header': validators.optional(validators.lazy(() => contentCommonEnumTypeTypeValidator)),
    'X-OptEnmArr-Header': validators.optional(
      validators.array(validators.items(validators.lazy(() => contentCommonEnumTypeTypeValidator))),
    ),
    'X-OptNum-Header': validators.optional(validators.number()),
    'X-OptNumArr-Header': validators.optional(validators.array(validators.items(validators.number()))),
    'X-OptObj-Header': validators.optional(validators.lazy(() => contentCommonOptObjectTypeTypeValidator)),
    'X-OptStr-Header': validators.optional(validators.string()),
    'X-OptStrArr-Header': validators.optional(validators.array(validators.items(validators.string()))),
    'X-Str-Header': validators.string(),
    'X-StrArr-Header': validators.array(validators.items(validators.string())),
  }),
)
