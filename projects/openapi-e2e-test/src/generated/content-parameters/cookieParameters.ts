/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/content-parameters.json (originating from oats-ts/oats-schemas)
 */

import { CookieDescriptorRule, parameters, schemas } from '@oats-ts/openapi-runtime'
import { CookieParametersCookieParameters } from './cookieTypes'
import {
  contentCommonEnumTypeTypeValidator,
  contentCommonObjectTypeTypeValidator,
  contentCommonOptObjectTypeTypeValidator,
} from './typeValidators'

export const cookieParametersCookieParameters: CookieDescriptorRule<CookieParametersCookieParameters> = {
  parameters: {
    str: parameters.cookie.required.schema('application/json'),
    optStr: parameters.cookie.schema('application/json'),
    num: parameters.cookie.required.schema('application/json'),
    optNum: parameters.cookie.schema('application/json'),
    bool: parameters.cookie.required.schema('application/json'),
    optBool: parameters.cookie.schema('application/json'),
    enm: parameters.cookie.required.schema('application/json'),
    optEnm: parameters.cookie.schema('application/json'),
    strArr: parameters.cookie.required.schema('application/json'),
    optStrArr: parameters.cookie.schema('application/json'),
    numArr: parameters.cookie.required.schema('application/json'),
    optNumArr: parameters.cookie.schema('application/json'),
    boolArr: parameters.cookie.required.schema('application/json'),
    optBoolArr: parameters.cookie.schema('application/json'),
    enmArr: parameters.cookie.required.schema('application/json'),
    optEnmArr: parameters.cookie.schema('application/json'),
    obj: parameters.cookie.required.schema('application/json'),
    optObj: parameters.cookie.schema('application/json'),
  },
  schema: schemas.object(
    schemas.shape({
      bool: schemas.boolean(),
      boolArr: schemas.array(schemas.items(schemas.boolean())),
      enm: schemas.lazy(() => contentCommonEnumTypeTypeValidator),
      enmArr: schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator))),
      num: schemas.number(),
      numArr: schemas.array(schemas.items(schemas.number())),
      obj: schemas.lazy(() => contentCommonObjectTypeTypeValidator),
      optBool: schemas.optional(schemas.boolean()),
      optBoolArr: schemas.optional(schemas.array(schemas.items(schemas.boolean()))),
      optEnm: schemas.optional(schemas.lazy(() => contentCommonEnumTypeTypeValidator)),
      optEnmArr: schemas.optional(schemas.array(schemas.items(schemas.lazy(() => contentCommonEnumTypeTypeValidator)))),
      optNum: schemas.optional(schemas.number()),
      optNumArr: schemas.optional(schemas.array(schemas.items(schemas.number()))),
      optObj: schemas.optional(schemas.lazy(() => contentCommonOptObjectTypeTypeValidator)),
      optStr: schemas.optional(schemas.string()),
      optStrArr: schemas.optional(schemas.array(schemas.items(schemas.string()))),
      str: schemas.string(),
      strArr: schemas.array(schemas.items(schemas.string())),
    }),
  ),
}
