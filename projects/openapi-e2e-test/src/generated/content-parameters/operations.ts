/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from generated-schemas/content-parameters.json (originating from oats-ts/oats-schemas)
 */

import {
  ClientAdapter,
  HttpMethod,
  RawHttpHeaders,
  RawHttpRequest,
  RawHttpResponse,
  RunnableOperation,
} from '@oats-ts/openapi-runtime'
import { pathParametersPathParameters } from './pathParameters'
import { PathParametersPathParameters } from './pathTypes'
import { queryParametersQueryParameters } from './queryParameters'
import { QueryParametersQueryParameters } from './queryTypes'
import { headerParametersRequestHeaderParameters } from './requestHeaderParameters'
import { HeaderParametersRequestHeaderParameters } from './requestHeaderTypes'
import { HeaderParametersRequest, PathParametersRequest, QueryParametersRequest } from './requestTypes'
import {
  cookieParametersResponseBodyValidator,
  headerParametersResponseBodyValidator,
  pathParametersResponseBodyValidator,
  queryParametersResponseBodyValidator,
} from './responseBodyValidators'
import {
  CookieParametersResponse,
  HeaderParametersResponse,
  PathParametersResponse,
  QueryParametersResponse,
} from './responseTypes'

/**
 * Endpoint for testing cookie parameters with "content" object
 */
export class CookieParametersOperation implements RunnableOperation<void, CookieParametersResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(): string {
    return this.adapter.getUrl('/cookie-parameters', undefined)
  }
  protected getHttpMethod(): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, cookieParametersResponseBodyValidator)
  }
  public async run(): Promise<CookieParametersResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(),
      method: this.getHttpMethod(),
      headers: this.getRequestHeaders(),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as CookieParametersResponse
  }
}

/**
 * Endpoint for testing header parameters with "content" object
 */
export class HeaderParametersOperation implements RunnableOperation<HeaderParametersRequest, HeaderParametersResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(_request: HeaderParametersRequest): string {
    return this.adapter.getUrl('/header-parameters', undefined)
  }
  protected getHttpMethod(_request: HeaderParametersRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(request: HeaderParametersRequest): RawHttpHeaders {
    return {
      ...this.adapter.getParameterBasedRequestHeaders<HeaderParametersRequestHeaderParameters>(
        request.headers,
        headerParametersRequestHeaderParameters,
      ),
      ...this.adapter.getAuxiliaryRequestHeaders(),
    }
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, headerParametersResponseBodyValidator)
  }
  public async run(request: HeaderParametersRequest): Promise<HeaderParametersResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as HeaderParametersResponse
  }
}

/**
 * Endpoint for testing path parameters with "content" object
 */
export class PathParametersOperation implements RunnableOperation<PathParametersRequest, PathParametersResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: PathParametersRequest): string {
    const path = this.adapter.getPath<PathParametersPathParameters>(request.path, pathParametersPathParameters)
    return this.adapter.getUrl(path, undefined)
  }
  protected getHttpMethod(_request: PathParametersRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: PathParametersRequest): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, pathParametersResponseBodyValidator)
  }
  public async run(request: PathParametersRequest): Promise<PathParametersResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as PathParametersResponse
  }
}

/**
 * Endpoint for testing query parameters with "content" object
 */
export class QueryParametersOperation implements RunnableOperation<QueryParametersRequest, QueryParametersResponse> {
  protected readonly adapter: ClientAdapter
  public constructor(adapter: ClientAdapter) {
    this.adapter = adapter
  }
  protected getUrl(request: QueryParametersRequest): string {
    const query = this.adapter.getQuery<QueryParametersQueryParameters>(request.query, queryParametersQueryParameters)
    return this.adapter.getUrl('/query-parameters', query)
  }
  protected getHttpMethod(_request: QueryParametersRequest): HttpMethod {
    return 'get'
  }
  protected getRequestHeaders(_request: QueryParametersRequest): RawHttpHeaders {
    return this.adapter.getAuxiliaryRequestHeaders()
  }
  protected getMimeType(response: RawHttpResponse): string | undefined {
    return this.adapter.getMimeType(response)
  }
  protected getStatusCode(response: RawHttpResponse): number | undefined {
    return this.adapter.getStatusCode(response)
  }
  protected getResponseBody(response: RawHttpResponse): any {
    return this.adapter.getResponseBody(response, queryParametersResponseBodyValidator)
  }
  public async run(request: QueryParametersRequest): Promise<QueryParametersResponse> {
    const rawRequest: RawHttpRequest = {
      url: this.getUrl(request),
      method: this.getHttpMethod(request),
      headers: this.getRequestHeaders(request),
    }
    const rawResponse = await this.adapter.request(rawRequest)
    const typedResponse = {
      mimeType: this.getMimeType(rawResponse),
      statusCode: this.getStatusCode(rawResponse),
      body: this.getResponseBody(rawResponse),
    }
    return typedResponse as QueryParametersResponse
  }
}
