/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/references.json
 */

import { array, items, lazy, literal, object, optional, shape, string } from '@oats-ts/validators'

export const inlineRefTargetTypeValidator = object(shape({ foo: optional(string()) }))

export const inlineRefTypeTypeValidator = lazy(() => inlineRefTargetTypeValidator)

export const referenceTargetTypeValidator = object(shape({ referenceTarget: optional(literal(true)) }))

export const remoteRefTypeTypeValidator = lazy(() => typeWithRemoteRefFieldTypeValidator)

export const typeWithRefOfRemoteRefTypeValidator = object(
  shape({
    referenceArrayField: array(items(lazy(() => typeWithRemoteRefFieldTypeValidator))),
    referenceField: lazy(() => typeWithRemoteRefFieldTypeValidator),
  }),
)

export const typeWithRemoteRefFieldTypeValidator = object(
  shape({
    referenceArrayField: array(items(lazy(() => referenceTargetTypeValidator))),
    referenceField: lazy(() => referenceTargetTypeValidator),
  }),
)
