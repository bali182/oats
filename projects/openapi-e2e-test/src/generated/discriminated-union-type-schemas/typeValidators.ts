/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/discriminated-union-type-schemas.json
 */

import { lazy, literal, object, shape, string, union } from '@oats-ts/validators'

export const leafType1TypeValidator = object(
  shape({
    type: literal('LeafType1'),
    foo: string(),
  }),
)

export const leafType2TypeValidator = object(
  shape({
    type: literal('LeafType2'),
    bar: string(),
  }),
)

export const leafType3TypeValidator = object(
  shape({
    type: literal('LeafType3'),
    foobar: string(),
  }),
)

export const midLevelUnionTypeTypeValidator = union({
  LeafType2: lazy(() => leafType2TypeValidator),
  LeafType3: lazy(() => leafType3TypeValidator),
})

export const topLevelUnionTypeTypeValidator = union({
  LeafType1: lazy(() => leafType1TypeValidator),
  MidLevelUnionType: lazy(() => midLevelUnionTypeTypeValidator),
})
