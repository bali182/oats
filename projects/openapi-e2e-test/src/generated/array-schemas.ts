/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/array-schemas.json
 */

import { array, boolean, items, lazy, literal, number, object, optional, shape, string } from '@oats-ts/validators'

export type ArrayArrayType = string[][]

export type BooleanArrayType = boolean[]

export type NumberArrayType = number[]

export type ObjectArrayType = {
  foo: string
}[]

export type RefArrayType = ReferenceTarget[]

export type ReferenceTarget = {
  referenceTarget?: true
}

export type StringArrayType = string[]

export function isArrayArrayType(input: any): input is ArrayArrayType {
  return (
    Array.isArray(input) &&
    input.every((item: any) => Array.isArray(item) && item.every((item: any) => typeof item === 'string'))
  )
}

export function isBooleanArrayType(input: any): input is BooleanArrayType {
  return Array.isArray(input) && input.every((item: any) => typeof item === 'boolean')
}

export function isNumberArrayType(input: any): input is NumberArrayType {
  return Array.isArray(input) && input.every((item: any) => typeof item === 'number')
}

export function isObjectArrayType(input: any): input is ObjectArrayType {
  return (
    Array.isArray(input) &&
    input.every((item: any) => item !== null && typeof item === 'object' && typeof item.foo === 'string')
  )
}

export function isRefArrayType(input: any): input is RefArrayType {
  return Array.isArray(input) && input.every((item: any) => isReferenceTarget(item) as boolean)
}

export function isReferenceTarget(input: any): input is ReferenceTarget {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.referenceTarget === null || input.referenceTarget === undefined || input.referenceTarget === true)
  )
}

export function isStringArrayType(input: any): input is StringArrayType {
  return Array.isArray(input) && input.every((item: any) => typeof item === 'string')
}

export const arrayArrayTypeTypeValidator = array(items(array(items(string()))))

export const booleanArrayTypeTypeValidator = array(items(boolean()))

export const numberArrayTypeTypeValidator = array(items(number()))

export const objectArrayTypeTypeValidator = array(items(object(shape({ foo: string() }))))

export const refArrayTypeTypeValidator = array(items(lazy(() => referenceTargetTypeValidator)))

export const referenceTargetTypeValidator = object(shape({ referenceTarget: optional(literal(true)) }))

export const stringArrayTypeTypeValidator = array(items(string()))
