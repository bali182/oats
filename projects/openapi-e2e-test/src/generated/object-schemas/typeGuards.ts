/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/object-schemas.json (originating from oats-ts/oats-schemas)
 */

import {
  ObjectWithNestedTypeFieldsType,
  ObjectWithOptionalPrimitiveFieldsType,
  ObjectWithPrimitiveFieldsType,
  ObjectWithReferenceFieldsType,
  ReferenceTarget,
} from './types'

export function isObjectWithNestedTypeFieldsType(input: any): input is ObjectWithNestedTypeFieldsType {
  return (
    input !== null &&
    typeof input === 'object' &&
    Array.isArray(input.arrayField) &&
    input.arrayField.every((item: any) => typeof item === 'string') &&
    (input.enumField === 'A' || input.enumField === 'B' || input.enumField === 'C') &&
    input.objectField !== null &&
    typeof input.objectField === 'object' &&
    (input.objectField.nestedField === undefined || typeof input.objectField.nestedField === 'string') &&
    Array.isArray(input.tupleField) &&
    (input.tupleField[0] === undefined || typeof input.tupleField[0] === 'string') &&
    (input.tupleField[1] === undefined || typeof input.tupleField[1] === 'number')
  )
}

export function isObjectWithOptionalPrimitiveFieldsType(input: any): input is ObjectWithOptionalPrimitiveFieldsType {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.booleanField === undefined || typeof input.booleanField === 'boolean') &&
    (input.numberField === undefined || typeof input.numberField === 'number') &&
    (input.stringField === undefined || typeof input.stringField === 'string')
  )
}

export function isObjectWithPrimitiveFieldsType(input: any): input is ObjectWithPrimitiveFieldsType {
  return (
    input !== null &&
    typeof input === 'object' &&
    typeof input.booleanField === 'boolean' &&
    typeof input.numberField === 'number' &&
    typeof input.stringField === 'string'
  )
}

export function isObjectWithReferenceFieldsType(input: any): input is ObjectWithReferenceFieldsType {
  return (
    input !== null &&
    typeof input === 'object' &&
    Array.isArray(input.referenceArrayField) &&
    input.referenceArrayField.every((item: any) => isReferenceTarget(item) as boolean) &&
    (isReferenceTarget(input.referenceField) as boolean)
  )
}

export function isReferenceTarget(input: any): input is ReferenceTarget {
  return (
    input !== null &&
    typeof input === 'object' &&
    (input.referenceTarget === undefined || input.referenceTarget === true)
  )
}
