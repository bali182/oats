/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from schemas/object-schemas.json (originating from oats-ts/oats-schemas)
 */

import { schemas } from '@oats-ts/openapi-runtime'

export const objectWithNestedTypeFieldsTypeTypeValidator = schemas.object(
  schemas.shape({
    arrayField: schemas.array(schemas.items(schemas.string())),
    enumField: schemas.union({
      A: schemas.literal('A'),
      B: schemas.literal('B'),
      C: schemas.literal('C'),
    }),
    objectField: schemas.object(schemas.shape({ nestedField: schemas.optional(schemas.string()) })),
    tupleField: schemas.array(schemas.tuple([schemas.optional(schemas.string()), schemas.optional(schemas.number())])),
  }),
)

export const objectWithOptionalPrimitiveFieldsTypeTypeValidator = schemas.object(
  schemas.shape({
    booleanField: schemas.optional(schemas.boolean()),
    numberField: schemas.optional(schemas.number()),
    stringField: schemas.optional(schemas.string()),
  }),
)

export const objectWithPrimitiveFieldsTypeTypeValidator = schemas.object(
  schemas.shape({
    booleanField: schemas.boolean(),
    numberField: schemas.number(),
    stringField: schemas.string(),
  }),
)

export const objectWithReferenceFieldsTypeTypeValidator = schemas.object(
  schemas.shape({
    referenceArrayField: schemas.array(schemas.items(schemas.lazy(() => referenceTargetTypeValidator))),
    referenceField: schemas.lazy(() => referenceTargetTypeValidator),
  }),
)

export const referenceTargetTypeValidator = schemas.object(
  schemas.shape({ referenceTarget: schemas.optional(schemas.literal(true)) }),
)
