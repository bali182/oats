/*
 * This file has been generated by Oats, please don't modify it by hand!
 *
 * Generated from https://raw.githubusercontent.com/oats-ts/oats-schemas/master/schemas/object-schemas.json
 */

import {
  array,
  boolean,
  items,
  lazy,
  literal,
  number,
  object,
  optional,
  shape,
  string,
  tuple,
  union,
} from '@oats-ts/validators'

export const objectWithNestedTypeFieldsTypeTypeValidator = object(
  shape({
    arrayField: array(items(string())),
    enumField: union({
      A: literal('A'),
      B: literal('B'),
      C: literal('C'),
    }),
    objectField: object(shape({ nestedField: optional(string()) })),
    tupleField: array(tuple(optional(string()), optional(number()))),
  }),
)

export const objectWithOptionalPrimitiveFieldsTypeTypeValidator = object(
  shape({
    booleanField: optional(boolean()),
    numberField: optional(number()),
    stringField: optional(string()),
  }),
)

export const objectWithPrimitiveFieldsTypeTypeValidator = object(
  shape({
    booleanField: boolean(),
    numberField: number(),
    stringField: string(),
  }),
)

export const objectWithReferenceFieldsTypeTypeValidator = object(
  shape({
    referenceArrayField: array(items(lazy(() => referenceTargetTypeValidator))),
    referenceField: lazy(() => referenceTargetTypeValidator),
  }),
)

export const referenceTargetTypeValidator = object(shape({ referenceTarget: optional(literal(true)) }))
