import fetch from 'node-fetch'
import {
  generate,
  nameProviders,
  pathProviders,
  validator,
  writer,
  reader,
  prettierStringify,
  presets,
} from '@oats-ts/openapi'

const REPO = 'oats-ts/oats-schemas'

type FileDescriptor = {
  path: string
  mode: string
  type: string
  sha: string
  size: number
  url: string
}

export async function getFiles(): Promise<string[]> {
  const response = await fetch(`https://api.github.com/repos/${REPO}/git/trees/master`)
  const tree = (await response.json()).tree as FileDescriptor[]
  return tree.map((file) => file.path)
}

function getSchemaUrl(path: string): string {
  return `https://raw.githubusercontent.com/${REPO}/master/${path}`
}

function getCodePath(path: string): string {
  return `src/generated/${path.replace('.json', '.ts')}`
}

export async function generateCode(path: string) {
  const codePath = getCodePath(path)
  const url = getSchemaUrl(path)
  return generate({
    configuration: {
      log: true,
      name: nameProviders.default(),
      path: pathProviders.singleFile(codePath),
    },
    validator: validator(),
    reader: reader({ path: url }),
    generators: presets.fullStack({
      'json-schema/type-guard': {
        ignore: (schema: any) => Boolean(schema?.['x-ignore-validation']),
      },
      'json-schema/type-validator': {
        ignore: (schema: any) => Boolean(schema?.['x-ignore-validation']),
      },
    }),
    writer: writer({
      comments: {
        leadingComments: [
          {
            type: 'block',
            text: `This file has been generated by Oats, please don't modify it by hand!\n\nGenerated from ${url}`,
          },
        ],
      },
      stringify: prettierStringify({
        parser: 'typescript',
        arrowParens: 'always',
        printWidth: 120,
        semi: false,
        singleQuote: true,
        trailingComma: 'all',
      }),
    }),
  })
}

async function generateAll() {
  const files = await getFiles()
  for (const path of files) {
    console.log(`===\n${path}\n===`)
    await generateCode(path)
  }
}

generateAll()
