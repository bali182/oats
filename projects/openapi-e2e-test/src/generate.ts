import fetch from 'node-fetch'
import { promises as fs } from 'fs'
import { join, parse } from 'path'
import { generate } from '@oats-ts/oats-ts'
import {
  formatters,
  validator,
  readers,
  writers,
  presets,
  nameProviders,
  pathProviders,
  generator,
  loggers,
} from '@oats-ts/openapi'

const REPO = 'oats-ts/oats-schemas'
const PATH = 'src/generated'

type FileDescriptor = {
  path: string
  mode: string
  type: 'tree' | 'blob'
  sha: string
  size: number
  url: string
}

type ExternalFile = {
  url: string
  fileName: string
}

const externals: ExternalFile[] = [
  {
    url: 'https://api.apis.guru/v2/specs/1password.com/events/1.0.0/openapi.json',
    fileName: '1password.json',
  },
]

export async function getFiles(folders: string[]): Promise<string[]> {
  const response = await fetch(`https://api.github.com/repos/${REPO}/git/trees/master?recursive=true`)
  const tree = ((await response.json()) as any).tree as FileDescriptor[]
  return tree
    .filter((file) => file.type !== 'tree')
    .filter((file) => folders.some((folder) => file.path.startsWith(`${folder}/`)))
    .filter((file) => file.path.endsWith('.json') || file.path.endsWith('.yaml'))
    .map((file) => file.path)
}

function getSchemaUrl(path: string): string {
  return `https://raw.githubusercontent.com/${REPO}/master/${path}`
}

function getCodePath(path: string): string {
  return join(PATH, `${parse(path).name}.ts`)
}

function getCorsConfig(url: string) {
  if (url.includes('pet-store-json')) {
    return true
  }
  if (url.includes('pet-store-yaml')) {
    return ['https://foo.com']
  }
  return false
}

export async function generateCode(url: string, codePath: string) {
  try {
    await generate({
      logger: loggers.simple(),
      validator: validator(),
      reader: readers.https.mixed(url),
      generator: generator({
        nameProvider: nameProviders.default(),
        pathProvider: pathProviders.singleFile(codePath),
        children: presets.fullStack({
          overrides: {
            'oats/express-router': {
              cors: getCorsConfig(url),
            },
            'oats/type-guard': {
              ignore: (schema: any) => Boolean(schema?.['x-ignore-validation']),
            },
            'oats/type-validator': {
              ignore: (schema: any) => Boolean(schema?.['x-ignore-validation']),
            },
            'oats/operation': {
              cookies: true,
            },
            'oats/sdk-type': {
              cookies: true,
            },
            'oats/sdk-impl': {
              cookies: true,
            },
            'oats/request-type': {
              cookies: true,
            },
            'oats/response-type': {
              cookies: true,
            },
          },
        }),
      }),
      writer: writers.typescript.file({
        format: formatters.prettier({
          parser: 'typescript',
          arrowParens: 'always',
          printWidth: 120,
          semi: false,
          singleQuote: true,
          trailingComma: 'all',
        }),
        comments: {
          leadingComments: [
            {
              type: 'block',
              text: `This file has been generated by Oats, please don't modify it by hand!\n\nGenerated from ${url}`,
            },
          ],
        },
      }),
    })
  } catch (e) {
    console.error(codePath, url)
    console.error('thrown', e, typeof e)
  }
}

async function generateAll() {
  await fs.rm(PATH, { force: true, recursive: true })
  const files = await getFiles(['schemas', 'generated-schemas'])
  for (const path of files) {
    console.log(path)
    await generateCode(getSchemaUrl(path), getCodePath(path))
    console.log()
  }

  for (const { fileName, url } of externals) {
    console.log(url)
    await generateCode(url, getCodePath(fileName))
  }
}

generateAll()
